
D0003E-lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  00002212  000022a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002212  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000357  00800136  00800136  000022dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000022dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000230c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000270  00000000  00000000  0000234c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002db5  00000000  00000000  000025bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001169  00000000  00000000  00005371  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001672  00000000  00000000  000064da  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000cf0  00000000  00000000  00007b4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009ca  00000000  00000000  0000883c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000290f  00000000  00000000  00009206  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000230  00000000  00000000  0000bb15  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 c2 05 	jmp	0xb84	; 0xb84 <__vector_1>
       8:	0c 94 31 06 	jmp	0xc62	; 0xc62 <__vector_2>
       c:	0c 94 a0 06 	jmp	0xd40	; 0xd40 <__vector_3>
      10:	0c 94 0f 07 	jmp	0xe1e	; 0xe1e <__vector_4>
      14:	0c 94 7e 07 	jmp	0xefc	; 0xefc <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 e9 0d 	jmp	0x1bd2	; 0x1bd2 <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 97 0d 	jmp	0x1b2e	; 0x1b2e <__vector_9>
      28:	0c 94 ed 07 	jmp	0xfda	; 0xfda <__vector_10>
      2c:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__vector_11>
      30:	0c 94 cb 08 	jmp	0x1196	; 0x1196 <__vector_12>
      34:	0c 94 3a 09 	jmp	0x1274	; 0x1274 <__vector_13>
      38:	0c 94 a9 09 	jmp	0x1352	; 0x1352 <__vector_14>
      3c:	0c 94 18 0a 	jmp	0x1430	; 0x1430 <__vector_15>
      40:	0c 94 87 0a 	jmp	0x150e	; 0x150e <__vector_16>
      44:	0c 94 f6 0a 	jmp	0x15ec	; 0x15ec <__vector_17>
      48:	0c 94 65 0b 	jmp	0x16ca	; 0x16ca <__vector_18>
      4c:	0c 94 d4 0b 	jmp	0x17a8	; 0x17a8 <__vector_19>
      50:	0c 94 43 0c 	jmp	0x1886	; 0x1886 <__vector_20>
      54:	0c 94 b2 0c 	jmp	0x1964	; 0x1964 <__vector_21>
      58:	0c 94 21 0d 	jmp	0x1a42	; 0x1a42 <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	e2 e1       	ldi	r30, 0x12	; 18
      70:	f2 e2       	ldi	r31, 0x22	; 34
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	a6 33       	cpi	r26, 0x36	; 54
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	24 e0       	ldi	r18, 0x04	; 4
      80:	a6 e3       	ldi	r26, 0x36	; 54
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	ad 38       	cpi	r26, 0x8D	; 141
      8a:	b2 07       	cpc	r27, r18
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <main>
      92:	0c 94 07 11 	jmp	0x220e	; 0x220e <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <decrease>:
        else {
            PORTE ^= (1 << PE4);
        }
    AFTER(MSEC(1000/freq), self, generatePulse, NULL);    // Calls itself according to freq
    }
      9a:	cf 92       	push	r12
      9c:	df 92       	push	r13
      9e:	ef 92       	push	r14
      a0:	ff 92       	push	r15
      a2:	0f 93       	push	r16
      a4:	1f 93       	push	r17
      a6:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <__data_end>
      aa:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <__data_end+0x1>
      ae:	12 16       	cp	r1, r18
      b0:	13 06       	cpc	r1, r19
      b2:	0c f0       	brlt	.+2      	; 0xb6 <decrease+0x1c>
      b4:	45 c0       	rjmp	.+138    	; 0x140 <decrease+0xa6>
      b6:	fc 01       	movw	r30, r24
      b8:	21 50       	subi	r18, 0x01	; 1
      ba:	31 09       	sbc	r19, r1
      bc:	30 93 37 01 	sts	0x0137, r19	; 0x800137 <__data_end+0x1>
      c0:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__data_end>
      c4:	86 81       	ldd	r24, Z+6	; 0x06
      c6:	97 81       	ldd	r25, Z+7	; 0x07
      c8:	89 2b       	or	r24, r25
      ca:	f9 f0       	breq	.+62     	; 0x10a <decrease+0x70>
      cc:	69 01       	movw	r12, r18
      ce:	cc 0c       	add	r12, r12
      d0:	dd 1c       	adc	r13, r13
      d2:	22 0f       	add	r18, r18
      d4:	33 1f       	adc	r19, r19
      d6:	22 0f       	add	r18, r18
      d8:	33 1f       	adc	r19, r19
      da:	22 0f       	add	r18, r18
      dc:	33 1f       	adc	r19, r19
      de:	c2 0e       	add	r12, r18
      e0:	d3 1e       	adc	r13, r19
      e2:	04 81       	ldd	r16, Z+4	; 0x04
      e4:	15 81       	ldd	r17, Z+5	; 0x05
      e6:	84 e0       	ldi	r24, 0x04	; 4
      e8:	c8 0e       	add	r12, r24
      ea:	d1 1c       	adc	r13, r1
      ec:	0f 2e       	mov	r0, r31
      ee:	f3 eb       	ldi	r31, 0xB3	; 179
      f0:	ef 2e       	mov	r14, r31
      f2:	f3 e0       	ldi	r31, 0x03	; 3
      f4:	ff 2e       	mov	r15, r31
      f6:	f0 2d       	mov	r31, r0
      f8:	20 e0       	ldi	r18, 0x00	; 0
      fa:	30 e0       	ldi	r19, 0x00	; 0
      fc:	a9 01       	movw	r20, r18
      fe:	60 e0       	ldi	r22, 0x00	; 0
     100:	70 e0       	ldi	r23, 0x00	; 0
     102:	cb 01       	movw	r24, r22
     104:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <async>
     108:	1b c0       	rjmp	.+54     	; 0x140 <decrease+0xa6>
     10a:	04 81       	ldd	r16, Z+4	; 0x04
     10c:	15 81       	ldd	r17, Z+5	; 0x05
     10e:	69 01       	movw	r12, r18
     110:	cc 0c       	add	r12, r12
     112:	dd 1c       	adc	r13, r13
     114:	22 0f       	add	r18, r18
     116:	33 1f       	adc	r19, r19
     118:	22 0f       	add	r18, r18
     11a:	33 1f       	adc	r19, r19
     11c:	22 0f       	add	r18, r18
     11e:	33 1f       	adc	r19, r19
     120:	c2 0e       	add	r12, r18
     122:	d3 1e       	adc	r13, r19
     124:	0f 2e       	mov	r0, r31
     126:	f3 eb       	ldi	r31, 0xB3	; 179
     128:	ef 2e       	mov	r14, r31
     12a:	f3 e0       	ldi	r31, 0x03	; 3
     12c:	ff 2e       	mov	r15, r31
     12e:	f0 2d       	mov	r31, r0
     130:	20 e0       	ldi	r18, 0x00	; 0
     132:	30 e0       	ldi	r19, 0x00	; 0
     134:	a9 01       	movw	r20, r18
     136:	60 e0       	ldi	r22, 0x00	; 0
     138:	70 e0       	ldi	r23, 0x00	; 0
     13a:	cb 01       	movw	r24, r22
     13c:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <async>
     140:	1f 91       	pop	r17
     142:	0f 91       	pop	r16
     144:	ff 90       	pop	r15
     146:	ef 90       	pop	r14
     148:	df 90       	pop	r13
     14a:	cf 90       	pop	r12
     14c:	08 95       	ret

0000014e <increase>:
#include <avr/io.h>

int currentFreq = 0;
int storedFreq;

void increase(Generators *self) {
     14e:	cf 92       	push	r12
     150:	df 92       	push	r13
     152:	ef 92       	push	r14
     154:	ff 92       	push	r15
     156:	0f 93       	push	r16
     158:	1f 93       	push	r17
    currentFreq++;
     15a:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <__data_end>
     15e:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <__data_end+0x1>
     162:	2f 5f       	subi	r18, 0xFF	; 255
     164:	3f 4f       	sbci	r19, 0xFF	; 255
     166:	30 93 37 01 	sts	0x0137, r19	; 0x800137 <__data_end+0x1>
     16a:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__data_end>
    if (self->isRight) {
     16e:	fc 01       	movw	r30, r24
     170:	46 81       	ldd	r20, Z+6	; 0x06
     172:	57 81       	ldd	r21, Z+7	; 0x07
     174:	45 2b       	or	r20, r21
     176:	f9 f0       	breq	.+62     	; 0x1b6 <increase+0x68>
        int temp[] = {0, currentFreq};
        ASYNC(self->lcd, printAt, currentFreq*10 + 4);
     178:	69 01       	movw	r12, r18
     17a:	cc 0c       	add	r12, r12
     17c:	dd 1c       	adc	r13, r13
     17e:	22 0f       	add	r18, r18
     180:	33 1f       	adc	r19, r19
     182:	22 0f       	add	r18, r18
     184:	33 1f       	adc	r19, r19
     186:	22 0f       	add	r18, r18
     188:	33 1f       	adc	r19, r19
     18a:	c2 0e       	add	r12, r18
     18c:	d3 1e       	adc	r13, r19
     18e:	04 81       	ldd	r16, Z+4	; 0x04
     190:	15 81       	ldd	r17, Z+5	; 0x05
     192:	f4 e0       	ldi	r31, 0x04	; 4
     194:	cf 0e       	add	r12, r31
     196:	d1 1c       	adc	r13, r1
     198:	0f 2e       	mov	r0, r31
     19a:	f3 eb       	ldi	r31, 0xB3	; 179
     19c:	ef 2e       	mov	r14, r31
     19e:	f3 e0       	ldi	r31, 0x03	; 3
     1a0:	ff 2e       	mov	r15, r31
     1a2:	f0 2d       	mov	r31, r0
     1a4:	20 e0       	ldi	r18, 0x00	; 0
     1a6:	30 e0       	ldi	r19, 0x00	; 0
     1a8:	a9 01       	movw	r20, r18
     1aa:	60 e0       	ldi	r22, 0x00	; 0
     1ac:	70 e0       	ldi	r23, 0x00	; 0
     1ae:	cb 01       	movw	r24, r22
     1b0:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <async>
     1b4:	1c c0       	rjmp	.+56     	; 0x1ee <increase+0xa0>
    }
    else {
        ASYNC(self->lcd, printAt, currentFreq*10);
     1b6:	fc 01       	movw	r30, r24
     1b8:	04 81       	ldd	r16, Z+4	; 0x04
     1ba:	15 81       	ldd	r17, Z+5	; 0x05
     1bc:	69 01       	movw	r12, r18
     1be:	cc 0c       	add	r12, r12
     1c0:	dd 1c       	adc	r13, r13
     1c2:	22 0f       	add	r18, r18
     1c4:	33 1f       	adc	r19, r19
     1c6:	22 0f       	add	r18, r18
     1c8:	33 1f       	adc	r19, r19
     1ca:	22 0f       	add	r18, r18
     1cc:	33 1f       	adc	r19, r19
     1ce:	c2 0e       	add	r12, r18
     1d0:	d3 1e       	adc	r13, r19
     1d2:	0f 2e       	mov	r0, r31
     1d4:	f3 eb       	ldi	r31, 0xB3	; 179
     1d6:	ef 2e       	mov	r14, r31
     1d8:	f3 e0       	ldi	r31, 0x03	; 3
     1da:	ff 2e       	mov	r15, r31
     1dc:	f0 2d       	mov	r31, r0
     1de:	20 e0       	ldi	r18, 0x00	; 0
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	a9 01       	movw	r20, r18
     1e4:	60 e0       	ldi	r22, 0x00	; 0
     1e6:	70 e0       	ldi	r23, 0x00	; 0
     1e8:	cb 01       	movw	r24, r22
     1ea:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <async>
    }
    // Uppdatera frekvens för actual pulsgenerering
    
    
}
     1ee:	1f 91       	pop	r17
     1f0:	0f 91       	pop	r16
     1f2:	ff 90       	pop	r15
     1f4:	ef 90       	pop	r14
     1f6:	df 90       	pop	r13
     1f8:	cf 90       	pop	r12
     1fa:	08 95       	ret

000001fc <press>:
        // Uppdatara frekvens (osäker om man ska calla SYNC eller ASYNC)
    }
}

// The thing that happens when pressing the joystick
void press(Generators *self) {
     1fc:	cf 92       	push	r12
     1fe:	df 92       	push	r13
     200:	ef 92       	push	r14
     202:	ff 92       	push	r15
     204:	0f 93       	push	r16
     206:	1f 93       	push	r17
    if (currentFreq != 0) { // Maybe fix call later
     208:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <__data_end>
     20c:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <__data_end+0x1>
     210:	21 15       	cp	r18, r1
     212:	31 05       	cpc	r19, r1
     214:	e1 f0       	breq	.+56     	; 0x24e <__EEPROM_REGION_LENGTH__+0x4e>
        storedFreq = currentFreq;
     216:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <storedFreq+0x1>
     21a:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <storedFreq>
        currentFreq = 1;
     21e:	21 e0       	ldi	r18, 0x01	; 1
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	30 93 37 01 	sts	0x0137, r19	; 0x800137 <__data_end+0x1>
     226:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__data_end>
		ASYNC(self, decrease, NULL);
     22a:	c1 2c       	mov	r12, r1
     22c:	d1 2c       	mov	r13, r1
     22e:	0f 2e       	mov	r0, r31
     230:	fd e4       	ldi	r31, 0x4D	; 77
     232:	ef 2e       	mov	r14, r31
     234:	f0 e0       	ldi	r31, 0x00	; 0
     236:	ff 2e       	mov	r15, r31
     238:	f0 2d       	mov	r31, r0
     23a:	8c 01       	movw	r16, r24
     23c:	20 e0       	ldi	r18, 0x00	; 0
     23e:	30 e0       	ldi	r19, 0x00	; 0
     240:	a9 01       	movw	r20, r18
     242:	60 e0       	ldi	r22, 0x00	; 0
     244:	70 e0       	ldi	r23, 0x00	; 0
     246:	cb 01       	movw	r24, r22
     248:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <async>
     24c:	1b c0       	rjmp	.+54     	; 0x284 <__EEPROM_REGION_LENGTH__+0x84>
    }
    else {
        currentFreq = storedFreq + 1;
     24e:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <storedFreq>
     252:	30 91 43 01 	lds	r19, 0x0143	; 0x800143 <storedFreq+0x1>
     256:	2f 5f       	subi	r18, 0xFF	; 255
     258:	3f 4f       	sbci	r19, 0xFF	; 255
     25a:	30 93 37 01 	sts	0x0137, r19	; 0x800137 <__data_end+0x1>
     25e:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__data_end>
		ASYNC(self, decrease, NULL);
     262:	c1 2c       	mov	r12, r1
     264:	d1 2c       	mov	r13, r1
     266:	0f 2e       	mov	r0, r31
     268:	fd e4       	ldi	r31, 0x4D	; 77
     26a:	ef 2e       	mov	r14, r31
     26c:	f0 e0       	ldi	r31, 0x00	; 0
     26e:	ff 2e       	mov	r15, r31
     270:	f0 2d       	mov	r31, r0
     272:	8c 01       	movw	r16, r24
     274:	20 e0       	ldi	r18, 0x00	; 0
     276:	30 e0       	ldi	r19, 0x00	; 0
     278:	a9 01       	movw	r20, r18
     27a:	60 e0       	ldi	r22, 0x00	; 0
     27c:	70 e0       	ldi	r23, 0x00	; 0
     27e:	cb 01       	movw	r24, r22
     280:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <async>
    }
}
     284:	1f 91       	pop	r17
     286:	0f 91       	pop	r16
     288:	ff 90       	pop	r15
     28a:	ef 90       	pop	r14
     28c:	df 90       	pop	r13
     28e:	cf 90       	pop	r12
     290:	08 95       	ret

00000292 <increaseGui>:

int isRight = 1; // bool but int


// NOTE: The main purpose of this object is to distinguish current display segment and call methods accordingly
void increaseGui(Gui *self) {
     292:	cf 92       	push	r12
     294:	df 92       	push	r13
     296:	ef 92       	push	r14
     298:	ff 92       	push	r15
     29a:	0f 93       	push	r16
     29c:	1f 93       	push	r17
    if (isRight) {
     29e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     2a2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     2a6:	23 2b       	or	r18, r19
     2a8:	a1 f0       	breq	.+40     	; 0x2d2 <increaseGui+0x40>
        ASYNC(self->genR, increase, NULL);
     2aa:	fc 01       	movw	r30, r24
     2ac:	06 81       	ldd	r16, Z+6	; 0x06
     2ae:	17 81       	ldd	r17, Z+7	; 0x07
     2b0:	c1 2c       	mov	r12, r1
     2b2:	d1 2c       	mov	r13, r1
     2b4:	0f 2e       	mov	r0, r31
     2b6:	f7 ea       	ldi	r31, 0xA7	; 167
     2b8:	ef 2e       	mov	r14, r31
     2ba:	f0 e0       	ldi	r31, 0x00	; 0
     2bc:	ff 2e       	mov	r15, r31
     2be:	f0 2d       	mov	r31, r0
     2c0:	20 e0       	ldi	r18, 0x00	; 0
     2c2:	30 e0       	ldi	r19, 0x00	; 0
     2c4:	a9 01       	movw	r20, r18
     2c6:	60 e0       	ldi	r22, 0x00	; 0
     2c8:	70 e0       	ldi	r23, 0x00	; 0
     2ca:	cb 01       	movw	r24, r22
     2cc:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <async>
     2d0:	13 c0       	rjmp	.+38     	; 0x2f8 <increaseGui+0x66>
    }
    else {
        ASYNC(self->genL, increase, NULL);
     2d2:	fc 01       	movw	r30, r24
     2d4:	04 81       	ldd	r16, Z+4	; 0x04
     2d6:	15 81       	ldd	r17, Z+5	; 0x05
     2d8:	c1 2c       	mov	r12, r1
     2da:	d1 2c       	mov	r13, r1
     2dc:	0f 2e       	mov	r0, r31
     2de:	f7 ea       	ldi	r31, 0xA7	; 167
     2e0:	ef 2e       	mov	r14, r31
     2e2:	f0 e0       	ldi	r31, 0x00	; 0
     2e4:	ff 2e       	mov	r15, r31
     2e6:	f0 2d       	mov	r31, r0
     2e8:	20 e0       	ldi	r18, 0x00	; 0
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	a9 01       	movw	r20, r18
     2ee:	60 e0       	ldi	r22, 0x00	; 0
     2f0:	70 e0       	ldi	r23, 0x00	; 0
     2f2:	cb 01       	movw	r24, r22
     2f4:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <async>
    }
}
     2f8:	1f 91       	pop	r17
     2fa:	0f 91       	pop	r16
     2fc:	ff 90       	pop	r15
     2fe:	ef 90       	pop	r14
     300:	df 90       	pop	r13
     302:	cf 90       	pop	r12
     304:	08 95       	ret

00000306 <decreaseGui>:

void decreaseGui(Gui *self) {
     306:	cf 92       	push	r12
     308:	df 92       	push	r13
     30a:	ef 92       	push	r14
     30c:	ff 92       	push	r15
     30e:	0f 93       	push	r16
     310:	1f 93       	push	r17
    if (isRight) {
     312:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     316:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     31a:	23 2b       	or	r18, r19
     31c:	a1 f0       	breq	.+40     	; 0x346 <decreaseGui+0x40>
        ASYNC(self->genR, decrease, NULL);
     31e:	fc 01       	movw	r30, r24
     320:	06 81       	ldd	r16, Z+6	; 0x06
     322:	17 81       	ldd	r17, Z+7	; 0x07
     324:	c1 2c       	mov	r12, r1
     326:	d1 2c       	mov	r13, r1
     328:	0f 2e       	mov	r0, r31
     32a:	fd e4       	ldi	r31, 0x4D	; 77
     32c:	ef 2e       	mov	r14, r31
     32e:	f0 e0       	ldi	r31, 0x00	; 0
     330:	ff 2e       	mov	r15, r31
     332:	f0 2d       	mov	r31, r0
     334:	20 e0       	ldi	r18, 0x00	; 0
     336:	30 e0       	ldi	r19, 0x00	; 0
     338:	a9 01       	movw	r20, r18
     33a:	60 e0       	ldi	r22, 0x00	; 0
     33c:	70 e0       	ldi	r23, 0x00	; 0
     33e:	cb 01       	movw	r24, r22
     340:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <async>
     344:	13 c0       	rjmp	.+38     	; 0x36c <decreaseGui+0x66>
    }
    else {
        ASYNC(self->genL, printAt, NULL);
     346:	fc 01       	movw	r30, r24
     348:	04 81       	ldd	r16, Z+4	; 0x04
     34a:	15 81       	ldd	r17, Z+5	; 0x05
     34c:	c1 2c       	mov	r12, r1
     34e:	d1 2c       	mov	r13, r1
     350:	0f 2e       	mov	r0, r31
     352:	f3 eb       	ldi	r31, 0xB3	; 179
     354:	ef 2e       	mov	r14, r31
     356:	f3 e0       	ldi	r31, 0x03	; 3
     358:	ff 2e       	mov	r15, r31
     35a:	f0 2d       	mov	r31, r0
     35c:	20 e0       	ldi	r18, 0x00	; 0
     35e:	30 e0       	ldi	r19, 0x00	; 0
     360:	a9 01       	movw	r20, r18
     362:	60 e0       	ldi	r22, 0x00	; 0
     364:	70 e0       	ldi	r23, 0x00	; 0
     366:	cb 01       	movw	r24, r22
     368:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <async>
    }
}
     36c:	1f 91       	pop	r17
     36e:	0f 91       	pop	r16
     370:	ff 90       	pop	r15
     372:	ef 90       	pop	r14
     374:	df 90       	pop	r13
     376:	cf 90       	pop	r12
     378:	08 95       	ret

0000037a <switchGeneratorGui>:

void switchGeneratorGui(Gui *self) {
     37a:	cf 92       	push	r12
     37c:	df 92       	push	r13
     37e:	ef 92       	push	r14
     380:	ff 92       	push	r15
     382:	0f 93       	push	r16
     384:	1f 93       	push	r17
    ASYNC(self->lcd, switchSegment, NULL);
     386:	fc 01       	movw	r30, r24
     388:	00 85       	ldd	r16, Z+8	; 0x08
     38a:	11 85       	ldd	r17, Z+9	; 0x09
     38c:	c1 2c       	mov	r12, r1
     38e:	d1 2c       	mov	r13, r1
     390:	0f 2e       	mov	r0, r31
     392:	f5 ea       	ldi	r31, 0xA5	; 165
     394:	ef 2e       	mov	r14, r31
     396:	f3 e0       	ldi	r31, 0x03	; 3
     398:	ff 2e       	mov	r15, r31
     39a:	f0 2d       	mov	r31, r0
     39c:	20 e0       	ldi	r18, 0x00	; 0
     39e:	30 e0       	ldi	r19, 0x00	; 0
     3a0:	a9 01       	movw	r20, r18
     3a2:	60 e0       	ldi	r22, 0x00	; 0
     3a4:	70 e0       	ldi	r23, 0x00	; 0
     3a6:	cb 01       	movw	r24, r22
     3a8:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <async>
    isRight = !(isRight);
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     3b4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     3b8:	23 2b       	or	r18, r19
     3ba:	11 f0       	breq	.+4      	; 0x3c0 <switchGeneratorGui+0x46>
     3bc:	80 e0       	ldi	r24, 0x00	; 0
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     3c4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
     3c8:	1f 91       	pop	r17
     3ca:	0f 91       	pop	r16
     3cc:	ff 90       	pop	r15
     3ce:	ef 90       	pop	r14
     3d0:	df 90       	pop	r13
     3d2:	cf 90       	pop	r12
     3d4:	08 95       	ret

000003d6 <pressGui>:

void pressGui(Gui *self) {
     3d6:	cf 92       	push	r12
     3d8:	df 92       	push	r13
     3da:	ef 92       	push	r14
     3dc:	ff 92       	push	r15
     3de:	0f 93       	push	r16
     3e0:	1f 93       	push	r17
    if (isRight) {
     3e2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     3e6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     3ea:	23 2b       	or	r18, r19
     3ec:	a1 f0       	breq	.+40     	; 0x416 <__DATA_REGION_LENGTH__+0x16>
        ASYNC(self->genR, press, NULL);
     3ee:	fc 01       	movw	r30, r24
     3f0:	06 81       	ldd	r16, Z+6	; 0x06
     3f2:	17 81       	ldd	r17, Z+7	; 0x07
     3f4:	c1 2c       	mov	r12, r1
     3f6:	d1 2c       	mov	r13, r1
     3f8:	0f 2e       	mov	r0, r31
     3fa:	fe ef       	ldi	r31, 0xFE	; 254
     3fc:	ef 2e       	mov	r14, r31
     3fe:	f0 e0       	ldi	r31, 0x00	; 0
     400:	ff 2e       	mov	r15, r31
     402:	f0 2d       	mov	r31, r0
     404:	20 e0       	ldi	r18, 0x00	; 0
     406:	30 e0       	ldi	r19, 0x00	; 0
     408:	a9 01       	movw	r20, r18
     40a:	60 e0       	ldi	r22, 0x00	; 0
     40c:	70 e0       	ldi	r23, 0x00	; 0
     40e:	cb 01       	movw	r24, r22
     410:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <async>
     414:	13 c0       	rjmp	.+38     	; 0x43c <__DATA_REGION_LENGTH__+0x3c>
    }
    else {
        ASYNC(self->genL, press, NULL);
     416:	fc 01       	movw	r30, r24
     418:	04 81       	ldd	r16, Z+4	; 0x04
     41a:	15 81       	ldd	r17, Z+5	; 0x05
     41c:	c1 2c       	mov	r12, r1
     41e:	d1 2c       	mov	r13, r1
     420:	0f 2e       	mov	r0, r31
     422:	fe ef       	ldi	r31, 0xFE	; 254
     424:	ef 2e       	mov	r14, r31
     426:	f0 e0       	ldi	r31, 0x00	; 0
     428:	ff 2e       	mov	r15, r31
     42a:	f0 2d       	mov	r31, r0
     42c:	20 e0       	ldi	r18, 0x00	; 0
     42e:	30 e0       	ldi	r19, 0x00	; 0
     430:	a9 01       	movw	r20, r18
     432:	60 e0       	ldi	r22, 0x00	; 0
     434:	70 e0       	ldi	r23, 0x00	; 0
     436:	cb 01       	movw	r24, r22
     438:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <async>
    }
}
     43c:	1f 91       	pop	r17
     43e:	0f 91       	pop	r16
     440:	ff 90       	pop	r15
     442:	ef 90       	pop	r14
     444:	df 90       	pop	r13
     446:	cf 90       	pop	r12
     448:	08 95       	ret

0000044a <Init>:
 */ 
#include <avr/io.h>
#include "Init.h"

void Init(void) {
	CLKPR = 0x80;    // Fix clock speed
     44a:	e1 e6       	ldi	r30, 0x61	; 97
     44c:	f0 e0       	ldi	r31, 0x00	; 0
     44e:	80 e8       	ldi	r24, 0x80	; 128
     450:	80 83       	st	Z, r24
	CLKPR = 0x00;
     452:	10 82       	st	Z, r1
	
	// LCD init
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
     454:	9f e0       	ldi	r25, 0x0F	; 15
     456:	90 93 e7 00 	sts	0x00E7, r25	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
	//       (                      Voltage                              )
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
     45a:	97 eb       	ldi	r25, 0xB7	; 183
     45c:	90 93 e5 00 	sts	0x00E5, r25	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	//       (asynch ext)   (        duty cycle           )   (                  segments                 )
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
     460:	97 e0       	ldi	r25, 0x07	; 7
     462:	90 93 e6 00 	sts	0x00E6, r25	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
	//       (            Delen med D                    )
	LCDCRA = (1 << LCDAB) | (1 << LCDEN);
     466:	90 ec       	ldi	r25, 0xC0	; 192
     468:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
	//       (low power )   (enable lcd)
	
	// Stuffs for the joystick and interrupt
	PORTB = SET(PB7) | SET(PB6) | SET(PB4);					// Set corresponding Output pin for up, down and in
     46c:	90 ed       	ldi	r25, 0xD0	; 208
     46e:	95 b9       	out	0x05, r25	; 5
	DDRB = SET(DDB7);										// Unsure
     470:	84 b9       	out	0x04, r24	; 4

	PORTE = SET(PE2) | SET(PE3);							// Set corresponding Output pin for Left and Right
     472:	8c e0       	ldi	r24, 0x0C	; 12
     474:	8e b9       	out	0x0e, r24	; 14
	DDRE = SET(DDE2) | SET(DDE3);						
     476:	8d b9       	out	0x0d, r24	; 13
	PCMSK1 |= SET(PCINT15) | SET(PCINT14) | SET(PCINT12);	// Pin change interrupt 1
     478:	ec e6       	ldi	r30, 0x6C	; 108
     47a:	f0 e0       	ldi	r31, 0x00	; 0
     47c:	80 81       	ld	r24, Z
     47e:	80 6d       	ori	r24, 0xD0	; 208
     480:	80 83       	st	Z, r24
	PCMSK0 |= SET(PCINT2) | SET(PCINT3);
     482:	eb e6       	ldi	r30, 0x6B	; 107
     484:	f0 e0       	ldi	r31, 0x00	; 0
     486:	80 81       	ld	r24, Z
     488:	8c 60       	ori	r24, 0x0C	; 12
     48a:	80 83       	st	Z, r24
	EIMSK |= SET(PCIE1) | SET(PCIE0);						// Enalbe pin change on I/O pin 7
     48c:	8d b3       	in	r24, 0x1d	; 29
     48e:	80 6c       	ori	r24, 0xC0	; 192
     490:	8d bb       	out	0x1d, r24	; 29
     492:	08 95       	ret

00000494 <joystickVert>:
#include <stdbool.h>
#include <avr/io.h>
#include "Joystick.h"


int joystickVert(Joystick *self){
     494:	cf 92       	push	r12
     496:	df 92       	push	r13
     498:	ef 92       	push	r14
     49a:	ff 92       	push	r15
     49c:	0f 93       	push	r16
     49e:	1f 93       	push	r17
     4a0:	cf 93       	push	r28
     4a2:	df 93       	push	r29
     4a4:	ec 01       	movw	r28, r24
	if (!(PINB & (1 << PB7))) { //ner klickning
     4a6:	1f 99       	sbic	0x03, 7	; 3
     4a8:	22 c0       	rjmp	.+68     	; 0x4ee <joystickVert+0x5a>
		ASYNC(self->gui, decreaseGui, NULL); // Kalla p� GUI f�r att s�nka frekvensen
     4aa:	0c 81       	ldd	r16, Y+4	; 0x04
     4ac:	1d 81       	ldd	r17, Y+5	; 0x05
     4ae:	c1 2c       	mov	r12, r1
     4b0:	d1 2c       	mov	r13, r1
     4b2:	0f 2e       	mov	r0, r31
     4b4:	f3 e8       	ldi	r31, 0x83	; 131
     4b6:	ef 2e       	mov	r14, r31
     4b8:	f1 e0       	ldi	r31, 0x01	; 1
     4ba:	ff 2e       	mov	r15, r31
     4bc:	f0 2d       	mov	r31, r0
     4be:	20 e0       	ldi	r18, 0x00	; 0
     4c0:	30 e0       	ldi	r19, 0x00	; 0
     4c2:	a9 01       	movw	r20, r18
     4c4:	60 e0       	ldi	r22, 0x00	; 0
     4c6:	70 e0       	ldi	r23, 0x00	; 0
     4c8:	cb 01       	movw	r24, r22
     4ca:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <async>
		AFTER(MSEC(100), self, joystickVert, NULL);	// Kalla p� sig sj�lv igen (loop)
     4ce:	0f 2e       	mov	r0, r31
     4d0:	fa e4       	ldi	r31, 0x4A	; 74
     4d2:	ef 2e       	mov	r14, r31
     4d4:	f2 e0       	ldi	r31, 0x02	; 2
     4d6:	ff 2e       	mov	r15, r31
     4d8:	f0 2d       	mov	r31, r0
     4da:	8e 01       	movw	r16, r28
     4dc:	20 e0       	ldi	r18, 0x00	; 0
     4de:	30 e0       	ldi	r19, 0x00	; 0
     4e0:	a9 01       	movw	r20, r18
     4e2:	65 e3       	ldi	r22, 0x35	; 53
     4e4:	7c e0       	ldi	r23, 0x0C	; 12
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <async>
	}
	if (!(PINB & (1 << PB6))) {	// Up
     4ee:	1e 99       	sbic	0x03, 6	; 3
     4f0:	22 c0       	rjmp	.+68     	; 0x536 <__stack+0x37>
		ASYNC(self->gui, increaseGui, NULL);
     4f2:	0c 81       	ldd	r16, Y+4	; 0x04
     4f4:	1d 81       	ldd	r17, Y+5	; 0x05
     4f6:	c1 2c       	mov	r12, r1
     4f8:	d1 2c       	mov	r13, r1
     4fa:	0f 2e       	mov	r0, r31
     4fc:	f9 e4       	ldi	r31, 0x49	; 73
     4fe:	ef 2e       	mov	r14, r31
     500:	f1 e0       	ldi	r31, 0x01	; 1
     502:	ff 2e       	mov	r15, r31
     504:	f0 2d       	mov	r31, r0
     506:	20 e0       	ldi	r18, 0x00	; 0
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	a9 01       	movw	r20, r18
     50c:	60 e0       	ldi	r22, 0x00	; 0
     50e:	70 e0       	ldi	r23, 0x00	; 0
     510:	cb 01       	movw	r24, r22
     512:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <async>
		AFTER(MSEC(100), self, joystickVert, NULL);
     516:	0f 2e       	mov	r0, r31
     518:	fa e4       	ldi	r31, 0x4A	; 74
     51a:	ef 2e       	mov	r14, r31
     51c:	f2 e0       	ldi	r31, 0x02	; 2
     51e:	ff 2e       	mov	r15, r31
     520:	f0 2d       	mov	r31, r0
     522:	8e 01       	movw	r16, r28
     524:	20 e0       	ldi	r18, 0x00	; 0
     526:	30 e0       	ldi	r19, 0x00	; 0
     528:	a9 01       	movw	r20, r18
     52a:	65 e3       	ldi	r22, 0x35	; 53
     52c:	7c e0       	ldi	r23, 0x0C	; 12
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <async>
	}
	if (!(PINB & (1 << PB4))) { // Press
     536:	1c 99       	sbic	0x03, 4	; 3
     538:	12 c0       	rjmp	.+36     	; 0x55e <__stack+0x5f>
		ASYNC(self->gui, pressGui, NULL);
     53a:	0c 81       	ldd	r16, Y+4	; 0x04
     53c:	1d 81       	ldd	r17, Y+5	; 0x05
     53e:	c1 2c       	mov	r12, r1
     540:	d1 2c       	mov	r13, r1
     542:	0f 2e       	mov	r0, r31
     544:	fb ee       	ldi	r31, 0xEB	; 235
     546:	ef 2e       	mov	r14, r31
     548:	f1 e0       	ldi	r31, 0x01	; 1
     54a:	ff 2e       	mov	r15, r31
     54c:	f0 2d       	mov	r31, r0
     54e:	20 e0       	ldi	r18, 0x00	; 0
     550:	30 e0       	ldi	r19, 0x00	; 0
     552:	a9 01       	movw	r20, r18
     554:	60 e0       	ldi	r22, 0x00	; 0
     556:	70 e0       	ldi	r23, 0x00	; 0
     558:	cb 01       	movw	r24, r22
     55a:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <async>
		else{
			self->risingEdge = true;
		}*/
	}
	return 0;
}
     55e:	80 e0       	ldi	r24, 0x00	; 0
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	df 91       	pop	r29
     564:	cf 91       	pop	r28
     566:	1f 91       	pop	r17
     568:	0f 91       	pop	r16
     56a:	ff 90       	pop	r15
     56c:	ef 90       	pop	r14
     56e:	df 90       	pop	r13
     570:	cf 90       	pop	r12
     572:	08 95       	ret

00000574 <joystickHor>:


int joystickHor(Joystick *self) {
     574:	cf 92       	push	r12
     576:	df 92       	push	r13
     578:	ef 92       	push	r14
     57a:	ff 92       	push	r15
     57c:	0f 93       	push	r16
     57e:	1f 93       	push	r17
	if (!(PINE & (1 << PE3)) || (!(PINE & (1 << PE2)))) {	// Både och???
     580:	63 9b       	sbis	0x0c, 3	; 12
     582:	02 c0       	rjmp	.+4      	; 0x588 <joystickHor+0x14>
     584:	62 99       	sbic	0x0c, 2	; 12
     586:	13 c0       	rjmp	.+38     	; 0x5ae <joystickHor+0x3a>
     588:	fc 01       	movw	r30, r24
		ASYNC(self->gui, switchGeneratorGui, NULL);
     58a:	04 81       	ldd	r16, Z+4	; 0x04
     58c:	15 81       	ldd	r17, Z+5	; 0x05
     58e:	c1 2c       	mov	r12, r1
     590:	d1 2c       	mov	r13, r1
     592:	0f 2e       	mov	r0, r31
     594:	fd eb       	ldi	r31, 0xBD	; 189
     596:	ef 2e       	mov	r14, r31
     598:	f1 e0       	ldi	r31, 0x01	; 1
     59a:	ff 2e       	mov	r15, r31
     59c:	f0 2d       	mov	r31, r0
     59e:	20 e0       	ldi	r18, 0x00	; 0
     5a0:	30 e0       	ldi	r19, 0x00	; 0
     5a2:	a9 01       	movw	r20, r18
     5a4:	60 e0       	ldi	r22, 0x00	; 0
     5a6:	70 e0       	ldi	r23, 0x00	; 0
     5a8:	cb 01       	movw	r24, r22
     5aa:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <async>
	}
}
     5ae:	1f 91       	pop	r17
     5b0:	0f 91       	pop	r16
     5b2:	ff 90       	pop	r15
     5b4:	ef 90       	pop	r14
     5b6:	df 90       	pop	r13
     5b8:	cf 90       	pop	r12
     5ba:	08 95       	ret

000005bc <displayChar>:
    [9] = {0b0001, 0b0101, 0b1011, 0b0001},
    [10] = {0b1001, 0b1111, 0b1111, 0b1111},// This spot is for the "invalid" character (also used for reset)
};
 
//Help function for writeChar (fills array with elements that match character)
void displayChar(char c, bool odd, volatile uint8_t *address) {
     5bc:	cf 93       	push	r28
     5be:	df 93       	push	r29
     5c0:	00 d0       	rcall	.+0      	; 0x5c2 <displayChar+0x6>
     5c2:	00 d0       	rcall	.+0      	; 0x5c4 <displayChar+0x8>
     5c4:	cd b7       	in	r28, 0x3d	; 61
     5c6:	de b7       	in	r29, 0x3e	; 62
     5c8:	da 01       	movw	r26, r20
    uint8_t array[4];
    if (c < '0' || c > '9') {	// Invalid character
     5ca:	90 ed       	ldi	r25, 0xD0	; 208
     5cc:	98 0f       	add	r25, r24
     5ce:	9a 30       	cpi	r25, 0x0A	; 10
     5d0:	80 f4       	brcc	.+32     	; 0x5f2 <displayChar+0x36>
     5d2:	20 e0       	ldi	r18, 0x00	; 0
     5d4:	30 e0       	ldi	r19, 0x00	; 0
     5d6:	28 c0       	rjmp	.+80     	; 0x628 <displayChar+0x6c>
        for (int i = 0; i < 4; i++) {
            array[i] = characters[10][i];
     5d8:	fc 01       	movw	r30, r24
     5da:	e6 5f       	subi	r30, 0xF6	; 246
     5dc:	fe 4f       	sbci	r31, 0xFE	; 254
     5de:	20 a5       	ldd	r18, Z+40	; 0x28
     5e0:	e1 e0       	ldi	r30, 0x01	; 1
     5e2:	f0 e0       	ldi	r31, 0x00	; 0
     5e4:	ec 0f       	add	r30, r28
     5e6:	fd 1f       	adc	r31, r29
     5e8:	e8 0f       	add	r30, r24
     5ea:	f9 1f       	adc	r31, r25
     5ec:	20 83       	st	Z, r18
 
//Help function for writeChar (fills array with elements that match character)
void displayChar(char c, bool odd, volatile uint8_t *address) {
    uint8_t array[4];
    if (c < '0' || c > '9') {	// Invalid character
        for (int i = 0; i < 4; i++) {
     5ee:	01 96       	adiw	r24, 0x01	; 1
     5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <displayChar+0x3a>
     5f2:	80 e0       	ldi	r24, 0x00	; 0
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	84 30       	cpi	r24, 0x04	; 4
     5f8:	91 05       	cpc	r25, r1
     5fa:	74 f3       	brlt	.-36     	; 0x5d8 <displayChar+0x1c>
     5fc:	18 c0       	rjmp	.+48     	; 0x62e <displayChar+0x72>
            array[i] = characters[10][i];
        }
    }
    else {						// Valid character
        for (int i = 0; i < 4; i++) {
            array[i] = characters[c-48][i];
     5fe:	e8 2f       	mov	r30, r24
     600:	f0 e0       	ldi	r31, 0x00	; 0
     602:	f0 97       	sbiw	r30, 0x30	; 48
     604:	ee 0f       	add	r30, r30
     606:	ff 1f       	adc	r31, r31
     608:	ee 0f       	add	r30, r30
     60a:	ff 1f       	adc	r31, r31
     60c:	e6 5f       	subi	r30, 0xF6	; 246
     60e:	fe 4f       	sbci	r31, 0xFE	; 254
     610:	e2 0f       	add	r30, r18
     612:	f3 1f       	adc	r31, r19
     614:	90 81       	ld	r25, Z
     616:	e1 e0       	ldi	r30, 0x01	; 1
     618:	f0 e0       	ldi	r31, 0x00	; 0
     61a:	ec 0f       	add	r30, r28
     61c:	fd 1f       	adc	r31, r29
     61e:	e2 0f       	add	r30, r18
     620:	f3 1f       	adc	r31, r19
     622:	90 83       	st	Z, r25
        for (int i = 0; i < 4; i++) {
            array[i] = characters[10][i];
        }
    }
    else {						// Valid character
        for (int i = 0; i < 4; i++) {
     624:	2f 5f       	subi	r18, 0xFF	; 255
     626:	3f 4f       	sbci	r19, 0xFF	; 255
     628:	24 30       	cpi	r18, 0x04	; 4
     62a:	31 05       	cpc	r19, r1
     62c:	44 f3       	brlt	.-48     	; 0x5fe <displayChar+0x42>
            array[i] = characters[c-48][i];
        }
    }
    if (odd) {					// If odd digit, shifts in order to set correct digit
     62e:	61 11       	cpse	r22, r1
     630:	0d c0       	rjmp	.+26     	; 0x64c <displayChar+0x90>
     632:	11 c0       	rjmp	.+34     	; 0x656 <displayChar+0x9a>
        for (int i = 0; i < 4; i++) {
            array[i] <<= 4;
     634:	e1 e0       	ldi	r30, 0x01	; 1
     636:	f0 e0       	ldi	r31, 0x00	; 0
     638:	ec 0f       	add	r30, r28
     63a:	fd 1f       	adc	r31, r29
     63c:	e8 0f       	add	r30, r24
     63e:	f9 1f       	adc	r31, r25
     640:	20 81       	ld	r18, Z
     642:	22 95       	swap	r18
     644:	20 7f       	andi	r18, 0xF0	; 240
     646:	20 83       	st	Z, r18
        for (int i = 0; i < 4; i++) {
            array[i] = characters[c-48][i];
        }
    }
    if (odd) {					// If odd digit, shifts in order to set correct digit
        for (int i = 0; i < 4; i++) {
     648:	01 96       	adiw	r24, 0x01	; 1
     64a:	02 c0       	rjmp	.+4      	; 0x650 <displayChar+0x94>
     64c:	80 e0       	ldi	r24, 0x00	; 0
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	84 30       	cpi	r24, 0x04	; 4
     652:	91 05       	cpc	r25, r1
     654:	7c f3       	brlt	.-34     	; 0x634 <displayChar+0x78>
            array[i] <<= 4;
        }
    }							// This part sets the character in needed registers
    *address |= array[0];		// (K, -, -, A)
     656:	9c 91       	ld	r25, X
     658:	89 81       	ldd	r24, Y+1	; 0x01
     65a:	89 2b       	or	r24, r25
     65c:	8c 93       	st	X, r24
    *(address+5) |= array[1];	// (J, F, H, B)
     65e:	15 96       	adiw	r26, 0x05	; 5
     660:	9c 91       	ld	r25, X
     662:	15 97       	sbiw	r26, 0x05	; 5
     664:	8a 81       	ldd	r24, Y+2	; 0x02
     666:	89 2b       	or	r24, r25
     668:	15 96       	adiw	r26, 0x05	; 5
     66a:	8c 93       	st	X, r24
     66c:	15 97       	sbiw	r26, 0x05	; 5
    *(address+10) |= array[2];	// (L, E, G, C)
     66e:	1a 96       	adiw	r26, 0x0a	; 10
     670:	9c 91       	ld	r25, X
     672:	1a 97       	sbiw	r26, 0x0a	; 10
     674:	8b 81       	ldd	r24, Y+3	; 0x03
     676:	89 2b       	or	r24, r25
     678:	1a 96       	adiw	r26, 0x0a	; 10
     67a:	8c 93       	st	X, r24
     67c:	1a 97       	sbiw	r26, 0x0a	; 10
    *(address+15) |= array[3];	// (M, P, N, D)
     67e:	1f 96       	adiw	r26, 0x0f	; 15
     680:	9c 91       	ld	r25, X
     682:	1f 97       	sbiw	r26, 0x0f	; 15
     684:	8c 81       	ldd	r24, Y+4	; 0x04
     686:	89 2b       	or	r24, r25
     688:	1f 96       	adiw	r26, 0x0f	; 15
     68a:	8c 93       	st	X, r24
}
     68c:	0f 90       	pop	r0
     68e:	0f 90       	pop	r0
     690:	0f 90       	pop	r0
     692:	0f 90       	pop	r0
     694:	df 91       	pop	r29
     696:	cf 91       	pop	r28
     698:	08 95       	ret

0000069a <removeOldChar>:
 
 
// Removes previous character at given location
void removeOldChar(bool odd, volatile uint8_t *address) {
    // AND:s 0 on the parts that need to be reset
    if (odd) {
     69a:	88 23       	and	r24, r24
     69c:	91 f0       	breq	.+36     	; 0x6c2 <removeOldChar+0x28>
        *address &= 0b00001001;
     69e:	fb 01       	movw	r30, r22
     6a0:	80 81       	ld	r24, Z
     6a2:	89 70       	andi	r24, 0x09	; 9
     6a4:	80 83       	st	Z, r24
        for (int i = 5; i < 20; i += 5) {
     6a6:	85 e0       	ldi	r24, 0x05	; 5
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	07 c0       	rjmp	.+14     	; 0x6ba <removeOldChar+0x20>
            *(address + i) &= 0b00001111;
     6ac:	fb 01       	movw	r30, r22
     6ae:	e8 0f       	add	r30, r24
     6b0:	f9 1f       	adc	r31, r25
     6b2:	20 81       	ld	r18, Z
     6b4:	2f 70       	andi	r18, 0x0F	; 15
     6b6:	20 83       	st	Z, r18
// Removes previous character at given location
void removeOldChar(bool odd, volatile uint8_t *address) {
    // AND:s 0 on the parts that need to be reset
    if (odd) {
        *address &= 0b00001001;
        for (int i = 5; i < 20; i += 5) {
     6b8:	05 96       	adiw	r24, 0x05	; 5
     6ba:	84 31       	cpi	r24, 0x14	; 20
     6bc:	91 05       	cpc	r25, r1
     6be:	b4 f3       	brlt	.-20     	; 0x6ac <removeOldChar+0x12>
     6c0:	08 95       	ret
            *(address + i) &= 0b00001111;
        }
    }
    else {
        *address &= 0b10010000;
     6c2:	fb 01       	movw	r30, r22
     6c4:	80 81       	ld	r24, Z
     6c6:	80 79       	andi	r24, 0x90	; 144
     6c8:	80 83       	st	Z, r24
        for (int i = 5; i < 20; i += 5) {
     6ca:	85 e0       	ldi	r24, 0x05	; 5
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	07 c0       	rjmp	.+14     	; 0x6de <removeOldChar+0x44>
            *(address + i) &= 0b11110000;
     6d0:	fb 01       	movw	r30, r22
     6d2:	e8 0f       	add	r30, r24
     6d4:	f9 1f       	adc	r31, r25
     6d6:	20 81       	ld	r18, Z
     6d8:	20 7f       	andi	r18, 0xF0	; 240
     6da:	20 83       	st	Z, r18
            *(address + i) &= 0b00001111;
        }
    }
    else {
        *address &= 0b10010000;
        for (int i = 5; i < 20; i += 5) {
     6dc:	05 96       	adiw	r24, 0x05	; 5
     6de:	84 31       	cpi	r24, 0x14	; 20
     6e0:	91 05       	cpc	r25, r1
     6e2:	b4 f3       	brlt	.-20     	; 0x6d0 <removeOldChar+0x36>
     6e4:	08 95       	ret

000006e6 <writeChar>:
        }
    }
}
 
// Takes character ('0' - '9') and a position (0 - 5 (NOT CHECKED)) and prints it on the screen
void writeChar(char c, int pos) {
     6e6:	1f 93       	push	r17
     6e8:	cf 93       	push	r28
     6ea:	df 93       	push	r29
     6ec:	18 2f       	mov	r17, r24
    volatile uint8_t *address = &LCDDR0;	// Create pointer to start register
    if (pos % 2 == 0) {	// Even
     6ee:	60 fd       	sbrc	r22, 0
     6f0:	14 c0       	rjmp	.+40     	; 0x71a <writeChar+0x34>
        address += pos/2;					// Change address according to position
     6f2:	ab 01       	movw	r20, r22
     6f4:	77 23       	and	r23, r23
     6f6:	14 f4       	brge	.+4      	; 0x6fc <writeChar+0x16>
     6f8:	4f 5f       	subi	r20, 0xFF	; 255
     6fa:	5f 4f       	sbci	r21, 0xFF	; 255
     6fc:	55 95       	asr	r21
     6fe:	47 95       	ror	r20
     700:	ea 01       	movw	r28, r20
     702:	c4 51       	subi	r28, 0x14	; 20
     704:	df 4f       	sbci	r29, 0xFF	; 255
        removeOldChar(false, address);
     706:	be 01       	movw	r22, r28
     708:	80 e0       	ldi	r24, 0x00	; 0
     70a:	0e 94 4d 03 	call	0x69a	; 0x69a <removeOldChar>
        displayChar(c, false, address);
     70e:	ae 01       	movw	r20, r28
     710:	60 e0       	ldi	r22, 0x00	; 0
     712:	81 2f       	mov	r24, r17
     714:	0e 94 de 02 	call	0x5bc	; 0x5bc <displayChar>
     718:	14 c0       	rjmp	.+40     	; 0x742 <writeChar+0x5c>
    }
    else {				// Odd
        address += (pos - 1) / 2;			// Change address according to position
     71a:	61 50       	subi	r22, 0x01	; 1
     71c:	71 09       	sbc	r23, r1
     71e:	ab 01       	movw	r20, r22
     720:	12 f4       	brpl	.+4      	; 0x726 <writeChar+0x40>
     722:	4f 5f       	subi	r20, 0xFF	; 255
     724:	5f 4f       	sbci	r21, 0xFF	; 255
     726:	55 95       	asr	r21
     728:	47 95       	ror	r20
     72a:	ea 01       	movw	r28, r20
     72c:	c4 51       	subi	r28, 0x14	; 20
     72e:	df 4f       	sbci	r29, 0xFF	; 255
        removeOldChar(true, address);
     730:	be 01       	movw	r22, r28
     732:	81 e0       	ldi	r24, 0x01	; 1
     734:	0e 94 4d 03 	call	0x69a	; 0x69a <removeOldChar>
        displayChar(c, true, address);
     738:	ae 01       	movw	r20, r28
     73a:	61 e0       	ldi	r22, 0x01	; 1
     73c:	81 2f       	mov	r24, r17
     73e:	0e 94 de 02 	call	0x5bc	; 0x5bc <displayChar>
    }
};
     742:	df 91       	pop	r29
     744:	cf 91       	pop	r28
     746:	1f 91       	pop	r17
     748:	08 95       	ret

0000074a <switchSegment>:

// Switches between two segments 
void switchSegment() {
    LCDDR13 = !(LCDDR13 & 1);
     74a:	e9 ef       	ldi	r30, 0xF9	; 249
     74c:	f0 e0       	ldi	r31, 0x00	; 0
     74e:	90 81       	ld	r25, Z
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	98 27       	eor	r25, r24
     754:	91 70       	andi	r25, 0x01	; 1
     756:	90 83       	st	Z, r25
    LCDDR18 = !(LCDDR18 & 1);
     758:	ee ef       	ldi	r30, 0xFE	; 254
     75a:	f0 e0       	ldi	r31, 0x00	; 0
     75c:	90 81       	ld	r25, Z
     75e:	89 27       	eor	r24, r25
     760:	81 70       	andi	r24, 0x01	; 1
     762:	80 83       	st	Z, r24
     764:	08 95       	ret

00000766 <printAt>:
}
 
// Displays last two digits of num in pos and pos+1
int  printAt(Lcd *self, int input) {  // [pos, num]
     766:	ef 92       	push	r14
     768:	ff 92       	push	r15
     76a:	0f 93       	push	r16
     76c:	1f 93       	push	r17
     76e:	cf 93       	push	r28
     770:	df 93       	push	r29
     772:	cb 01       	movw	r24, r22
    int pp = input % 10;
     774:	0a e0       	ldi	r16, 0x0A	; 10
     776:	10 e0       	ldi	r17, 0x00	; 0
     778:	b8 01       	movw	r22, r16
     77a:	0e 94 9e 10 	call	0x213c	; 0x213c <__divmodhi4>
     77e:	7b 01       	movw	r14, r22
     780:	ec 01       	movw	r28, r24
    int num = input / 10;
    writeChar((num % 100) / 10 + '0', pp);
     782:	cb 01       	movw	r24, r22
     784:	64 e6       	ldi	r22, 0x64	; 100
     786:	70 e0       	ldi	r23, 0x00	; 0
     788:	0e 94 9e 10 	call	0x213c	; 0x213c <__divmodhi4>
     78c:	b8 01       	movw	r22, r16
     78e:	0e 94 9e 10 	call	0x213c	; 0x213c <__divmodhi4>
     792:	86 2f       	mov	r24, r22
     794:	be 01       	movw	r22, r28
     796:	80 5d       	subi	r24, 0xD0	; 208
     798:	0e 94 73 03 	call	0x6e6	; 0x6e6 <writeChar>
    pp++;
     79c:	21 96       	adiw	r28, 0x01	; 1
    writeChar( num % 10 + '0', pp);
     79e:	c7 01       	movw	r24, r14
     7a0:	b8 01       	movw	r22, r16
     7a2:	0e 94 9e 10 	call	0x213c	; 0x213c <__divmodhi4>
     7a6:	be 01       	movw	r22, r28
     7a8:	80 5d       	subi	r24, 0xD0	; 208
     7aa:	0e 94 73 03 	call	0x6e6	; 0x6e6 <writeChar>

    return 0;
     7ae:	80 e0       	ldi	r24, 0x00	; 0
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	df 91       	pop	r29
     7b4:	cf 91       	pop	r28
     7b6:	1f 91       	pop	r17
     7b8:	0f 91       	pop	r16
     7ba:	ff 90       	pop	r15
     7bc:	ef 90       	pop	r14
     7be:	08 95       	ret

000007c0 <main>:
#include "Joystick.h"
#include "Lcd.h"
#include "TinyTimber.h"


int main() {
     7c0:	cf 93       	push	r28
     7c2:	df 93       	push	r29
     7c4:	cd b7       	in	r28, 0x3d	; 61
     7c6:	de b7       	in	r29, 0x3e	; 62
     7c8:	a4 97       	sbiw	r28, 0x24	; 36
     7ca:	0f b6       	in	r0, 0x3f	; 63
     7cc:	f8 94       	cli
     7ce:	de bf       	out	0x3e, r29	; 62
     7d0:	0f be       	out	0x3f, r0	; 63
     7d2:	cd bf       	out	0x3d, r28	; 61
	Init();
     7d4:	0e 94 25 02 	call	0x44a	; 0x44a <Init>
	Lcd display = initLcd();
     7d8:	1a 82       	std	Y+2, r1	; 0x02
     7da:	19 82       	std	Y+1, r1	; 0x01
     7dc:	1c 82       	std	Y+4, r1	; 0x04
     7de:	1b 82       	std	Y+3, r1	; 0x03
	Generators genL = initGenerator(&display, 0);
     7e0:	1e 82       	std	Y+6, r1	; 0x06
     7e2:	1d 82       	std	Y+5, r1	; 0x05
     7e4:	18 86       	std	Y+8, r1	; 0x08
     7e6:	1f 82       	std	Y+7, r1	; 0x07
     7e8:	ce 01       	movw	r24, r28
     7ea:	01 96       	adiw	r24, 0x01	; 1
     7ec:	9a 87       	std	Y+10, r25	; 0x0a
     7ee:	89 87       	std	Y+9, r24	; 0x09
     7f0:	1c 86       	std	Y+12, r1	; 0x0c
     7f2:	1b 86       	std	Y+11, r1	; 0x0b
	Generators genR = initGenerator(&display, 1);
     7f4:	1e 86       	std	Y+14, r1	; 0x0e
     7f6:	1d 86       	std	Y+13, r1	; 0x0d
     7f8:	18 8a       	std	Y+16, r1	; 0x10
     7fa:	1f 86       	std	Y+15, r1	; 0x0f
     7fc:	9a 8b       	std	Y+18, r25	; 0x12
     7fe:	89 8b       	std	Y+17, r24	; 0x11
     800:	21 e0       	ldi	r18, 0x01	; 1
     802:	30 e0       	ldi	r19, 0x00	; 0
     804:	3c 8b       	std	Y+20, r19	; 0x14
     806:	2b 8b       	std	Y+19, r18	; 0x13
	Gui gui = initGui(&genL, &genR, &display);
     808:	1e 8a       	std	Y+22, r1	; 0x16
     80a:	1d 8a       	std	Y+21, r1	; 0x15
     80c:	18 8e       	std	Y+24, r1	; 0x18
     80e:	1f 8a       	std	Y+23, r1	; 0x17
     810:	9e 01       	movw	r18, r28
     812:	2b 5f       	subi	r18, 0xFB	; 251
     814:	3f 4f       	sbci	r19, 0xFF	; 255
     816:	3a 8f       	std	Y+26, r19	; 0x1a
     818:	29 8f       	std	Y+25, r18	; 0x19
     81a:	28 5f       	subi	r18, 0xF8	; 248
     81c:	3f 4f       	sbci	r19, 0xFF	; 255
     81e:	3c 8f       	std	Y+28, r19	; 0x1c
     820:	2b 8f       	std	Y+27, r18	; 0x1b
     822:	9e 8f       	std	Y+30, r25	; 0x1e
     824:	8d 8f       	std	Y+29, r24	; 0x1d
	Joystick joy = initJoystick(&gui);
     826:	18 a2       	std	Y+32, r1	; 0x20
     828:	1f 8e       	std	Y+31, r1	; 0x1f
     82a:	1a a2       	std	Y+34, r1	; 0x22
     82c:	19 a2       	std	Y+33, r1	; 0x21
     82e:	44 96       	adiw	r24, 0x14	; 20
     830:	9c a3       	std	Y+36, r25	; 0x24
     832:	8b a3       	std	Y+35, r24	; 0x23
	InteruptHandler inter = initInteruptHandler(&joy);
	INSTALL(&joy, joystickVert, IRQ_PCINT1);
     834:	42 e0       	ldi	r20, 0x02	; 2
     836:	6a e4       	ldi	r22, 0x4A	; 74
     838:	72 e0       	ldi	r23, 0x02	; 2
     83a:	0a 96       	adiw	r24, 0x0a	; 10
     83c:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <install>
	INSTALL(&joy, joystickHor, IRQ_PCINT0);
     840:	41 e0       	ldi	r20, 0x01	; 1
     842:	6a eb       	ldi	r22, 0xBA	; 186
     844:	72 e0       	ldi	r23, 0x02	; 2
     846:	ce 01       	movw	r24, r28
     848:	4f 96       	adiw	r24, 0x1f	; 31
     84a:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <install>
	/*INSTALL(&inter, FreqChange, IRQ_PCINT1);
	INSTALL(&inter, genSwitch, IRQ_PCINT0);*/
	return tinytimber(NULL,NULL,NULL);		
     84e:	40 e0       	ldi	r20, 0x00	; 0
     850:	50 e0       	ldi	r21, 0x00	; 0
     852:	60 e0       	ldi	r22, 0x00	; 0
     854:	70 e0       	ldi	r23, 0x00	; 0
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	0e 94 87 10 	call	0x210e	; 0x210e <tinytimber>
     85e:	a4 96       	adiw	r28, 0x24	; 36
     860:	0f b6       	in	r0, 0x3f	; 63
     862:	f8 94       	cli
     864:	de bf       	out	0x3e, r29	; 62
     866:	0f be       	out	0x3f, r0	; 63
     868:	cd bf       	out	0x3d, r28	; 61
     86a:	df 91       	pop	r29
     86c:	cf 91       	pop	r28
     86e:	08 95       	ret

00000870 <initialize>:
     870:	cf 93       	push	r28
     872:	df 93       	push	r29
     874:	00 d0       	rcall	.+0      	; 0x876 <initialize+0x6>
     876:	00 d0       	rcall	.+0      	; 0x878 <initialize+0x8>
     878:	cd b7       	in	r28, 0x3d	; 61
     87a:	de b7       	in	r29, 0x3e	; 62
     87c:	80 e0       	ldi	r24, 0x00	; 0
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	18 c0       	rjmp	.+48     	; 0x8b2 <initialize+0x42>
     882:	ac 01       	movw	r20, r24
     884:	4f 5f       	subi	r20, 0xFF	; 255
     886:	5f 4f       	sbci	r21, 0xFF	; 255
     888:	9a 01       	movw	r18, r20
     88a:	22 95       	swap	r18
     88c:	32 95       	swap	r19
     88e:	30 7f       	andi	r19, 0xF0	; 240
     890:	32 27       	eor	r19, r18
     892:	20 7f       	andi	r18, 0xF0	; 240
     894:	32 27       	eor	r19, r18
     896:	23 5e       	subi	r18, 0xE3	; 227
     898:	3d 4f       	sbci	r19, 0xFD	; 253
     89a:	82 95       	swap	r24
     89c:	92 95       	swap	r25
     89e:	90 7f       	andi	r25, 0xF0	; 240
     8a0:	98 27       	eor	r25, r24
     8a2:	80 7f       	andi	r24, 0xF0	; 240
     8a4:	98 27       	eor	r25, r24
     8a6:	fc 01       	movw	r30, r24
     8a8:	e3 5e       	subi	r30, 0xE3	; 227
     8aa:	fd 4f       	sbci	r31, 0xFD	; 253
     8ac:	31 83       	std	Z+1, r19	; 0x01
     8ae:	20 83       	st	Z, r18
     8b0:	ca 01       	movw	r24, r20
     8b2:	8e 30       	cpi	r24, 0x0E	; 14
     8b4:	91 05       	cpc	r25, r1
     8b6:	2c f3       	brlt	.-54     	; 0x882 <initialize+0x12>
     8b8:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <messages+0xe1>
     8bc:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <messages+0xe0>
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	15 c0       	rjmp	.+42     	; 0x8f0 <initialize+0x80>
     8c6:	ac 01       	movw	r20, r24
     8c8:	4f 5f       	subi	r20, 0xFF	; 255
     8ca:	5f 4f       	sbci	r21, 0xFF	; 255
     8cc:	6d e1       	ldi	r22, 0x1D	; 29
     8ce:	64 9f       	mul	r22, r20
     8d0:	90 01       	movw	r18, r0
     8d2:	65 9f       	mul	r22, r21
     8d4:	30 0d       	add	r19, r0
     8d6:	11 24       	eor	r1, r1
     8d8:	28 59       	subi	r18, 0x98	; 152
     8da:	3e 4f       	sbci	r19, 0xFE	; 254
     8dc:	68 9f       	mul	r22, r24
     8de:	f0 01       	movw	r30, r0
     8e0:	69 9f       	mul	r22, r25
     8e2:	f0 0d       	add	r31, r0
     8e4:	11 24       	eor	r1, r1
     8e6:	e8 59       	subi	r30, 0x98	; 152
     8e8:	fe 4f       	sbci	r31, 0xFE	; 254
     8ea:	31 83       	std	Z+1, r19	; 0x01
     8ec:	20 83       	st	Z, r18
     8ee:	ca 01       	movw	r24, r20
     8f0:	83 30       	cpi	r24, 0x03	; 3
     8f2:	91 05       	cpc	r25, r1
     8f4:	44 f3       	brlt	.-48     	; 0x8c6 <initialize+0x56>
     8f6:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <threads+0x58>
     8fa:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <threads+0x57>
     8fe:	1a 82       	std	Y+2, r1	; 0x02
     900:	19 82       	std	Y+1, r1	; 0x01
     902:	32 c0       	rjmp	.+100    	; 0x968 <initialize+0xf8>
     904:	2d e1       	ldi	r18, 0x1D	; 29
     906:	49 81       	ldd	r20, Y+1	; 0x01
     908:	5a 81       	ldd	r21, Y+2	; 0x02
     90a:	24 9f       	mul	r18, r20
     90c:	c0 01       	movw	r24, r0
     90e:	25 9f       	mul	r18, r21
     910:	90 0d       	add	r25, r0
     912:	11 24       	eor	r1, r1
     914:	fc 01       	movw	r30, r24
     916:	e2 59       	subi	r30, 0x92	; 146
     918:	fe 4f       	sbci	r31, 0xFE	; 254
     91a:	fc 83       	std	Y+4, r31	; 0x04
     91c:	eb 83       	std	Y+3, r30	; 0x03
     91e:	cf 01       	movw	r24, r30
     920:	0e 94 c6 10 	call	0x218c	; 0x218c <setjmp>
     924:	20 e6       	ldi	r18, 0x60	; 96
     926:	49 81       	ldd	r20, Y+1	; 0x01
     928:	5a 81       	ldd	r21, Y+2	; 0x02
     92a:	24 9f       	mul	r18, r20
     92c:	c0 01       	movw	r24, r0
     92e:	25 9f       	mul	r18, r21
     930:	90 0d       	add	r25, r0
     932:	11 24       	eor	r1, r1
     934:	87 59       	subi	r24, 0x97	; 151
     936:	9c 4f       	sbci	r25, 0xFC	; 252
     938:	eb 81       	ldd	r30, Y+3	; 0x03
     93a:	fc 81       	ldd	r31, Y+4	; 0x04
     93c:	91 8b       	std	Z+17, r25	; 0x11
     93e:	80 8b       	std	Z+16, r24	; 0x10
     940:	93 8b       	std	Z+19, r25	; 0x13
     942:	82 8b       	std	Z+18, r24	; 0x12
     944:	84 e1       	ldi	r24, 0x14	; 20
     946:	90 e1       	ldi	r25, 0x10	; 16
     948:	96 8b       	std	Z+22, r25	; 0x16
     94a:	85 8b       	std	Z+21, r24	; 0x15
     94c:	8d e1       	ldi	r24, 0x1D	; 29
     94e:	84 9f       	mul	r24, r20
     950:	f0 01       	movw	r30, r0
     952:	85 9f       	mul	r24, r21
     954:	f0 0d       	add	r31, r0
     956:	11 24       	eor	r1, r1
     958:	e8 59       	subi	r30, 0x98	; 152
     95a:	fe 4f       	sbci	r31, 0xFE	; 254
     95c:	15 82       	std	Z+5, r1	; 0x05
     95e:	14 82       	std	Z+4, r1	; 0x04
     960:	4f 5f       	subi	r20, 0xFF	; 255
     962:	5f 4f       	sbci	r21, 0xFF	; 255
     964:	5a 83       	std	Y+2, r21	; 0x02
     966:	49 83       	std	Y+1, r20	; 0x01
     968:	29 81       	ldd	r18, Y+1	; 0x01
     96a:	3a 81       	ldd	r19, Y+2	; 0x02
     96c:	24 30       	cpi	r18, 0x04	; 4
     96e:	31 05       	cpc	r19, r1
     970:	4c f2       	brlt	.-110    	; 0x904 <initialize+0x94>
     972:	e0 e0       	ldi	r30, 0x00	; 0
     974:	f2 e0       	ldi	r31, 0x02	; 2
     976:	11 82       	std	Z+1, r1	; 0x01
     978:	10 82       	st	Z, r1
     97a:	15 82       	std	Z+5, r1	; 0x05
     97c:	14 82       	std	Z+4, r1	; 0x04
     97e:	13 82       	std	Z+3, r1	; 0x03
     980:	12 82       	std	Z+2, r1	; 0x02
     982:	e1 e6       	ldi	r30, 0x61	; 97
     984:	f0 e0       	ldi	r31, 0x00	; 0
     986:	80 e8       	ldi	r24, 0x80	; 128
     988:	80 83       	st	Z, r24
     98a:	10 82       	st	Z, r1
     98c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     990:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     994:	84 e0       	ldi	r24, 0x04	; 4
     996:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
     9a0:	0f 90       	pop	r0
     9a2:	0f 90       	pop	r0
     9a4:	0f 90       	pop	r0
     9a6:	0f 90       	pop	r0
     9a8:	df 91       	pop	r29
     9aa:	cf 91       	pop	r28
     9ac:	08 95       	ret

000009ae <dispatch>:
     9ae:	cf 93       	push	r28
     9b0:	df 93       	push	r29
     9b2:	00 d0       	rcall	.+0      	; 0x9b4 <dispatch+0x6>
     9b4:	cd b7       	in	r28, 0x3d	; 61
     9b6:	de b7       	in	r29, 0x3e	; 62
     9b8:	9a 83       	std	Y+2, r25	; 0x02
     9ba:	89 83       	std	Y+1, r24	; 0x01
     9bc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <current>
     9c0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <current+0x1>
     9c4:	06 96       	adiw	r24, 0x06	; 6
     9c6:	0e 94 c6 10 	call	0x218c	; 0x218c <setjmp>
     9ca:	89 2b       	or	r24, r25
     9cc:	59 f4       	brne	.+22     	; 0x9e4 <dispatch+0x36>
     9ce:	89 81       	ldd	r24, Y+1	; 0x01
     9d0:	9a 81       	ldd	r25, Y+2	; 0x02
     9d2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <current+0x1>
     9d6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <current>
     9da:	61 e0       	ldi	r22, 0x01	; 1
     9dc:	70 e0       	ldi	r23, 0x00	; 0
     9de:	06 96       	adiw	r24, 0x06	; 6
     9e0:	0e 94 e6 10 	call	0x21cc	; 0x21cc <longjmp>
     9e4:	0f 90       	pop	r0
     9e6:	0f 90       	pop	r0
     9e8:	df 91       	pop	r29
     9ea:	cf 91       	pop	r28
     9ec:	08 95       	ret

000009ee <enqueueByDeadline>:
     9ee:	0f 93       	push	r16
     9f0:	1f 93       	push	r17
     9f2:	cf 93       	push	r28
     9f4:	df 93       	push	r29
     9f6:	dc 01       	movw	r26, r24
     9f8:	cb 01       	movw	r24, r22
     9fa:	eb 01       	movw	r28, r22
     9fc:	e8 81       	ld	r30, Y
     9fe:	f9 81       	ldd	r31, Y+1	; 0x01
     a00:	c0 e0       	ldi	r28, 0x00	; 0
     a02:	d0 e0       	ldi	r29, 0x00	; 0
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <enqueueByDeadline+0x20>
     a06:	ef 01       	movw	r28, r30
     a08:	01 90       	ld	r0, Z+
     a0a:	f0 81       	ld	r31, Z
     a0c:	e0 2d       	mov	r30, r0
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	79 f0       	breq	.+30     	; 0xa30 <enqueueByDeadline+0x42>
     a12:	06 81       	ldd	r16, Z+6	; 0x06
     a14:	17 81       	ldd	r17, Z+7	; 0x07
     a16:	20 85       	ldd	r18, Z+8	; 0x08
     a18:	31 85       	ldd	r19, Z+9	; 0x09
     a1a:	16 96       	adiw	r26, 0x06	; 6
     a1c:	4d 91       	ld	r20, X+
     a1e:	5d 91       	ld	r21, X+
     a20:	6d 91       	ld	r22, X+
     a22:	7c 91       	ld	r23, X
     a24:	19 97       	sbiw	r26, 0x09	; 9
     a26:	40 17       	cp	r20, r16
     a28:	51 07       	cpc	r21, r17
     a2a:	62 07       	cpc	r22, r18
     a2c:	73 07       	cpc	r23, r19
     a2e:	5c f7       	brge	.-42     	; 0xa06 <enqueueByDeadline+0x18>
     a30:	11 96       	adiw	r26, 0x01	; 1
     a32:	fc 93       	st	X, r31
     a34:	ee 93       	st	-X, r30
     a36:	20 97       	sbiw	r28, 0x00	; 0
     a38:	21 f4       	brne	.+8      	; 0xa42 <enqueueByDeadline+0x54>
     a3a:	fc 01       	movw	r30, r24
     a3c:	b1 83       	std	Z+1, r27	; 0x01
     a3e:	a0 83       	st	Z, r26
     a40:	02 c0       	rjmp	.+4      	; 0xa46 <enqueueByDeadline+0x58>
     a42:	b9 83       	std	Y+1, r27	; 0x01
     a44:	a8 83       	st	Y, r26
     a46:	df 91       	pop	r29
     a48:	cf 91       	pop	r28
     a4a:	1f 91       	pop	r17
     a4c:	0f 91       	pop	r16
     a4e:	08 95       	ret

00000a50 <enqueueByBaseline>:
     a50:	0f 93       	push	r16
     a52:	1f 93       	push	r17
     a54:	cf 93       	push	r28
     a56:	df 93       	push	r29
     a58:	dc 01       	movw	r26, r24
     a5a:	cb 01       	movw	r24, r22
     a5c:	eb 01       	movw	r28, r22
     a5e:	e8 81       	ld	r30, Y
     a60:	f9 81       	ldd	r31, Y+1	; 0x01
     a62:	c0 e0       	ldi	r28, 0x00	; 0
     a64:	d0 e0       	ldi	r29, 0x00	; 0
     a66:	04 c0       	rjmp	.+8      	; 0xa70 <enqueueByBaseline+0x20>
     a68:	ef 01       	movw	r28, r30
     a6a:	01 90       	ld	r0, Z+
     a6c:	f0 81       	ld	r31, Z
     a6e:	e0 2d       	mov	r30, r0
     a70:	30 97       	sbiw	r30, 0x00	; 0
     a72:	79 f0       	breq	.+30     	; 0xa92 <enqueueByBaseline+0x42>
     a74:	02 81       	ldd	r16, Z+2	; 0x02
     a76:	13 81       	ldd	r17, Z+3	; 0x03
     a78:	24 81       	ldd	r18, Z+4	; 0x04
     a7a:	35 81       	ldd	r19, Z+5	; 0x05
     a7c:	12 96       	adiw	r26, 0x02	; 2
     a7e:	4d 91       	ld	r20, X+
     a80:	5d 91       	ld	r21, X+
     a82:	6d 91       	ld	r22, X+
     a84:	7c 91       	ld	r23, X
     a86:	15 97       	sbiw	r26, 0x05	; 5
     a88:	40 17       	cp	r20, r16
     a8a:	51 07       	cpc	r21, r17
     a8c:	62 07       	cpc	r22, r18
     a8e:	73 07       	cpc	r23, r19
     a90:	5c f7       	brge	.-42     	; 0xa68 <enqueueByBaseline+0x18>
     a92:	11 96       	adiw	r26, 0x01	; 1
     a94:	fc 93       	st	X, r31
     a96:	ee 93       	st	-X, r30
     a98:	20 97       	sbiw	r28, 0x00	; 0
     a9a:	21 f4       	brne	.+8      	; 0xaa4 <enqueueByBaseline+0x54>
     a9c:	fc 01       	movw	r30, r24
     a9e:	b1 83       	std	Z+1, r27	; 0x01
     aa0:	a0 83       	st	Z, r26
     aa2:	02 c0       	rjmp	.+4      	; 0xaa8 <enqueueByBaseline+0x58>
     aa4:	b9 83       	std	Y+1, r27	; 0x01
     aa6:	a8 83       	st	Y, r26
     aa8:	df 91       	pop	r29
     aaa:	cf 91       	pop	r28
     aac:	1f 91       	pop	r17
     aae:	0f 91       	pop	r16
     ab0:	08 95       	ret

00000ab2 <dequeue>:
     ab2:	dc 01       	movw	r26, r24
     ab4:	ed 91       	ld	r30, X+
     ab6:	fc 91       	ld	r31, X
     ab8:	11 97       	sbiw	r26, 0x01	; 1
     aba:	30 97       	sbiw	r30, 0x00	; 0
     abc:	59 f4       	brne	.+22     	; 0xad4 <dequeue+0x22>
     abe:	8f ef       	ldi	r24, 0xFF	; 255
     ac0:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     ac4:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
     ac8:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	83 bf       	out	0x33, r24	; 51
     ad0:	88 95       	sleep
     ad2:	fc cf       	rjmp	.-8      	; 0xacc <dequeue+0x1a>
     ad4:	20 81       	ld	r18, Z
     ad6:	31 81       	ldd	r19, Z+1	; 0x01
     ad8:	2d 93       	st	X+, r18
     ada:	3c 93       	st	X, r19
     adc:	cf 01       	movw	r24, r30
     ade:	08 95       	ret

00000ae0 <insert>:
     ae0:	fb 01       	movw	r30, r22
     ae2:	20 81       	ld	r18, Z
     ae4:	31 81       	ldd	r19, Z+1	; 0x01
     ae6:	fc 01       	movw	r30, r24
     ae8:	31 83       	std	Z+1, r19	; 0x01
     aea:	20 83       	st	Z, r18
     aec:	fb 01       	movw	r30, r22
     aee:	91 83       	std	Z+1, r25	; 0x01
     af0:	80 83       	st	Z, r24
     af2:	08 95       	ret

00000af4 <push>:
     af4:	fb 01       	movw	r30, r22
     af6:	20 81       	ld	r18, Z
     af8:	31 81       	ldd	r19, Z+1	; 0x01
     afa:	fc 01       	movw	r30, r24
     afc:	31 83       	std	Z+1, r19	; 0x01
     afe:	20 83       	st	Z, r18
     b00:	fb 01       	movw	r30, r22
     b02:	91 83       	std	Z+1, r25	; 0x01
     b04:	80 83       	st	Z, r24
     b06:	08 95       	ret

00000b08 <pop>:
     b08:	dc 01       	movw	r26, r24
     b0a:	ed 91       	ld	r30, X+
     b0c:	fc 91       	ld	r31, X
     b0e:	11 97       	sbiw	r26, 0x01	; 1
     b10:	20 81       	ld	r18, Z
     b12:	31 81       	ldd	r19, Z+1	; 0x01
     b14:	2d 93       	st	X+, r18
     b16:	3c 93       	st	X, r19
     b18:	cf 01       	movw	r24, r30
     b1a:	08 95       	ret

00000b1c <schedule>:
     b1c:	cf 93       	push	r28
     b1e:	df 93       	push	r29
     b20:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <activeStack>
     b24:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <activeStack+0x1>
     b28:	c2 81       	ldd	r28, Z+2	; 0x02
     b2a:	d3 81       	ldd	r29, Z+3	; 0x03
     b2c:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <msgQ>
     b30:	f0 91 41 01 	lds	r31, 0x0141	; 0x800141 <msgQ+0x1>
     b34:	30 97       	sbiw	r30, 0x00	; 0
     b36:	19 f1       	breq	.+70     	; 0xb7e <schedule+0x62>
     b38:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <threadPool>
     b3c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <threadPool+0x1>
     b40:	89 2b       	or	r24, r25
     b42:	e9 f0       	breq	.+58     	; 0xb7e <schedule+0x62>
     b44:	20 97       	sbiw	r28, 0x00	; 0
     b46:	69 f0       	breq	.+26     	; 0xb62 <schedule+0x46>
     b48:	86 81       	ldd	r24, Z+6	; 0x06
     b4a:	97 81       	ldd	r25, Z+7	; 0x07
     b4c:	a0 85       	ldd	r26, Z+8	; 0x08
     b4e:	b1 85       	ldd	r27, Z+9	; 0x09
     b50:	4e 81       	ldd	r20, Y+6	; 0x06
     b52:	5f 81       	ldd	r21, Y+7	; 0x07
     b54:	68 85       	ldd	r22, Y+8	; 0x08
     b56:	79 85       	ldd	r23, Y+9	; 0x09
     b58:	84 1b       	sub	r24, r20
     b5a:	95 0b       	sbc	r25, r21
     b5c:	a6 0b       	sbc	r26, r22
     b5e:	b7 0b       	sbc	r27, r23
     b60:	72 f4       	brpl	.+28     	; 0xb7e <schedule+0x62>
     b62:	86 e0       	ldi	r24, 0x06	; 6
     b64:	91 e0       	ldi	r25, 0x01	; 1
     b66:	0e 94 84 05 	call	0xb08	; 0xb08 <pop>
     b6a:	64 e0       	ldi	r22, 0x04	; 4
     b6c:	71 e0       	ldi	r23, 0x01	; 1
     b6e:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <push>
     b72:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <activeStack>
     b76:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <activeStack+0x1>
     b7a:	0e 94 d7 04 	call	0x9ae	; 0x9ae <dispatch>
     b7e:	df 91       	pop	r29
     b80:	cf 91       	pop	r28
     b82:	08 95       	ret

00000b84 <__vector_1>:
     b84:	1f 92       	push	r1
     b86:	0f 92       	push	r0
     b88:	0f b6       	in	r0, 0x3f	; 63
     b8a:	0f 92       	push	r0
     b8c:	11 24       	eor	r1, r1
     b8e:	0f 93       	push	r16
     b90:	1f 93       	push	r17
     b92:	2f 93       	push	r18
     b94:	3f 93       	push	r19
     b96:	4f 93       	push	r20
     b98:	5f 93       	push	r21
     b9a:	6f 93       	push	r22
     b9c:	7f 93       	push	r23
     b9e:	8f 93       	push	r24
     ba0:	9f 93       	push	r25
     ba2:	af 93       	push	r26
     ba4:	bf 93       	push	r27
     ba6:	ef 93       	push	r30
     ba8:	ff 93       	push	r31
     baa:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <overflows>
     bae:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <overflows+0x1>
     bb2:	ac 01       	movw	r20, r24
     bb4:	09 2e       	mov	r0, r25
     bb6:	00 0c       	add	r0, r0
     bb8:	66 0b       	sbc	r22, r22
     bba:	77 0b       	sbc	r23, r23
     bbc:	9a 01       	movw	r18, r20
     bbe:	11 27       	eor	r17, r17
     bc0:	00 27       	eor	r16, r16
     bc2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     bc6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     bca:	60 e0       	ldi	r22, 0x00	; 0
     bcc:	70 e0       	ldi	r23, 0x00	; 0
     bce:	40 2b       	or	r20, r16
     bd0:	51 2b       	or	r21, r17
     bd2:	62 2b       	or	r22, r18
     bd4:	73 2b       	or	r23, r19
     bd6:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <timestamp>
     bda:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <timestamp+0x1>
     bde:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <timestamp+0x2>
     be2:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <timestamp+0x3>
     be6:	b0 9b       	sbis	0x16, 0	; 22
     be8:	1a c0       	rjmp	.+52     	; 0xc1e <__vector_1+0x9a>
     bea:	01 96       	adiw	r24, 0x01	; 1
     bec:	09 2e       	mov	r0, r25
     bee:	00 0c       	add	r0, r0
     bf0:	aa 0b       	sbc	r26, r26
     bf2:	bb 0b       	sbc	r27, r27
     bf4:	bc 01       	movw	r22, r24
     bf6:	55 27       	eor	r21, r21
     bf8:	44 27       	eor	r20, r20
     bfa:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     bfe:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c02:	a0 e0       	ldi	r26, 0x00	; 0
     c04:	b0 e0       	ldi	r27, 0x00	; 0
     c06:	84 2b       	or	r24, r20
     c08:	95 2b       	or	r25, r21
     c0a:	a6 2b       	or	r26, r22
     c0c:	b7 2b       	or	r27, r23
     c0e:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
     c12:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
     c16:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
     c1a:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
     c1e:	e0 91 dc 01 	lds	r30, 0x01DC	; 0x8001dc <mtable>
     c22:	f0 91 dd 01 	lds	r31, 0x01DD	; 0x8001dd <mtable+0x1>
     c26:	30 97       	sbiw	r30, 0x00	; 0
     c28:	39 f0       	breq	.+14     	; 0xc38 <__vector_1+0xb4>
     c2a:	60 e0       	ldi	r22, 0x00	; 0
     c2c:	70 e0       	ldi	r23, 0x00	; 0
     c2e:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <otable>
     c32:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <otable+0x1>
     c36:	09 95       	icall
     c38:	0e 94 8e 05 	call	0xb1c	; 0xb1c <schedule>
     c3c:	ff 91       	pop	r31
     c3e:	ef 91       	pop	r30
     c40:	bf 91       	pop	r27
     c42:	af 91       	pop	r26
     c44:	9f 91       	pop	r25
     c46:	8f 91       	pop	r24
     c48:	7f 91       	pop	r23
     c4a:	6f 91       	pop	r22
     c4c:	5f 91       	pop	r21
     c4e:	4f 91       	pop	r20
     c50:	3f 91       	pop	r19
     c52:	2f 91       	pop	r18
     c54:	1f 91       	pop	r17
     c56:	0f 91       	pop	r16
     c58:	0f 90       	pop	r0
     c5a:	0f be       	out	0x3f, r0	; 63
     c5c:	0f 90       	pop	r0
     c5e:	1f 90       	pop	r1
     c60:	18 95       	reti

00000c62 <__vector_2>:
     c62:	1f 92       	push	r1
     c64:	0f 92       	push	r0
     c66:	0f b6       	in	r0, 0x3f	; 63
     c68:	0f 92       	push	r0
     c6a:	11 24       	eor	r1, r1
     c6c:	0f 93       	push	r16
     c6e:	1f 93       	push	r17
     c70:	2f 93       	push	r18
     c72:	3f 93       	push	r19
     c74:	4f 93       	push	r20
     c76:	5f 93       	push	r21
     c78:	6f 93       	push	r22
     c7a:	7f 93       	push	r23
     c7c:	8f 93       	push	r24
     c7e:	9f 93       	push	r25
     c80:	af 93       	push	r26
     c82:	bf 93       	push	r27
     c84:	ef 93       	push	r30
     c86:	ff 93       	push	r31
     c88:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <overflows>
     c8c:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <overflows+0x1>
     c90:	ac 01       	movw	r20, r24
     c92:	09 2e       	mov	r0, r25
     c94:	00 0c       	add	r0, r0
     c96:	66 0b       	sbc	r22, r22
     c98:	77 0b       	sbc	r23, r23
     c9a:	9a 01       	movw	r18, r20
     c9c:	11 27       	eor	r17, r17
     c9e:	00 27       	eor	r16, r16
     ca0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ca4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ca8:	60 e0       	ldi	r22, 0x00	; 0
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	40 2b       	or	r20, r16
     cae:	51 2b       	or	r21, r17
     cb0:	62 2b       	or	r22, r18
     cb2:	73 2b       	or	r23, r19
     cb4:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <timestamp>
     cb8:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <timestamp+0x1>
     cbc:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <timestamp+0x2>
     cc0:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <timestamp+0x3>
     cc4:	b0 9b       	sbis	0x16, 0	; 22
     cc6:	1a c0       	rjmp	.+52     	; 0xcfc <__vector_2+0x9a>
     cc8:	01 96       	adiw	r24, 0x01	; 1
     cca:	09 2e       	mov	r0, r25
     ccc:	00 0c       	add	r0, r0
     cce:	aa 0b       	sbc	r26, r26
     cd0:	bb 0b       	sbc	r27, r27
     cd2:	bc 01       	movw	r22, r24
     cd4:	55 27       	eor	r21, r21
     cd6:	44 27       	eor	r20, r20
     cd8:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     cdc:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ce0:	a0 e0       	ldi	r26, 0x00	; 0
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	84 2b       	or	r24, r20
     ce6:	95 2b       	or	r25, r21
     ce8:	a6 2b       	or	r26, r22
     cea:	b7 2b       	or	r27, r23
     cec:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
     cf0:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
     cf4:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
     cf8:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
     cfc:	e0 91 de 01 	lds	r30, 0x01DE	; 0x8001de <mtable+0x2>
     d00:	f0 91 df 01 	lds	r31, 0x01DF	; 0x8001df <mtable+0x3>
     d04:	30 97       	sbiw	r30, 0x00	; 0
     d06:	39 f0       	breq	.+14     	; 0xd16 <__vector_2+0xb4>
     d08:	61 e0       	ldi	r22, 0x01	; 1
     d0a:	70 e0       	ldi	r23, 0x00	; 0
     d0c:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <otable+0x2>
     d10:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <otable+0x3>
     d14:	09 95       	icall
     d16:	0e 94 8e 05 	call	0xb1c	; 0xb1c <schedule>
     d1a:	ff 91       	pop	r31
     d1c:	ef 91       	pop	r30
     d1e:	bf 91       	pop	r27
     d20:	af 91       	pop	r26
     d22:	9f 91       	pop	r25
     d24:	8f 91       	pop	r24
     d26:	7f 91       	pop	r23
     d28:	6f 91       	pop	r22
     d2a:	5f 91       	pop	r21
     d2c:	4f 91       	pop	r20
     d2e:	3f 91       	pop	r19
     d30:	2f 91       	pop	r18
     d32:	1f 91       	pop	r17
     d34:	0f 91       	pop	r16
     d36:	0f 90       	pop	r0
     d38:	0f be       	out	0x3f, r0	; 63
     d3a:	0f 90       	pop	r0
     d3c:	1f 90       	pop	r1
     d3e:	18 95       	reti

00000d40 <__vector_3>:
     d40:	1f 92       	push	r1
     d42:	0f 92       	push	r0
     d44:	0f b6       	in	r0, 0x3f	; 63
     d46:	0f 92       	push	r0
     d48:	11 24       	eor	r1, r1
     d4a:	0f 93       	push	r16
     d4c:	1f 93       	push	r17
     d4e:	2f 93       	push	r18
     d50:	3f 93       	push	r19
     d52:	4f 93       	push	r20
     d54:	5f 93       	push	r21
     d56:	6f 93       	push	r22
     d58:	7f 93       	push	r23
     d5a:	8f 93       	push	r24
     d5c:	9f 93       	push	r25
     d5e:	af 93       	push	r26
     d60:	bf 93       	push	r27
     d62:	ef 93       	push	r30
     d64:	ff 93       	push	r31
     d66:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <overflows>
     d6a:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <overflows+0x1>
     d6e:	ac 01       	movw	r20, r24
     d70:	09 2e       	mov	r0, r25
     d72:	00 0c       	add	r0, r0
     d74:	66 0b       	sbc	r22, r22
     d76:	77 0b       	sbc	r23, r23
     d78:	9a 01       	movw	r18, r20
     d7a:	11 27       	eor	r17, r17
     d7c:	00 27       	eor	r16, r16
     d7e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d82:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d86:	60 e0       	ldi	r22, 0x00	; 0
     d88:	70 e0       	ldi	r23, 0x00	; 0
     d8a:	40 2b       	or	r20, r16
     d8c:	51 2b       	or	r21, r17
     d8e:	62 2b       	or	r22, r18
     d90:	73 2b       	or	r23, r19
     d92:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <timestamp>
     d96:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <timestamp+0x1>
     d9a:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <timestamp+0x2>
     d9e:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <timestamp+0x3>
     da2:	b0 9b       	sbis	0x16, 0	; 22
     da4:	1a c0       	rjmp	.+52     	; 0xdda <__vector_3+0x9a>
     da6:	01 96       	adiw	r24, 0x01	; 1
     da8:	09 2e       	mov	r0, r25
     daa:	00 0c       	add	r0, r0
     dac:	aa 0b       	sbc	r26, r26
     dae:	bb 0b       	sbc	r27, r27
     db0:	bc 01       	movw	r22, r24
     db2:	55 27       	eor	r21, r21
     db4:	44 27       	eor	r20, r20
     db6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     dba:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     dbe:	a0 e0       	ldi	r26, 0x00	; 0
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	84 2b       	or	r24, r20
     dc4:	95 2b       	or	r25, r21
     dc6:	a6 2b       	or	r26, r22
     dc8:	b7 2b       	or	r27, r23
     dca:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
     dce:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
     dd2:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
     dd6:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
     dda:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <mtable+0x4>
     dde:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <mtable+0x5>
     de2:	30 97       	sbiw	r30, 0x00	; 0
     de4:	39 f0       	breq	.+14     	; 0xdf4 <__vector_3+0xb4>
     de6:	62 e0       	ldi	r22, 0x02	; 2
     de8:	70 e0       	ldi	r23, 0x00	; 0
     dea:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <otable+0x4>
     dee:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <otable+0x5>
     df2:	09 95       	icall
     df4:	0e 94 8e 05 	call	0xb1c	; 0xb1c <schedule>
     df8:	ff 91       	pop	r31
     dfa:	ef 91       	pop	r30
     dfc:	bf 91       	pop	r27
     dfe:	af 91       	pop	r26
     e00:	9f 91       	pop	r25
     e02:	8f 91       	pop	r24
     e04:	7f 91       	pop	r23
     e06:	6f 91       	pop	r22
     e08:	5f 91       	pop	r21
     e0a:	4f 91       	pop	r20
     e0c:	3f 91       	pop	r19
     e0e:	2f 91       	pop	r18
     e10:	1f 91       	pop	r17
     e12:	0f 91       	pop	r16
     e14:	0f 90       	pop	r0
     e16:	0f be       	out	0x3f, r0	; 63
     e18:	0f 90       	pop	r0
     e1a:	1f 90       	pop	r1
     e1c:	18 95       	reti

00000e1e <__vector_4>:
     e1e:	1f 92       	push	r1
     e20:	0f 92       	push	r0
     e22:	0f b6       	in	r0, 0x3f	; 63
     e24:	0f 92       	push	r0
     e26:	11 24       	eor	r1, r1
     e28:	0f 93       	push	r16
     e2a:	1f 93       	push	r17
     e2c:	2f 93       	push	r18
     e2e:	3f 93       	push	r19
     e30:	4f 93       	push	r20
     e32:	5f 93       	push	r21
     e34:	6f 93       	push	r22
     e36:	7f 93       	push	r23
     e38:	8f 93       	push	r24
     e3a:	9f 93       	push	r25
     e3c:	af 93       	push	r26
     e3e:	bf 93       	push	r27
     e40:	ef 93       	push	r30
     e42:	ff 93       	push	r31
     e44:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <overflows>
     e48:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <overflows+0x1>
     e4c:	ac 01       	movw	r20, r24
     e4e:	09 2e       	mov	r0, r25
     e50:	00 0c       	add	r0, r0
     e52:	66 0b       	sbc	r22, r22
     e54:	77 0b       	sbc	r23, r23
     e56:	9a 01       	movw	r18, r20
     e58:	11 27       	eor	r17, r17
     e5a:	00 27       	eor	r16, r16
     e5c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e60:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e64:	60 e0       	ldi	r22, 0x00	; 0
     e66:	70 e0       	ldi	r23, 0x00	; 0
     e68:	40 2b       	or	r20, r16
     e6a:	51 2b       	or	r21, r17
     e6c:	62 2b       	or	r22, r18
     e6e:	73 2b       	or	r23, r19
     e70:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <timestamp>
     e74:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <timestamp+0x1>
     e78:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <timestamp+0x2>
     e7c:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <timestamp+0x3>
     e80:	b0 9b       	sbis	0x16, 0	; 22
     e82:	1a c0       	rjmp	.+52     	; 0xeb8 <__vector_4+0x9a>
     e84:	01 96       	adiw	r24, 0x01	; 1
     e86:	09 2e       	mov	r0, r25
     e88:	00 0c       	add	r0, r0
     e8a:	aa 0b       	sbc	r26, r26
     e8c:	bb 0b       	sbc	r27, r27
     e8e:	bc 01       	movw	r22, r24
     e90:	55 27       	eor	r21, r21
     e92:	44 27       	eor	r20, r20
     e94:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e98:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e9c:	a0 e0       	ldi	r26, 0x00	; 0
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	84 2b       	or	r24, r20
     ea2:	95 2b       	or	r25, r21
     ea4:	a6 2b       	or	r26, r22
     ea6:	b7 2b       	or	r27, r23
     ea8:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
     eac:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
     eb0:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
     eb4:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
     eb8:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <mtable+0x6>
     ebc:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <mtable+0x7>
     ec0:	30 97       	sbiw	r30, 0x00	; 0
     ec2:	39 f0       	breq	.+14     	; 0xed2 <__vector_4+0xb4>
     ec4:	63 e0       	ldi	r22, 0x03	; 3
     ec6:	70 e0       	ldi	r23, 0x00	; 0
     ec8:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <otable+0x6>
     ecc:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <otable+0x7>
     ed0:	09 95       	icall
     ed2:	0e 94 8e 05 	call	0xb1c	; 0xb1c <schedule>
     ed6:	ff 91       	pop	r31
     ed8:	ef 91       	pop	r30
     eda:	bf 91       	pop	r27
     edc:	af 91       	pop	r26
     ede:	9f 91       	pop	r25
     ee0:	8f 91       	pop	r24
     ee2:	7f 91       	pop	r23
     ee4:	6f 91       	pop	r22
     ee6:	5f 91       	pop	r21
     ee8:	4f 91       	pop	r20
     eea:	3f 91       	pop	r19
     eec:	2f 91       	pop	r18
     eee:	1f 91       	pop	r17
     ef0:	0f 91       	pop	r16
     ef2:	0f 90       	pop	r0
     ef4:	0f be       	out	0x3f, r0	; 63
     ef6:	0f 90       	pop	r0
     ef8:	1f 90       	pop	r1
     efa:	18 95       	reti

00000efc <__vector_5>:
     efc:	1f 92       	push	r1
     efe:	0f 92       	push	r0
     f00:	0f b6       	in	r0, 0x3f	; 63
     f02:	0f 92       	push	r0
     f04:	11 24       	eor	r1, r1
     f06:	0f 93       	push	r16
     f08:	1f 93       	push	r17
     f0a:	2f 93       	push	r18
     f0c:	3f 93       	push	r19
     f0e:	4f 93       	push	r20
     f10:	5f 93       	push	r21
     f12:	6f 93       	push	r22
     f14:	7f 93       	push	r23
     f16:	8f 93       	push	r24
     f18:	9f 93       	push	r25
     f1a:	af 93       	push	r26
     f1c:	bf 93       	push	r27
     f1e:	ef 93       	push	r30
     f20:	ff 93       	push	r31
     f22:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <overflows>
     f26:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <overflows+0x1>
     f2a:	ac 01       	movw	r20, r24
     f2c:	09 2e       	mov	r0, r25
     f2e:	00 0c       	add	r0, r0
     f30:	66 0b       	sbc	r22, r22
     f32:	77 0b       	sbc	r23, r23
     f34:	9a 01       	movw	r18, r20
     f36:	11 27       	eor	r17, r17
     f38:	00 27       	eor	r16, r16
     f3a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f3e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f42:	60 e0       	ldi	r22, 0x00	; 0
     f44:	70 e0       	ldi	r23, 0x00	; 0
     f46:	40 2b       	or	r20, r16
     f48:	51 2b       	or	r21, r17
     f4a:	62 2b       	or	r22, r18
     f4c:	73 2b       	or	r23, r19
     f4e:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <timestamp>
     f52:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <timestamp+0x1>
     f56:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <timestamp+0x2>
     f5a:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <timestamp+0x3>
     f5e:	b0 9b       	sbis	0x16, 0	; 22
     f60:	1a c0       	rjmp	.+52     	; 0xf96 <__vector_5+0x9a>
     f62:	01 96       	adiw	r24, 0x01	; 1
     f64:	09 2e       	mov	r0, r25
     f66:	00 0c       	add	r0, r0
     f68:	aa 0b       	sbc	r26, r26
     f6a:	bb 0b       	sbc	r27, r27
     f6c:	bc 01       	movw	r22, r24
     f6e:	55 27       	eor	r21, r21
     f70:	44 27       	eor	r20, r20
     f72:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f76:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f7a:	a0 e0       	ldi	r26, 0x00	; 0
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	84 2b       	or	r24, r20
     f80:	95 2b       	or	r25, r21
     f82:	a6 2b       	or	r26, r22
     f84:	b7 2b       	or	r27, r23
     f86:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
     f8a:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
     f8e:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
     f92:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
     f96:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <mtable+0x8>
     f9a:	f0 91 e5 01 	lds	r31, 0x01E5	; 0x8001e5 <mtable+0x9>
     f9e:	30 97       	sbiw	r30, 0x00	; 0
     fa0:	39 f0       	breq	.+14     	; 0xfb0 <__vector_5+0xb4>
     fa2:	64 e0       	ldi	r22, 0x04	; 4
     fa4:	70 e0       	ldi	r23, 0x00	; 0
     fa6:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <otable+0x8>
     faa:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <otable+0x9>
     fae:	09 95       	icall
     fb0:	0e 94 8e 05 	call	0xb1c	; 0xb1c <schedule>
     fb4:	ff 91       	pop	r31
     fb6:	ef 91       	pop	r30
     fb8:	bf 91       	pop	r27
     fba:	af 91       	pop	r26
     fbc:	9f 91       	pop	r25
     fbe:	8f 91       	pop	r24
     fc0:	7f 91       	pop	r23
     fc2:	6f 91       	pop	r22
     fc4:	5f 91       	pop	r21
     fc6:	4f 91       	pop	r20
     fc8:	3f 91       	pop	r19
     fca:	2f 91       	pop	r18
     fcc:	1f 91       	pop	r17
     fce:	0f 91       	pop	r16
     fd0:	0f 90       	pop	r0
     fd2:	0f be       	out	0x3f, r0	; 63
     fd4:	0f 90       	pop	r0
     fd6:	1f 90       	pop	r1
     fd8:	18 95       	reti

00000fda <__vector_10>:
     fda:	1f 92       	push	r1
     fdc:	0f 92       	push	r0
     fde:	0f b6       	in	r0, 0x3f	; 63
     fe0:	0f 92       	push	r0
     fe2:	11 24       	eor	r1, r1
     fe4:	0f 93       	push	r16
     fe6:	1f 93       	push	r17
     fe8:	2f 93       	push	r18
     fea:	3f 93       	push	r19
     fec:	4f 93       	push	r20
     fee:	5f 93       	push	r21
     ff0:	6f 93       	push	r22
     ff2:	7f 93       	push	r23
     ff4:	8f 93       	push	r24
     ff6:	9f 93       	push	r25
     ff8:	af 93       	push	r26
     ffa:	bf 93       	push	r27
     ffc:	ef 93       	push	r30
     ffe:	ff 93       	push	r31
    1000:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <overflows>
    1004:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <overflows+0x1>
    1008:	ac 01       	movw	r20, r24
    100a:	09 2e       	mov	r0, r25
    100c:	00 0c       	add	r0, r0
    100e:	66 0b       	sbc	r22, r22
    1010:	77 0b       	sbc	r23, r23
    1012:	9a 01       	movw	r18, r20
    1014:	11 27       	eor	r17, r17
    1016:	00 27       	eor	r16, r16
    1018:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    101c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1020:	60 e0       	ldi	r22, 0x00	; 0
    1022:	70 e0       	ldi	r23, 0x00	; 0
    1024:	40 2b       	or	r20, r16
    1026:	51 2b       	or	r21, r17
    1028:	62 2b       	or	r22, r18
    102a:	73 2b       	or	r23, r19
    102c:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <timestamp>
    1030:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <timestamp+0x1>
    1034:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <timestamp+0x2>
    1038:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <timestamp+0x3>
    103c:	b0 9b       	sbis	0x16, 0	; 22
    103e:	1a c0       	rjmp	.+52     	; 0x1074 <__vector_10+0x9a>
    1040:	01 96       	adiw	r24, 0x01	; 1
    1042:	09 2e       	mov	r0, r25
    1044:	00 0c       	add	r0, r0
    1046:	aa 0b       	sbc	r26, r26
    1048:	bb 0b       	sbc	r27, r27
    104a:	bc 01       	movw	r22, r24
    104c:	55 27       	eor	r21, r21
    104e:	44 27       	eor	r20, r20
    1050:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1054:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1058:	a0 e0       	ldi	r26, 0x00	; 0
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	84 2b       	or	r24, r20
    105e:	95 2b       	or	r25, r21
    1060:	a6 2b       	or	r26, r22
    1062:	b7 2b       	or	r27, r23
    1064:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    1068:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    106c:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    1070:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    1074:	e0 91 e6 01 	lds	r30, 0x01E6	; 0x8001e6 <mtable+0xa>
    1078:	f0 91 e7 01 	lds	r31, 0x01E7	; 0x8001e7 <mtable+0xb>
    107c:	30 97       	sbiw	r30, 0x00	; 0
    107e:	39 f0       	breq	.+14     	; 0x108e <__vector_10+0xb4>
    1080:	65 e0       	ldi	r22, 0x05	; 5
    1082:	70 e0       	ldi	r23, 0x00	; 0
    1084:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <otable+0xa>
    1088:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <otable+0xb>
    108c:	09 95       	icall
    108e:	0e 94 8e 05 	call	0xb1c	; 0xb1c <schedule>
    1092:	ff 91       	pop	r31
    1094:	ef 91       	pop	r30
    1096:	bf 91       	pop	r27
    1098:	af 91       	pop	r26
    109a:	9f 91       	pop	r25
    109c:	8f 91       	pop	r24
    109e:	7f 91       	pop	r23
    10a0:	6f 91       	pop	r22
    10a2:	5f 91       	pop	r21
    10a4:	4f 91       	pop	r20
    10a6:	3f 91       	pop	r19
    10a8:	2f 91       	pop	r18
    10aa:	1f 91       	pop	r17
    10ac:	0f 91       	pop	r16
    10ae:	0f 90       	pop	r0
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	0f 90       	pop	r0
    10b4:	1f 90       	pop	r1
    10b6:	18 95       	reti

000010b8 <__vector_11>:
    10b8:	1f 92       	push	r1
    10ba:	0f 92       	push	r0
    10bc:	0f b6       	in	r0, 0x3f	; 63
    10be:	0f 92       	push	r0
    10c0:	11 24       	eor	r1, r1
    10c2:	0f 93       	push	r16
    10c4:	1f 93       	push	r17
    10c6:	2f 93       	push	r18
    10c8:	3f 93       	push	r19
    10ca:	4f 93       	push	r20
    10cc:	5f 93       	push	r21
    10ce:	6f 93       	push	r22
    10d0:	7f 93       	push	r23
    10d2:	8f 93       	push	r24
    10d4:	9f 93       	push	r25
    10d6:	af 93       	push	r26
    10d8:	bf 93       	push	r27
    10da:	ef 93       	push	r30
    10dc:	ff 93       	push	r31
    10de:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <overflows>
    10e2:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <overflows+0x1>
    10e6:	ac 01       	movw	r20, r24
    10e8:	09 2e       	mov	r0, r25
    10ea:	00 0c       	add	r0, r0
    10ec:	66 0b       	sbc	r22, r22
    10ee:	77 0b       	sbc	r23, r23
    10f0:	9a 01       	movw	r18, r20
    10f2:	11 27       	eor	r17, r17
    10f4:	00 27       	eor	r16, r16
    10f6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    10fa:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    10fe:	60 e0       	ldi	r22, 0x00	; 0
    1100:	70 e0       	ldi	r23, 0x00	; 0
    1102:	40 2b       	or	r20, r16
    1104:	51 2b       	or	r21, r17
    1106:	62 2b       	or	r22, r18
    1108:	73 2b       	or	r23, r19
    110a:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <timestamp>
    110e:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <timestamp+0x1>
    1112:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <timestamp+0x2>
    1116:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <timestamp+0x3>
    111a:	b0 9b       	sbis	0x16, 0	; 22
    111c:	1a c0       	rjmp	.+52     	; 0x1152 <__vector_11+0x9a>
    111e:	01 96       	adiw	r24, 0x01	; 1
    1120:	09 2e       	mov	r0, r25
    1122:	00 0c       	add	r0, r0
    1124:	aa 0b       	sbc	r26, r26
    1126:	bb 0b       	sbc	r27, r27
    1128:	bc 01       	movw	r22, r24
    112a:	55 27       	eor	r21, r21
    112c:	44 27       	eor	r20, r20
    112e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1132:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1136:	a0 e0       	ldi	r26, 0x00	; 0
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	84 2b       	or	r24, r20
    113c:	95 2b       	or	r25, r21
    113e:	a6 2b       	or	r26, r22
    1140:	b7 2b       	or	r27, r23
    1142:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    1146:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    114a:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    114e:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    1152:	e0 91 e8 01 	lds	r30, 0x01E8	; 0x8001e8 <mtable+0xc>
    1156:	f0 91 e9 01 	lds	r31, 0x01E9	; 0x8001e9 <mtable+0xd>
    115a:	30 97       	sbiw	r30, 0x00	; 0
    115c:	39 f0       	breq	.+14     	; 0x116c <__vector_11+0xb4>
    115e:	66 e0       	ldi	r22, 0x06	; 6
    1160:	70 e0       	ldi	r23, 0x00	; 0
    1162:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <otable+0xc>
    1166:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <otable+0xd>
    116a:	09 95       	icall
    116c:	0e 94 8e 05 	call	0xb1c	; 0xb1c <schedule>
    1170:	ff 91       	pop	r31
    1172:	ef 91       	pop	r30
    1174:	bf 91       	pop	r27
    1176:	af 91       	pop	r26
    1178:	9f 91       	pop	r25
    117a:	8f 91       	pop	r24
    117c:	7f 91       	pop	r23
    117e:	6f 91       	pop	r22
    1180:	5f 91       	pop	r21
    1182:	4f 91       	pop	r20
    1184:	3f 91       	pop	r19
    1186:	2f 91       	pop	r18
    1188:	1f 91       	pop	r17
    118a:	0f 91       	pop	r16
    118c:	0f 90       	pop	r0
    118e:	0f be       	out	0x3f, r0	; 63
    1190:	0f 90       	pop	r0
    1192:	1f 90       	pop	r1
    1194:	18 95       	reti

00001196 <__vector_12>:
    1196:	1f 92       	push	r1
    1198:	0f 92       	push	r0
    119a:	0f b6       	in	r0, 0x3f	; 63
    119c:	0f 92       	push	r0
    119e:	11 24       	eor	r1, r1
    11a0:	0f 93       	push	r16
    11a2:	1f 93       	push	r17
    11a4:	2f 93       	push	r18
    11a6:	3f 93       	push	r19
    11a8:	4f 93       	push	r20
    11aa:	5f 93       	push	r21
    11ac:	6f 93       	push	r22
    11ae:	7f 93       	push	r23
    11b0:	8f 93       	push	r24
    11b2:	9f 93       	push	r25
    11b4:	af 93       	push	r26
    11b6:	bf 93       	push	r27
    11b8:	ef 93       	push	r30
    11ba:	ff 93       	push	r31
    11bc:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <overflows>
    11c0:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <overflows+0x1>
    11c4:	ac 01       	movw	r20, r24
    11c6:	09 2e       	mov	r0, r25
    11c8:	00 0c       	add	r0, r0
    11ca:	66 0b       	sbc	r22, r22
    11cc:	77 0b       	sbc	r23, r23
    11ce:	9a 01       	movw	r18, r20
    11d0:	11 27       	eor	r17, r17
    11d2:	00 27       	eor	r16, r16
    11d4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11d8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    11dc:	60 e0       	ldi	r22, 0x00	; 0
    11de:	70 e0       	ldi	r23, 0x00	; 0
    11e0:	40 2b       	or	r20, r16
    11e2:	51 2b       	or	r21, r17
    11e4:	62 2b       	or	r22, r18
    11e6:	73 2b       	or	r23, r19
    11e8:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <timestamp>
    11ec:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <timestamp+0x1>
    11f0:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <timestamp+0x2>
    11f4:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <timestamp+0x3>
    11f8:	b0 9b       	sbis	0x16, 0	; 22
    11fa:	1a c0       	rjmp	.+52     	; 0x1230 <__vector_12+0x9a>
    11fc:	01 96       	adiw	r24, 0x01	; 1
    11fe:	09 2e       	mov	r0, r25
    1200:	00 0c       	add	r0, r0
    1202:	aa 0b       	sbc	r26, r26
    1204:	bb 0b       	sbc	r27, r27
    1206:	bc 01       	movw	r22, r24
    1208:	55 27       	eor	r21, r21
    120a:	44 27       	eor	r20, r20
    120c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1210:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1214:	a0 e0       	ldi	r26, 0x00	; 0
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	84 2b       	or	r24, r20
    121a:	95 2b       	or	r25, r21
    121c:	a6 2b       	or	r26, r22
    121e:	b7 2b       	or	r27, r23
    1220:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    1224:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    1228:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    122c:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    1230:	e0 91 ea 01 	lds	r30, 0x01EA	; 0x8001ea <mtable+0xe>
    1234:	f0 91 eb 01 	lds	r31, 0x01EB	; 0x8001eb <mtable+0xf>
    1238:	30 97       	sbiw	r30, 0x00	; 0
    123a:	39 f0       	breq	.+14     	; 0x124a <__vector_12+0xb4>
    123c:	67 e0       	ldi	r22, 0x07	; 7
    123e:	70 e0       	ldi	r23, 0x00	; 0
    1240:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <otable+0xe>
    1244:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <otable+0xf>
    1248:	09 95       	icall
    124a:	0e 94 8e 05 	call	0xb1c	; 0xb1c <schedule>
    124e:	ff 91       	pop	r31
    1250:	ef 91       	pop	r30
    1252:	bf 91       	pop	r27
    1254:	af 91       	pop	r26
    1256:	9f 91       	pop	r25
    1258:	8f 91       	pop	r24
    125a:	7f 91       	pop	r23
    125c:	6f 91       	pop	r22
    125e:	5f 91       	pop	r21
    1260:	4f 91       	pop	r20
    1262:	3f 91       	pop	r19
    1264:	2f 91       	pop	r18
    1266:	1f 91       	pop	r17
    1268:	0f 91       	pop	r16
    126a:	0f 90       	pop	r0
    126c:	0f be       	out	0x3f, r0	; 63
    126e:	0f 90       	pop	r0
    1270:	1f 90       	pop	r1
    1272:	18 95       	reti

00001274 <__vector_13>:
    1274:	1f 92       	push	r1
    1276:	0f 92       	push	r0
    1278:	0f b6       	in	r0, 0x3f	; 63
    127a:	0f 92       	push	r0
    127c:	11 24       	eor	r1, r1
    127e:	0f 93       	push	r16
    1280:	1f 93       	push	r17
    1282:	2f 93       	push	r18
    1284:	3f 93       	push	r19
    1286:	4f 93       	push	r20
    1288:	5f 93       	push	r21
    128a:	6f 93       	push	r22
    128c:	7f 93       	push	r23
    128e:	8f 93       	push	r24
    1290:	9f 93       	push	r25
    1292:	af 93       	push	r26
    1294:	bf 93       	push	r27
    1296:	ef 93       	push	r30
    1298:	ff 93       	push	r31
    129a:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <overflows>
    129e:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <overflows+0x1>
    12a2:	ac 01       	movw	r20, r24
    12a4:	09 2e       	mov	r0, r25
    12a6:	00 0c       	add	r0, r0
    12a8:	66 0b       	sbc	r22, r22
    12aa:	77 0b       	sbc	r23, r23
    12ac:	9a 01       	movw	r18, r20
    12ae:	11 27       	eor	r17, r17
    12b0:	00 27       	eor	r16, r16
    12b2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12b6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12ba:	60 e0       	ldi	r22, 0x00	; 0
    12bc:	70 e0       	ldi	r23, 0x00	; 0
    12be:	40 2b       	or	r20, r16
    12c0:	51 2b       	or	r21, r17
    12c2:	62 2b       	or	r22, r18
    12c4:	73 2b       	or	r23, r19
    12c6:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <timestamp>
    12ca:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <timestamp+0x1>
    12ce:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <timestamp+0x2>
    12d2:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <timestamp+0x3>
    12d6:	b0 9b       	sbis	0x16, 0	; 22
    12d8:	1a c0       	rjmp	.+52     	; 0x130e <__vector_13+0x9a>
    12da:	01 96       	adiw	r24, 0x01	; 1
    12dc:	09 2e       	mov	r0, r25
    12de:	00 0c       	add	r0, r0
    12e0:	aa 0b       	sbc	r26, r26
    12e2:	bb 0b       	sbc	r27, r27
    12e4:	bc 01       	movw	r22, r24
    12e6:	55 27       	eor	r21, r21
    12e8:	44 27       	eor	r20, r20
    12ea:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12ee:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12f2:	a0 e0       	ldi	r26, 0x00	; 0
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	84 2b       	or	r24, r20
    12f8:	95 2b       	or	r25, r21
    12fa:	a6 2b       	or	r26, r22
    12fc:	b7 2b       	or	r27, r23
    12fe:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    1302:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    1306:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    130a:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    130e:	e0 91 ec 01 	lds	r30, 0x01EC	; 0x8001ec <mtable+0x10>
    1312:	f0 91 ed 01 	lds	r31, 0x01ED	; 0x8001ed <mtable+0x11>
    1316:	30 97       	sbiw	r30, 0x00	; 0
    1318:	39 f0       	breq	.+14     	; 0x1328 <__vector_13+0xb4>
    131a:	68 e0       	ldi	r22, 0x08	; 8
    131c:	70 e0       	ldi	r23, 0x00	; 0
    131e:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <otable+0x10>
    1322:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <otable+0x11>
    1326:	09 95       	icall
    1328:	0e 94 8e 05 	call	0xb1c	; 0xb1c <schedule>
    132c:	ff 91       	pop	r31
    132e:	ef 91       	pop	r30
    1330:	bf 91       	pop	r27
    1332:	af 91       	pop	r26
    1334:	9f 91       	pop	r25
    1336:	8f 91       	pop	r24
    1338:	7f 91       	pop	r23
    133a:	6f 91       	pop	r22
    133c:	5f 91       	pop	r21
    133e:	4f 91       	pop	r20
    1340:	3f 91       	pop	r19
    1342:	2f 91       	pop	r18
    1344:	1f 91       	pop	r17
    1346:	0f 91       	pop	r16
    1348:	0f 90       	pop	r0
    134a:	0f be       	out	0x3f, r0	; 63
    134c:	0f 90       	pop	r0
    134e:	1f 90       	pop	r1
    1350:	18 95       	reti

00001352 <__vector_14>:
    1352:	1f 92       	push	r1
    1354:	0f 92       	push	r0
    1356:	0f b6       	in	r0, 0x3f	; 63
    1358:	0f 92       	push	r0
    135a:	11 24       	eor	r1, r1
    135c:	0f 93       	push	r16
    135e:	1f 93       	push	r17
    1360:	2f 93       	push	r18
    1362:	3f 93       	push	r19
    1364:	4f 93       	push	r20
    1366:	5f 93       	push	r21
    1368:	6f 93       	push	r22
    136a:	7f 93       	push	r23
    136c:	8f 93       	push	r24
    136e:	9f 93       	push	r25
    1370:	af 93       	push	r26
    1372:	bf 93       	push	r27
    1374:	ef 93       	push	r30
    1376:	ff 93       	push	r31
    1378:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <overflows>
    137c:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <overflows+0x1>
    1380:	ac 01       	movw	r20, r24
    1382:	09 2e       	mov	r0, r25
    1384:	00 0c       	add	r0, r0
    1386:	66 0b       	sbc	r22, r22
    1388:	77 0b       	sbc	r23, r23
    138a:	9a 01       	movw	r18, r20
    138c:	11 27       	eor	r17, r17
    138e:	00 27       	eor	r16, r16
    1390:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1394:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1398:	60 e0       	ldi	r22, 0x00	; 0
    139a:	70 e0       	ldi	r23, 0x00	; 0
    139c:	40 2b       	or	r20, r16
    139e:	51 2b       	or	r21, r17
    13a0:	62 2b       	or	r22, r18
    13a2:	73 2b       	or	r23, r19
    13a4:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <timestamp>
    13a8:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <timestamp+0x1>
    13ac:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <timestamp+0x2>
    13b0:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <timestamp+0x3>
    13b4:	b0 9b       	sbis	0x16, 0	; 22
    13b6:	1a c0       	rjmp	.+52     	; 0x13ec <__vector_14+0x9a>
    13b8:	01 96       	adiw	r24, 0x01	; 1
    13ba:	09 2e       	mov	r0, r25
    13bc:	00 0c       	add	r0, r0
    13be:	aa 0b       	sbc	r26, r26
    13c0:	bb 0b       	sbc	r27, r27
    13c2:	bc 01       	movw	r22, r24
    13c4:	55 27       	eor	r21, r21
    13c6:	44 27       	eor	r20, r20
    13c8:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13cc:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    13d0:	a0 e0       	ldi	r26, 0x00	; 0
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	84 2b       	or	r24, r20
    13d6:	95 2b       	or	r25, r21
    13d8:	a6 2b       	or	r26, r22
    13da:	b7 2b       	or	r27, r23
    13dc:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    13e0:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    13e4:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    13e8:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    13ec:	e0 91 ee 01 	lds	r30, 0x01EE	; 0x8001ee <mtable+0x12>
    13f0:	f0 91 ef 01 	lds	r31, 0x01EF	; 0x8001ef <mtable+0x13>
    13f4:	30 97       	sbiw	r30, 0x00	; 0
    13f6:	39 f0       	breq	.+14     	; 0x1406 <__vector_14+0xb4>
    13f8:	69 e0       	ldi	r22, 0x09	; 9
    13fa:	70 e0       	ldi	r23, 0x00	; 0
    13fc:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <otable+0x12>
    1400:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <otable+0x13>
    1404:	09 95       	icall
    1406:	0e 94 8e 05 	call	0xb1c	; 0xb1c <schedule>
    140a:	ff 91       	pop	r31
    140c:	ef 91       	pop	r30
    140e:	bf 91       	pop	r27
    1410:	af 91       	pop	r26
    1412:	9f 91       	pop	r25
    1414:	8f 91       	pop	r24
    1416:	7f 91       	pop	r23
    1418:	6f 91       	pop	r22
    141a:	5f 91       	pop	r21
    141c:	4f 91       	pop	r20
    141e:	3f 91       	pop	r19
    1420:	2f 91       	pop	r18
    1422:	1f 91       	pop	r17
    1424:	0f 91       	pop	r16
    1426:	0f 90       	pop	r0
    1428:	0f be       	out	0x3f, r0	; 63
    142a:	0f 90       	pop	r0
    142c:	1f 90       	pop	r1
    142e:	18 95       	reti

00001430 <__vector_15>:
    1430:	1f 92       	push	r1
    1432:	0f 92       	push	r0
    1434:	0f b6       	in	r0, 0x3f	; 63
    1436:	0f 92       	push	r0
    1438:	11 24       	eor	r1, r1
    143a:	0f 93       	push	r16
    143c:	1f 93       	push	r17
    143e:	2f 93       	push	r18
    1440:	3f 93       	push	r19
    1442:	4f 93       	push	r20
    1444:	5f 93       	push	r21
    1446:	6f 93       	push	r22
    1448:	7f 93       	push	r23
    144a:	8f 93       	push	r24
    144c:	9f 93       	push	r25
    144e:	af 93       	push	r26
    1450:	bf 93       	push	r27
    1452:	ef 93       	push	r30
    1454:	ff 93       	push	r31
    1456:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <overflows>
    145a:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <overflows+0x1>
    145e:	ac 01       	movw	r20, r24
    1460:	09 2e       	mov	r0, r25
    1462:	00 0c       	add	r0, r0
    1464:	66 0b       	sbc	r22, r22
    1466:	77 0b       	sbc	r23, r23
    1468:	9a 01       	movw	r18, r20
    146a:	11 27       	eor	r17, r17
    146c:	00 27       	eor	r16, r16
    146e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1472:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1476:	60 e0       	ldi	r22, 0x00	; 0
    1478:	70 e0       	ldi	r23, 0x00	; 0
    147a:	40 2b       	or	r20, r16
    147c:	51 2b       	or	r21, r17
    147e:	62 2b       	or	r22, r18
    1480:	73 2b       	or	r23, r19
    1482:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <timestamp>
    1486:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <timestamp+0x1>
    148a:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <timestamp+0x2>
    148e:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <timestamp+0x3>
    1492:	b0 9b       	sbis	0x16, 0	; 22
    1494:	1a c0       	rjmp	.+52     	; 0x14ca <__vector_15+0x9a>
    1496:	01 96       	adiw	r24, 0x01	; 1
    1498:	09 2e       	mov	r0, r25
    149a:	00 0c       	add	r0, r0
    149c:	aa 0b       	sbc	r26, r26
    149e:	bb 0b       	sbc	r27, r27
    14a0:	bc 01       	movw	r22, r24
    14a2:	55 27       	eor	r21, r21
    14a4:	44 27       	eor	r20, r20
    14a6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    14aa:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    14ae:	a0 e0       	ldi	r26, 0x00	; 0
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	84 2b       	or	r24, r20
    14b4:	95 2b       	or	r25, r21
    14b6:	a6 2b       	or	r26, r22
    14b8:	b7 2b       	or	r27, r23
    14ba:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    14be:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    14c2:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    14c6:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    14ca:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <mtable+0x14>
    14ce:	f0 91 f1 01 	lds	r31, 0x01F1	; 0x8001f1 <mtable+0x15>
    14d2:	30 97       	sbiw	r30, 0x00	; 0
    14d4:	39 f0       	breq	.+14     	; 0x14e4 <__vector_15+0xb4>
    14d6:	6a e0       	ldi	r22, 0x0A	; 10
    14d8:	70 e0       	ldi	r23, 0x00	; 0
    14da:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <otable+0x14>
    14de:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <otable+0x15>
    14e2:	09 95       	icall
    14e4:	0e 94 8e 05 	call	0xb1c	; 0xb1c <schedule>
    14e8:	ff 91       	pop	r31
    14ea:	ef 91       	pop	r30
    14ec:	bf 91       	pop	r27
    14ee:	af 91       	pop	r26
    14f0:	9f 91       	pop	r25
    14f2:	8f 91       	pop	r24
    14f4:	7f 91       	pop	r23
    14f6:	6f 91       	pop	r22
    14f8:	5f 91       	pop	r21
    14fa:	4f 91       	pop	r20
    14fc:	3f 91       	pop	r19
    14fe:	2f 91       	pop	r18
    1500:	1f 91       	pop	r17
    1502:	0f 91       	pop	r16
    1504:	0f 90       	pop	r0
    1506:	0f be       	out	0x3f, r0	; 63
    1508:	0f 90       	pop	r0
    150a:	1f 90       	pop	r1
    150c:	18 95       	reti

0000150e <__vector_16>:
    150e:	1f 92       	push	r1
    1510:	0f 92       	push	r0
    1512:	0f b6       	in	r0, 0x3f	; 63
    1514:	0f 92       	push	r0
    1516:	11 24       	eor	r1, r1
    1518:	0f 93       	push	r16
    151a:	1f 93       	push	r17
    151c:	2f 93       	push	r18
    151e:	3f 93       	push	r19
    1520:	4f 93       	push	r20
    1522:	5f 93       	push	r21
    1524:	6f 93       	push	r22
    1526:	7f 93       	push	r23
    1528:	8f 93       	push	r24
    152a:	9f 93       	push	r25
    152c:	af 93       	push	r26
    152e:	bf 93       	push	r27
    1530:	ef 93       	push	r30
    1532:	ff 93       	push	r31
    1534:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <overflows>
    1538:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <overflows+0x1>
    153c:	ac 01       	movw	r20, r24
    153e:	09 2e       	mov	r0, r25
    1540:	00 0c       	add	r0, r0
    1542:	66 0b       	sbc	r22, r22
    1544:	77 0b       	sbc	r23, r23
    1546:	9a 01       	movw	r18, r20
    1548:	11 27       	eor	r17, r17
    154a:	00 27       	eor	r16, r16
    154c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1550:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1554:	60 e0       	ldi	r22, 0x00	; 0
    1556:	70 e0       	ldi	r23, 0x00	; 0
    1558:	40 2b       	or	r20, r16
    155a:	51 2b       	or	r21, r17
    155c:	62 2b       	or	r22, r18
    155e:	73 2b       	or	r23, r19
    1560:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <timestamp>
    1564:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <timestamp+0x1>
    1568:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <timestamp+0x2>
    156c:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <timestamp+0x3>
    1570:	b0 9b       	sbis	0x16, 0	; 22
    1572:	1a c0       	rjmp	.+52     	; 0x15a8 <__vector_16+0x9a>
    1574:	01 96       	adiw	r24, 0x01	; 1
    1576:	09 2e       	mov	r0, r25
    1578:	00 0c       	add	r0, r0
    157a:	aa 0b       	sbc	r26, r26
    157c:	bb 0b       	sbc	r27, r27
    157e:	bc 01       	movw	r22, r24
    1580:	55 27       	eor	r21, r21
    1582:	44 27       	eor	r20, r20
    1584:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1588:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    158c:	a0 e0       	ldi	r26, 0x00	; 0
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	84 2b       	or	r24, r20
    1592:	95 2b       	or	r25, r21
    1594:	a6 2b       	or	r26, r22
    1596:	b7 2b       	or	r27, r23
    1598:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    159c:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    15a0:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    15a4:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    15a8:	e0 91 f2 01 	lds	r30, 0x01F2	; 0x8001f2 <mtable+0x16>
    15ac:	f0 91 f3 01 	lds	r31, 0x01F3	; 0x8001f3 <mtable+0x17>
    15b0:	30 97       	sbiw	r30, 0x00	; 0
    15b2:	39 f0       	breq	.+14     	; 0x15c2 <__vector_16+0xb4>
    15b4:	6b e0       	ldi	r22, 0x0B	; 11
    15b6:	70 e0       	ldi	r23, 0x00	; 0
    15b8:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <otable+0x16>
    15bc:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <otable+0x17>
    15c0:	09 95       	icall
    15c2:	0e 94 8e 05 	call	0xb1c	; 0xb1c <schedule>
    15c6:	ff 91       	pop	r31
    15c8:	ef 91       	pop	r30
    15ca:	bf 91       	pop	r27
    15cc:	af 91       	pop	r26
    15ce:	9f 91       	pop	r25
    15d0:	8f 91       	pop	r24
    15d2:	7f 91       	pop	r23
    15d4:	6f 91       	pop	r22
    15d6:	5f 91       	pop	r21
    15d8:	4f 91       	pop	r20
    15da:	3f 91       	pop	r19
    15dc:	2f 91       	pop	r18
    15de:	1f 91       	pop	r17
    15e0:	0f 91       	pop	r16
    15e2:	0f 90       	pop	r0
    15e4:	0f be       	out	0x3f, r0	; 63
    15e6:	0f 90       	pop	r0
    15e8:	1f 90       	pop	r1
    15ea:	18 95       	reti

000015ec <__vector_17>:
    15ec:	1f 92       	push	r1
    15ee:	0f 92       	push	r0
    15f0:	0f b6       	in	r0, 0x3f	; 63
    15f2:	0f 92       	push	r0
    15f4:	11 24       	eor	r1, r1
    15f6:	0f 93       	push	r16
    15f8:	1f 93       	push	r17
    15fa:	2f 93       	push	r18
    15fc:	3f 93       	push	r19
    15fe:	4f 93       	push	r20
    1600:	5f 93       	push	r21
    1602:	6f 93       	push	r22
    1604:	7f 93       	push	r23
    1606:	8f 93       	push	r24
    1608:	9f 93       	push	r25
    160a:	af 93       	push	r26
    160c:	bf 93       	push	r27
    160e:	ef 93       	push	r30
    1610:	ff 93       	push	r31
    1612:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <overflows>
    1616:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <overflows+0x1>
    161a:	ac 01       	movw	r20, r24
    161c:	09 2e       	mov	r0, r25
    161e:	00 0c       	add	r0, r0
    1620:	66 0b       	sbc	r22, r22
    1622:	77 0b       	sbc	r23, r23
    1624:	9a 01       	movw	r18, r20
    1626:	11 27       	eor	r17, r17
    1628:	00 27       	eor	r16, r16
    162a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    162e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1632:	60 e0       	ldi	r22, 0x00	; 0
    1634:	70 e0       	ldi	r23, 0x00	; 0
    1636:	40 2b       	or	r20, r16
    1638:	51 2b       	or	r21, r17
    163a:	62 2b       	or	r22, r18
    163c:	73 2b       	or	r23, r19
    163e:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <timestamp>
    1642:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <timestamp+0x1>
    1646:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <timestamp+0x2>
    164a:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <timestamp+0x3>
    164e:	b0 9b       	sbis	0x16, 0	; 22
    1650:	1a c0       	rjmp	.+52     	; 0x1686 <__vector_17+0x9a>
    1652:	01 96       	adiw	r24, 0x01	; 1
    1654:	09 2e       	mov	r0, r25
    1656:	00 0c       	add	r0, r0
    1658:	aa 0b       	sbc	r26, r26
    165a:	bb 0b       	sbc	r27, r27
    165c:	bc 01       	movw	r22, r24
    165e:	55 27       	eor	r21, r21
    1660:	44 27       	eor	r20, r20
    1662:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1666:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    166a:	a0 e0       	ldi	r26, 0x00	; 0
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	84 2b       	or	r24, r20
    1670:	95 2b       	or	r25, r21
    1672:	a6 2b       	or	r26, r22
    1674:	b7 2b       	or	r27, r23
    1676:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    167a:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    167e:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    1682:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    1686:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <mtable+0x18>
    168a:	f0 91 f5 01 	lds	r31, 0x01F5	; 0x8001f5 <mtable+0x19>
    168e:	30 97       	sbiw	r30, 0x00	; 0
    1690:	39 f0       	breq	.+14     	; 0x16a0 <__vector_17+0xb4>
    1692:	6c e0       	ldi	r22, 0x0C	; 12
    1694:	70 e0       	ldi	r23, 0x00	; 0
    1696:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <otable+0x18>
    169a:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <otable+0x19>
    169e:	09 95       	icall
    16a0:	0e 94 8e 05 	call	0xb1c	; 0xb1c <schedule>
    16a4:	ff 91       	pop	r31
    16a6:	ef 91       	pop	r30
    16a8:	bf 91       	pop	r27
    16aa:	af 91       	pop	r26
    16ac:	9f 91       	pop	r25
    16ae:	8f 91       	pop	r24
    16b0:	7f 91       	pop	r23
    16b2:	6f 91       	pop	r22
    16b4:	5f 91       	pop	r21
    16b6:	4f 91       	pop	r20
    16b8:	3f 91       	pop	r19
    16ba:	2f 91       	pop	r18
    16bc:	1f 91       	pop	r17
    16be:	0f 91       	pop	r16
    16c0:	0f 90       	pop	r0
    16c2:	0f be       	out	0x3f, r0	; 63
    16c4:	0f 90       	pop	r0
    16c6:	1f 90       	pop	r1
    16c8:	18 95       	reti

000016ca <__vector_18>:
    16ca:	1f 92       	push	r1
    16cc:	0f 92       	push	r0
    16ce:	0f b6       	in	r0, 0x3f	; 63
    16d0:	0f 92       	push	r0
    16d2:	11 24       	eor	r1, r1
    16d4:	0f 93       	push	r16
    16d6:	1f 93       	push	r17
    16d8:	2f 93       	push	r18
    16da:	3f 93       	push	r19
    16dc:	4f 93       	push	r20
    16de:	5f 93       	push	r21
    16e0:	6f 93       	push	r22
    16e2:	7f 93       	push	r23
    16e4:	8f 93       	push	r24
    16e6:	9f 93       	push	r25
    16e8:	af 93       	push	r26
    16ea:	bf 93       	push	r27
    16ec:	ef 93       	push	r30
    16ee:	ff 93       	push	r31
    16f0:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <overflows>
    16f4:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <overflows+0x1>
    16f8:	ac 01       	movw	r20, r24
    16fa:	09 2e       	mov	r0, r25
    16fc:	00 0c       	add	r0, r0
    16fe:	66 0b       	sbc	r22, r22
    1700:	77 0b       	sbc	r23, r23
    1702:	9a 01       	movw	r18, r20
    1704:	11 27       	eor	r17, r17
    1706:	00 27       	eor	r16, r16
    1708:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    170c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1710:	60 e0       	ldi	r22, 0x00	; 0
    1712:	70 e0       	ldi	r23, 0x00	; 0
    1714:	40 2b       	or	r20, r16
    1716:	51 2b       	or	r21, r17
    1718:	62 2b       	or	r22, r18
    171a:	73 2b       	or	r23, r19
    171c:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <timestamp>
    1720:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <timestamp+0x1>
    1724:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <timestamp+0x2>
    1728:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <timestamp+0x3>
    172c:	b0 9b       	sbis	0x16, 0	; 22
    172e:	1a c0       	rjmp	.+52     	; 0x1764 <__vector_18+0x9a>
    1730:	01 96       	adiw	r24, 0x01	; 1
    1732:	09 2e       	mov	r0, r25
    1734:	00 0c       	add	r0, r0
    1736:	aa 0b       	sbc	r26, r26
    1738:	bb 0b       	sbc	r27, r27
    173a:	bc 01       	movw	r22, r24
    173c:	55 27       	eor	r21, r21
    173e:	44 27       	eor	r20, r20
    1740:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1744:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1748:	a0 e0       	ldi	r26, 0x00	; 0
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	84 2b       	or	r24, r20
    174e:	95 2b       	or	r25, r21
    1750:	a6 2b       	or	r26, r22
    1752:	b7 2b       	or	r27, r23
    1754:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    1758:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    175c:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    1760:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    1764:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <mtable+0x1a>
    1768:	f0 91 f7 01 	lds	r31, 0x01F7	; 0x8001f7 <mtable+0x1b>
    176c:	30 97       	sbiw	r30, 0x00	; 0
    176e:	39 f0       	breq	.+14     	; 0x177e <__vector_18+0xb4>
    1770:	6d e0       	ldi	r22, 0x0D	; 13
    1772:	70 e0       	ldi	r23, 0x00	; 0
    1774:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <otable+0x1a>
    1778:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <otable+0x1b>
    177c:	09 95       	icall
    177e:	0e 94 8e 05 	call	0xb1c	; 0xb1c <schedule>
    1782:	ff 91       	pop	r31
    1784:	ef 91       	pop	r30
    1786:	bf 91       	pop	r27
    1788:	af 91       	pop	r26
    178a:	9f 91       	pop	r25
    178c:	8f 91       	pop	r24
    178e:	7f 91       	pop	r23
    1790:	6f 91       	pop	r22
    1792:	5f 91       	pop	r21
    1794:	4f 91       	pop	r20
    1796:	3f 91       	pop	r19
    1798:	2f 91       	pop	r18
    179a:	1f 91       	pop	r17
    179c:	0f 91       	pop	r16
    179e:	0f 90       	pop	r0
    17a0:	0f be       	out	0x3f, r0	; 63
    17a2:	0f 90       	pop	r0
    17a4:	1f 90       	pop	r1
    17a6:	18 95       	reti

000017a8 <__vector_19>:
    17a8:	1f 92       	push	r1
    17aa:	0f 92       	push	r0
    17ac:	0f b6       	in	r0, 0x3f	; 63
    17ae:	0f 92       	push	r0
    17b0:	11 24       	eor	r1, r1
    17b2:	0f 93       	push	r16
    17b4:	1f 93       	push	r17
    17b6:	2f 93       	push	r18
    17b8:	3f 93       	push	r19
    17ba:	4f 93       	push	r20
    17bc:	5f 93       	push	r21
    17be:	6f 93       	push	r22
    17c0:	7f 93       	push	r23
    17c2:	8f 93       	push	r24
    17c4:	9f 93       	push	r25
    17c6:	af 93       	push	r26
    17c8:	bf 93       	push	r27
    17ca:	ef 93       	push	r30
    17cc:	ff 93       	push	r31
    17ce:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <overflows>
    17d2:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <overflows+0x1>
    17d6:	ac 01       	movw	r20, r24
    17d8:	09 2e       	mov	r0, r25
    17da:	00 0c       	add	r0, r0
    17dc:	66 0b       	sbc	r22, r22
    17de:	77 0b       	sbc	r23, r23
    17e0:	9a 01       	movw	r18, r20
    17e2:	11 27       	eor	r17, r17
    17e4:	00 27       	eor	r16, r16
    17e6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    17ea:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    17ee:	60 e0       	ldi	r22, 0x00	; 0
    17f0:	70 e0       	ldi	r23, 0x00	; 0
    17f2:	40 2b       	or	r20, r16
    17f4:	51 2b       	or	r21, r17
    17f6:	62 2b       	or	r22, r18
    17f8:	73 2b       	or	r23, r19
    17fa:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <timestamp>
    17fe:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <timestamp+0x1>
    1802:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <timestamp+0x2>
    1806:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <timestamp+0x3>
    180a:	b0 9b       	sbis	0x16, 0	; 22
    180c:	1a c0       	rjmp	.+52     	; 0x1842 <__vector_19+0x9a>
    180e:	01 96       	adiw	r24, 0x01	; 1
    1810:	09 2e       	mov	r0, r25
    1812:	00 0c       	add	r0, r0
    1814:	aa 0b       	sbc	r26, r26
    1816:	bb 0b       	sbc	r27, r27
    1818:	bc 01       	movw	r22, r24
    181a:	55 27       	eor	r21, r21
    181c:	44 27       	eor	r20, r20
    181e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1822:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1826:	a0 e0       	ldi	r26, 0x00	; 0
    1828:	b0 e0       	ldi	r27, 0x00	; 0
    182a:	84 2b       	or	r24, r20
    182c:	95 2b       	or	r25, r21
    182e:	a6 2b       	or	r26, r22
    1830:	b7 2b       	or	r27, r23
    1832:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    1836:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    183a:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    183e:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    1842:	e0 91 f8 01 	lds	r30, 0x01F8	; 0x8001f8 <mtable+0x1c>
    1846:	f0 91 f9 01 	lds	r31, 0x01F9	; 0x8001f9 <mtable+0x1d>
    184a:	30 97       	sbiw	r30, 0x00	; 0
    184c:	39 f0       	breq	.+14     	; 0x185c <__vector_19+0xb4>
    184e:	6e e0       	ldi	r22, 0x0E	; 14
    1850:	70 e0       	ldi	r23, 0x00	; 0
    1852:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <otable+0x1c>
    1856:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <otable+0x1d>
    185a:	09 95       	icall
    185c:	0e 94 8e 05 	call	0xb1c	; 0xb1c <schedule>
    1860:	ff 91       	pop	r31
    1862:	ef 91       	pop	r30
    1864:	bf 91       	pop	r27
    1866:	af 91       	pop	r26
    1868:	9f 91       	pop	r25
    186a:	8f 91       	pop	r24
    186c:	7f 91       	pop	r23
    186e:	6f 91       	pop	r22
    1870:	5f 91       	pop	r21
    1872:	4f 91       	pop	r20
    1874:	3f 91       	pop	r19
    1876:	2f 91       	pop	r18
    1878:	1f 91       	pop	r17
    187a:	0f 91       	pop	r16
    187c:	0f 90       	pop	r0
    187e:	0f be       	out	0x3f, r0	; 63
    1880:	0f 90       	pop	r0
    1882:	1f 90       	pop	r1
    1884:	18 95       	reti

00001886 <__vector_20>:
    1886:	1f 92       	push	r1
    1888:	0f 92       	push	r0
    188a:	0f b6       	in	r0, 0x3f	; 63
    188c:	0f 92       	push	r0
    188e:	11 24       	eor	r1, r1
    1890:	0f 93       	push	r16
    1892:	1f 93       	push	r17
    1894:	2f 93       	push	r18
    1896:	3f 93       	push	r19
    1898:	4f 93       	push	r20
    189a:	5f 93       	push	r21
    189c:	6f 93       	push	r22
    189e:	7f 93       	push	r23
    18a0:	8f 93       	push	r24
    18a2:	9f 93       	push	r25
    18a4:	af 93       	push	r26
    18a6:	bf 93       	push	r27
    18a8:	ef 93       	push	r30
    18aa:	ff 93       	push	r31
    18ac:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <overflows>
    18b0:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <overflows+0x1>
    18b4:	ac 01       	movw	r20, r24
    18b6:	09 2e       	mov	r0, r25
    18b8:	00 0c       	add	r0, r0
    18ba:	66 0b       	sbc	r22, r22
    18bc:	77 0b       	sbc	r23, r23
    18be:	9a 01       	movw	r18, r20
    18c0:	11 27       	eor	r17, r17
    18c2:	00 27       	eor	r16, r16
    18c4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    18c8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    18cc:	60 e0       	ldi	r22, 0x00	; 0
    18ce:	70 e0       	ldi	r23, 0x00	; 0
    18d0:	40 2b       	or	r20, r16
    18d2:	51 2b       	or	r21, r17
    18d4:	62 2b       	or	r22, r18
    18d6:	73 2b       	or	r23, r19
    18d8:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <timestamp>
    18dc:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <timestamp+0x1>
    18e0:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <timestamp+0x2>
    18e4:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <timestamp+0x3>
    18e8:	b0 9b       	sbis	0x16, 0	; 22
    18ea:	1a c0       	rjmp	.+52     	; 0x1920 <__vector_20+0x9a>
    18ec:	01 96       	adiw	r24, 0x01	; 1
    18ee:	09 2e       	mov	r0, r25
    18f0:	00 0c       	add	r0, r0
    18f2:	aa 0b       	sbc	r26, r26
    18f4:	bb 0b       	sbc	r27, r27
    18f6:	bc 01       	movw	r22, r24
    18f8:	55 27       	eor	r21, r21
    18fa:	44 27       	eor	r20, r20
    18fc:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1900:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1904:	a0 e0       	ldi	r26, 0x00	; 0
    1906:	b0 e0       	ldi	r27, 0x00	; 0
    1908:	84 2b       	or	r24, r20
    190a:	95 2b       	or	r25, r21
    190c:	a6 2b       	or	r26, r22
    190e:	b7 2b       	or	r27, r23
    1910:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    1914:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    1918:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    191c:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    1920:	e0 91 fa 01 	lds	r30, 0x01FA	; 0x8001fa <mtable+0x1e>
    1924:	f0 91 fb 01 	lds	r31, 0x01FB	; 0x8001fb <mtable+0x1f>
    1928:	30 97       	sbiw	r30, 0x00	; 0
    192a:	39 f0       	breq	.+14     	; 0x193a <__vector_20+0xb4>
    192c:	6f e0       	ldi	r22, 0x0F	; 15
    192e:	70 e0       	ldi	r23, 0x00	; 0
    1930:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <otable+0x1e>
    1934:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <otable+0x1f>
    1938:	09 95       	icall
    193a:	0e 94 8e 05 	call	0xb1c	; 0xb1c <schedule>
    193e:	ff 91       	pop	r31
    1940:	ef 91       	pop	r30
    1942:	bf 91       	pop	r27
    1944:	af 91       	pop	r26
    1946:	9f 91       	pop	r25
    1948:	8f 91       	pop	r24
    194a:	7f 91       	pop	r23
    194c:	6f 91       	pop	r22
    194e:	5f 91       	pop	r21
    1950:	4f 91       	pop	r20
    1952:	3f 91       	pop	r19
    1954:	2f 91       	pop	r18
    1956:	1f 91       	pop	r17
    1958:	0f 91       	pop	r16
    195a:	0f 90       	pop	r0
    195c:	0f be       	out	0x3f, r0	; 63
    195e:	0f 90       	pop	r0
    1960:	1f 90       	pop	r1
    1962:	18 95       	reti

00001964 <__vector_21>:
    1964:	1f 92       	push	r1
    1966:	0f 92       	push	r0
    1968:	0f b6       	in	r0, 0x3f	; 63
    196a:	0f 92       	push	r0
    196c:	11 24       	eor	r1, r1
    196e:	0f 93       	push	r16
    1970:	1f 93       	push	r17
    1972:	2f 93       	push	r18
    1974:	3f 93       	push	r19
    1976:	4f 93       	push	r20
    1978:	5f 93       	push	r21
    197a:	6f 93       	push	r22
    197c:	7f 93       	push	r23
    197e:	8f 93       	push	r24
    1980:	9f 93       	push	r25
    1982:	af 93       	push	r26
    1984:	bf 93       	push	r27
    1986:	ef 93       	push	r30
    1988:	ff 93       	push	r31
    198a:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <overflows>
    198e:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <overflows+0x1>
    1992:	ac 01       	movw	r20, r24
    1994:	09 2e       	mov	r0, r25
    1996:	00 0c       	add	r0, r0
    1998:	66 0b       	sbc	r22, r22
    199a:	77 0b       	sbc	r23, r23
    199c:	9a 01       	movw	r18, r20
    199e:	11 27       	eor	r17, r17
    19a0:	00 27       	eor	r16, r16
    19a2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    19a6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    19aa:	60 e0       	ldi	r22, 0x00	; 0
    19ac:	70 e0       	ldi	r23, 0x00	; 0
    19ae:	40 2b       	or	r20, r16
    19b0:	51 2b       	or	r21, r17
    19b2:	62 2b       	or	r22, r18
    19b4:	73 2b       	or	r23, r19
    19b6:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <timestamp>
    19ba:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <timestamp+0x1>
    19be:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <timestamp+0x2>
    19c2:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <timestamp+0x3>
    19c6:	b0 9b       	sbis	0x16, 0	; 22
    19c8:	1a c0       	rjmp	.+52     	; 0x19fe <__vector_21+0x9a>
    19ca:	01 96       	adiw	r24, 0x01	; 1
    19cc:	09 2e       	mov	r0, r25
    19ce:	00 0c       	add	r0, r0
    19d0:	aa 0b       	sbc	r26, r26
    19d2:	bb 0b       	sbc	r27, r27
    19d4:	bc 01       	movw	r22, r24
    19d6:	55 27       	eor	r21, r21
    19d8:	44 27       	eor	r20, r20
    19da:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    19de:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    19e2:	a0 e0       	ldi	r26, 0x00	; 0
    19e4:	b0 e0       	ldi	r27, 0x00	; 0
    19e6:	84 2b       	or	r24, r20
    19e8:	95 2b       	or	r25, r21
    19ea:	a6 2b       	or	r26, r22
    19ec:	b7 2b       	or	r27, r23
    19ee:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    19f2:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    19f6:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    19fa:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    19fe:	e0 91 fc 01 	lds	r30, 0x01FC	; 0x8001fc <mtable+0x20>
    1a02:	f0 91 fd 01 	lds	r31, 0x01FD	; 0x8001fd <mtable+0x21>
    1a06:	30 97       	sbiw	r30, 0x00	; 0
    1a08:	39 f0       	breq	.+14     	; 0x1a18 <__vector_21+0xb4>
    1a0a:	60 e1       	ldi	r22, 0x10	; 16
    1a0c:	70 e0       	ldi	r23, 0x00	; 0
    1a0e:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <otable+0x20>
    1a12:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <otable+0x21>
    1a16:	09 95       	icall
    1a18:	0e 94 8e 05 	call	0xb1c	; 0xb1c <schedule>
    1a1c:	ff 91       	pop	r31
    1a1e:	ef 91       	pop	r30
    1a20:	bf 91       	pop	r27
    1a22:	af 91       	pop	r26
    1a24:	9f 91       	pop	r25
    1a26:	8f 91       	pop	r24
    1a28:	7f 91       	pop	r23
    1a2a:	6f 91       	pop	r22
    1a2c:	5f 91       	pop	r21
    1a2e:	4f 91       	pop	r20
    1a30:	3f 91       	pop	r19
    1a32:	2f 91       	pop	r18
    1a34:	1f 91       	pop	r17
    1a36:	0f 91       	pop	r16
    1a38:	0f 90       	pop	r0
    1a3a:	0f be       	out	0x3f, r0	; 63
    1a3c:	0f 90       	pop	r0
    1a3e:	1f 90       	pop	r1
    1a40:	18 95       	reti

00001a42 <__vector_22>:
    1a42:	1f 92       	push	r1
    1a44:	0f 92       	push	r0
    1a46:	0f b6       	in	r0, 0x3f	; 63
    1a48:	0f 92       	push	r0
    1a4a:	11 24       	eor	r1, r1
    1a4c:	0f 93       	push	r16
    1a4e:	1f 93       	push	r17
    1a50:	2f 93       	push	r18
    1a52:	3f 93       	push	r19
    1a54:	4f 93       	push	r20
    1a56:	5f 93       	push	r21
    1a58:	6f 93       	push	r22
    1a5a:	7f 93       	push	r23
    1a5c:	8f 93       	push	r24
    1a5e:	9f 93       	push	r25
    1a60:	af 93       	push	r26
    1a62:	bf 93       	push	r27
    1a64:	ef 93       	push	r30
    1a66:	ff 93       	push	r31
    1a68:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <overflows>
    1a6c:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <overflows+0x1>
    1a70:	ac 01       	movw	r20, r24
    1a72:	09 2e       	mov	r0, r25
    1a74:	00 0c       	add	r0, r0
    1a76:	66 0b       	sbc	r22, r22
    1a78:	77 0b       	sbc	r23, r23
    1a7a:	9a 01       	movw	r18, r20
    1a7c:	11 27       	eor	r17, r17
    1a7e:	00 27       	eor	r16, r16
    1a80:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a84:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a88:	60 e0       	ldi	r22, 0x00	; 0
    1a8a:	70 e0       	ldi	r23, 0x00	; 0
    1a8c:	40 2b       	or	r20, r16
    1a8e:	51 2b       	or	r21, r17
    1a90:	62 2b       	or	r22, r18
    1a92:	73 2b       	or	r23, r19
    1a94:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <timestamp>
    1a98:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <timestamp+0x1>
    1a9c:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <timestamp+0x2>
    1aa0:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <timestamp+0x3>
    1aa4:	b0 9b       	sbis	0x16, 0	; 22
    1aa6:	1a c0       	rjmp	.+52     	; 0x1adc <__vector_22+0x9a>
    1aa8:	01 96       	adiw	r24, 0x01	; 1
    1aaa:	09 2e       	mov	r0, r25
    1aac:	00 0c       	add	r0, r0
    1aae:	aa 0b       	sbc	r26, r26
    1ab0:	bb 0b       	sbc	r27, r27
    1ab2:	bc 01       	movw	r22, r24
    1ab4:	55 27       	eor	r21, r21
    1ab6:	44 27       	eor	r20, r20
    1ab8:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1abc:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ac0:	a0 e0       	ldi	r26, 0x00	; 0
    1ac2:	b0 e0       	ldi	r27, 0x00	; 0
    1ac4:	84 2b       	or	r24, r20
    1ac6:	95 2b       	or	r25, r21
    1ac8:	a6 2b       	or	r26, r22
    1aca:	b7 2b       	or	r27, r23
    1acc:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    1ad0:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    1ad4:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    1ad8:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    1adc:	e0 91 fe 01 	lds	r30, 0x01FE	; 0x8001fe <mtable+0x22>
    1ae0:	f0 91 ff 01 	lds	r31, 0x01FF	; 0x8001ff <mtable+0x23>
    1ae4:	30 97       	sbiw	r30, 0x00	; 0
    1ae6:	39 f0       	breq	.+14     	; 0x1af6 <__vector_22+0xb4>
    1ae8:	61 e1       	ldi	r22, 0x11	; 17
    1aea:	70 e0       	ldi	r23, 0x00	; 0
    1aec:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <otable+0x22>
    1af0:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <otable+0x23>
    1af4:	09 95       	icall
    1af6:	0e 94 8e 05 	call	0xb1c	; 0xb1c <schedule>
    1afa:	ff 91       	pop	r31
    1afc:	ef 91       	pop	r30
    1afe:	bf 91       	pop	r27
    1b00:	af 91       	pop	r26
    1b02:	9f 91       	pop	r25
    1b04:	8f 91       	pop	r24
    1b06:	7f 91       	pop	r23
    1b08:	6f 91       	pop	r22
    1b0a:	5f 91       	pop	r21
    1b0c:	4f 91       	pop	r20
    1b0e:	3f 91       	pop	r19
    1b10:	2f 91       	pop	r18
    1b12:	1f 91       	pop	r17
    1b14:	0f 91       	pop	r16
    1b16:	0f 90       	pop	r0
    1b18:	0f be       	out	0x3f, r0	; 63
    1b1a:	0f 90       	pop	r0
    1b1c:	1f 90       	pop	r1
    1b1e:	18 95       	reti

00001b20 <idle>:
    1b20:	0e 94 8e 05 	call	0xb1c	; 0xb1c <schedule>
    1b24:	78 94       	sei
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	83 bf       	out	0x33, r24	; 51
    1b2a:	88 95       	sleep
    1b2c:	fc cf       	rjmp	.-8      	; 0x1b26 <idle+0x6>

00001b2e <__vector_9>:
    1b2e:	1f 92       	push	r1
    1b30:	0f 92       	push	r0
    1b32:	0f b6       	in	r0, 0x3f	; 63
    1b34:	0f 92       	push	r0
    1b36:	11 24       	eor	r1, r1
    1b38:	2f 93       	push	r18
    1b3a:	3f 93       	push	r19
    1b3c:	4f 93       	push	r20
    1b3e:	5f 93       	push	r21
    1b40:	6f 93       	push	r22
    1b42:	7f 93       	push	r23
    1b44:	8f 93       	push	r24
    1b46:	9f 93       	push	r25
    1b48:	ef 93       	push	r30
    1b4a:	ff 93       	push	r31
    1b4c:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <overflows>
    1b50:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <overflows+0x1>
    1b54:	01 96       	adiw	r24, 0x01	; 1
    1b56:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <overflows+0x1>
    1b5a:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <overflows>
    1b5e:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <timerQ>
    1b62:	f0 91 3f 01 	lds	r31, 0x013F	; 0x80013f <timerQ+0x1>
    1b66:	30 97       	sbiw	r30, 0x00	; 0
    1b68:	01 f1       	breq	.+64     	; 0x1baa <__vector_9+0x7c>
    1b6a:	42 81       	ldd	r20, Z+2	; 0x02
    1b6c:	53 81       	ldd	r21, Z+3	; 0x03
    1b6e:	64 81       	ldd	r22, Z+4	; 0x04
    1b70:	75 81       	ldd	r23, Z+5	; 0x05
    1b72:	86 17       	cp	r24, r22
    1b74:	97 07       	cpc	r25, r23
    1b76:	c9 f4       	brne	.+50     	; 0x1baa <__vector_9+0x7c>
    1b78:	ca 01       	movw	r24, r20
    1b7a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b7e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b82:	42 1b       	sub	r20, r18
    1b84:	53 0b       	sbc	r21, r19
    1b86:	41 30       	cpi	r20, 0x01	; 1
    1b88:	51 05       	cpc	r21, r1
    1b8a:	29 f4       	brne	.+10     	; 0x1b96 <__vector_9+0x68>
    1b8c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b90:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b94:	01 96       	adiw	r24, 0x01	; 1
    1b96:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1b9a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1b9e:	ef e6       	ldi	r30, 0x6F	; 111
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	80 81       	ld	r24, Z
    1ba4:	82 60       	ori	r24, 0x02	; 2
    1ba6:	80 83       	st	Z, r24
    1ba8:	05 c0       	rjmp	.+10     	; 0x1bb4 <__vector_9+0x86>
    1baa:	ef e6       	ldi	r30, 0x6F	; 111
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	80 81       	ld	r24, Z
    1bb0:	8d 7f       	andi	r24, 0xFD	; 253
    1bb2:	80 83       	st	Z, r24
    1bb4:	ff 91       	pop	r31
    1bb6:	ef 91       	pop	r30
    1bb8:	9f 91       	pop	r25
    1bba:	8f 91       	pop	r24
    1bbc:	7f 91       	pop	r23
    1bbe:	6f 91       	pop	r22
    1bc0:	5f 91       	pop	r21
    1bc2:	4f 91       	pop	r20
    1bc4:	3f 91       	pop	r19
    1bc6:	2f 91       	pop	r18
    1bc8:	0f 90       	pop	r0
    1bca:	0f be       	out	0x3f, r0	; 63
    1bcc:	0f 90       	pop	r0
    1bce:	1f 90       	pop	r1
    1bd0:	18 95       	reti

00001bd2 <__vector_7>:
    1bd2:	1f 92       	push	r1
    1bd4:	0f 92       	push	r0
    1bd6:	0f b6       	in	r0, 0x3f	; 63
    1bd8:	0f 92       	push	r0
    1bda:	11 24       	eor	r1, r1
    1bdc:	cf 92       	push	r12
    1bde:	df 92       	push	r13
    1be0:	ef 92       	push	r14
    1be2:	ff 92       	push	r15
    1be4:	2f 93       	push	r18
    1be6:	3f 93       	push	r19
    1be8:	4f 93       	push	r20
    1bea:	5f 93       	push	r21
    1bec:	6f 93       	push	r22
    1bee:	7f 93       	push	r23
    1bf0:	8f 93       	push	r24
    1bf2:	9f 93       	push	r25
    1bf4:	af 93       	push	r26
    1bf6:	bf 93       	push	r27
    1bf8:	ef 93       	push	r30
    1bfa:	ff 93       	push	r31
    1bfc:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <overflows>
    1c00:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <overflows+0x1>
    1c04:	6c 01       	movw	r12, r24
    1c06:	09 2e       	mov	r0, r25
    1c08:	00 0c       	add	r0, r0
    1c0a:	ee 08       	sbc	r14, r14
    1c0c:	ff 08       	sbc	r15, r15
    1c0e:	76 01       	movw	r14, r12
    1c10:	dd 24       	eor	r13, r13
    1c12:	cc 24       	eor	r12, r12
    1c14:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c18:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c1c:	60 e0       	ldi	r22, 0x00	; 0
    1c1e:	70 e0       	ldi	r23, 0x00	; 0
    1c20:	c4 2a       	or	r12, r20
    1c22:	d5 2a       	or	r13, r21
    1c24:	e6 2a       	or	r14, r22
    1c26:	f7 2a       	or	r15, r23
    1c28:	b0 9b       	sbis	0x16, 0	; 22
    1c2a:	1e c0       	rjmp	.+60     	; 0x1c68 <__vector_7+0x96>
    1c2c:	6c 01       	movw	r12, r24
    1c2e:	2f ef       	ldi	r18, 0xFF	; 255
    1c30:	c2 1a       	sub	r12, r18
    1c32:	d2 0a       	sbc	r13, r18
    1c34:	0d 2c       	mov	r0, r13
    1c36:	00 0c       	add	r0, r0
    1c38:	ee 08       	sbc	r14, r14
    1c3a:	ff 08       	sbc	r15, r15
    1c3c:	d6 01       	movw	r26, r12
    1c3e:	99 27       	eor	r25, r25
    1c40:	88 27       	eor	r24, r24
    1c42:	c0 90 84 00 	lds	r12, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c46:	d0 90 85 00 	lds	r13, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c4a:	e1 2c       	mov	r14, r1
    1c4c:	f1 2c       	mov	r15, r1
    1c4e:	c8 2a       	or	r12, r24
    1c50:	d9 2a       	or	r13, r25
    1c52:	ea 2a       	or	r14, r26
    1c54:	fb 2a       	or	r15, r27
    1c56:	08 c0       	rjmp	.+16     	; 0x1c68 <__vector_7+0x96>
    1c58:	8e e3       	ldi	r24, 0x3E	; 62
    1c5a:	91 e0       	ldi	r25, 0x01	; 1
    1c5c:	0e 94 59 05 	call	0xab2	; 0xab2 <dequeue>
    1c60:	60 e4       	ldi	r22, 0x40	; 64
    1c62:	71 e0       	ldi	r23, 0x01	; 1
    1c64:	0e 94 f7 04 	call	0x9ee	; 0x9ee <enqueueByDeadline>
    1c68:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <timerQ>
    1c6c:	f0 91 3f 01 	lds	r31, 0x013F	; 0x80013f <timerQ+0x1>
    1c70:	30 97       	sbiw	r30, 0x00	; 0
    1c72:	69 f0       	breq	.+26     	; 0x1c8e <__vector_7+0xbc>
    1c74:	82 81       	ldd	r24, Z+2	; 0x02
    1c76:	93 81       	ldd	r25, Z+3	; 0x03
    1c78:	a4 81       	ldd	r26, Z+4	; 0x04
    1c7a:	b5 81       	ldd	r27, Z+5	; 0x05
    1c7c:	8c 19       	sub	r24, r12
    1c7e:	9d 09       	sbc	r25, r13
    1c80:	ae 09       	sbc	r26, r14
    1c82:	bf 09       	sbc	r27, r15
    1c84:	18 16       	cp	r1, r24
    1c86:	19 06       	cpc	r1, r25
    1c88:	1a 06       	cpc	r1, r26
    1c8a:	1b 06       	cpc	r1, r27
    1c8c:	2c f7       	brge	.-54     	; 0x1c58 <__vector_7+0x86>
    1c8e:	30 97       	sbiw	r30, 0x00	; 0
    1c90:	21 f1       	breq	.+72     	; 0x1cda <__vector_7+0x108>
    1c92:	82 81       	ldd	r24, Z+2	; 0x02
    1c94:	93 81       	ldd	r25, Z+3	; 0x03
    1c96:	a4 81       	ldd	r26, Z+4	; 0x04
    1c98:	b5 81       	ldd	r27, Z+5	; 0x05
    1c9a:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <overflows>
    1c9e:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <overflows+0x1>
    1ca2:	2a 17       	cp	r18, r26
    1ca4:	3b 07       	cpc	r19, r27
    1ca6:	c9 f4       	brne	.+50     	; 0x1cda <__vector_7+0x108>
    1ca8:	9c 01       	movw	r18, r24
    1caa:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1cae:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1cb2:	84 1b       	sub	r24, r20
    1cb4:	95 0b       	sbc	r25, r21
    1cb6:	01 97       	sbiw	r24, 0x01	; 1
    1cb8:	31 f4       	brne	.+12     	; 0x1cc6 <__vector_7+0xf4>
    1cba:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1cbe:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1cc2:	2f 5f       	subi	r18, 0xFF	; 255
    1cc4:	3f 4f       	sbci	r19, 0xFF	; 255
    1cc6:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1cca:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1cce:	ef e6       	ldi	r30, 0x6F	; 111
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	80 81       	ld	r24, Z
    1cd4:	82 60       	ori	r24, 0x02	; 2
    1cd6:	80 83       	st	Z, r24
    1cd8:	05 c0       	rjmp	.+10     	; 0x1ce4 <__vector_7+0x112>
    1cda:	ef e6       	ldi	r30, 0x6F	; 111
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	80 81       	ld	r24, Z
    1ce0:	8d 7f       	andi	r24, 0xFD	; 253
    1ce2:	80 83       	st	Z, r24
    1ce4:	0e 94 8e 05 	call	0xb1c	; 0xb1c <schedule>
    1ce8:	ff 91       	pop	r31
    1cea:	ef 91       	pop	r30
    1cec:	bf 91       	pop	r27
    1cee:	af 91       	pop	r26
    1cf0:	9f 91       	pop	r25
    1cf2:	8f 91       	pop	r24
    1cf4:	7f 91       	pop	r23
    1cf6:	6f 91       	pop	r22
    1cf8:	5f 91       	pop	r21
    1cfa:	4f 91       	pop	r20
    1cfc:	3f 91       	pop	r19
    1cfe:	2f 91       	pop	r18
    1d00:	ff 90       	pop	r15
    1d02:	ef 90       	pop	r14
    1d04:	df 90       	pop	r13
    1d06:	cf 90       	pop	r12
    1d08:	0f 90       	pop	r0
    1d0a:	0f be       	out	0x3f, r0	; 63
    1d0c:	0f 90       	pop	r0
    1d0e:	1f 90       	pop	r1
    1d10:	18 95       	reti

00001d12 <async>:
    1d12:	3f 92       	push	r3
    1d14:	4f 92       	push	r4
    1d16:	5f 92       	push	r5
    1d18:	6f 92       	push	r6
    1d1a:	7f 92       	push	r7
    1d1c:	8f 92       	push	r8
    1d1e:	9f 92       	push	r9
    1d20:	af 92       	push	r10
    1d22:	bf 92       	push	r11
    1d24:	cf 92       	push	r12
    1d26:	df 92       	push	r13
    1d28:	ef 92       	push	r14
    1d2a:	ff 92       	push	r15
    1d2c:	0f 93       	push	r16
    1d2e:	1f 93       	push	r17
    1d30:	cf 93       	push	r28
    1d32:	df 93       	push	r29
    1d34:	2b 01       	movw	r4, r22
    1d36:	3c 01       	movw	r6, r24
    1d38:	49 01       	movw	r8, r18
    1d3a:	5a 01       	movw	r10, r20
    1d3c:	8f b7       	in	r24, 0x3f	; 63
    1d3e:	80 78       	andi	r24, 0x80	; 128
    1d40:	38 2e       	mov	r3, r24
    1d42:	f8 94       	cli
    1d44:	88 e0       	ldi	r24, 0x08	; 8
    1d46:	91 e0       	ldi	r25, 0x01	; 1
    1d48:	0e 94 59 05 	call	0xab2	; 0xab2 <dequeue>
    1d4c:	ec 01       	movw	r28, r24
    1d4e:	1b 87       	std	Y+11, r17	; 0x0b
    1d50:	0a 87       	std	Y+10, r16	; 0x0a
    1d52:	fd 86       	std	Y+13, r15	; 0x0d
    1d54:	ec 86       	std	Y+12, r14	; 0x0c
    1d56:	df 86       	std	Y+15, r13	; 0x0f
    1d58:	ce 86       	std	Y+14, r12	; 0x0e
    1d5a:	33 20       	and	r3, r3
    1d5c:	61 f0       	breq	.+24     	; 0x1d76 <async+0x64>
    1d5e:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <current>
    1d62:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <current+0x1>
    1d66:	02 80       	ldd	r0, Z+2	; 0x02
    1d68:	f3 81       	ldd	r31, Z+3	; 0x03
    1d6a:	e0 2d       	mov	r30, r0
    1d6c:	82 81       	ldd	r24, Z+2	; 0x02
    1d6e:	93 81       	ldd	r25, Z+3	; 0x03
    1d70:	a4 81       	ldd	r26, Z+4	; 0x04
    1d72:	b5 81       	ldd	r27, Z+5	; 0x05
    1d74:	08 c0       	rjmp	.+16     	; 0x1d86 <async+0x74>
    1d76:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <timestamp>
    1d7a:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <timestamp+0x1>
    1d7e:	a0 91 3c 01 	lds	r26, 0x013C	; 0x80013c <timestamp+0x2>
    1d82:	b0 91 3d 01 	lds	r27, 0x013D	; 0x80013d <timestamp+0x3>
    1d86:	48 0e       	add	r4, r24
    1d88:	59 1e       	adc	r5, r25
    1d8a:	6a 1e       	adc	r6, r26
    1d8c:	7b 1e       	adc	r7, r27
    1d8e:	4a 82       	std	Y+2, r4	; 0x02
    1d90:	5b 82       	std	Y+3, r5	; 0x03
    1d92:	6c 82       	std	Y+4, r6	; 0x04
    1d94:	7d 82       	std	Y+5, r7	; 0x05
    1d96:	18 14       	cp	r1, r8
    1d98:	19 04       	cpc	r1, r9
    1d9a:	1a 04       	cpc	r1, r10
    1d9c:	1b 04       	cpc	r1, r11
    1d9e:	44 f0       	brlt	.+16     	; 0x1db0 <async+0x9e>
    1da0:	0f 2e       	mov	r0, r31
    1da2:	88 24       	eor	r8, r8
    1da4:	8a 94       	dec	r8
    1da6:	98 2c       	mov	r9, r8
    1da8:	a8 2c       	mov	r10, r8
    1daa:	ff e7       	ldi	r31, 0x7F	; 127
    1dac:	bf 2e       	mov	r11, r31
    1dae:	f0 2d       	mov	r31, r0
    1db0:	84 0c       	add	r8, r4
    1db2:	95 1c       	adc	r9, r5
    1db4:	a6 1c       	adc	r10, r6
    1db6:	b7 1c       	adc	r11, r7
    1db8:	8e 82       	std	Y+6, r8	; 0x06
    1dba:	9f 82       	std	Y+7, r9	; 0x07
    1dbc:	a8 86       	std	Y+8, r10	; 0x08
    1dbe:	b9 86       	std	Y+9, r11	; 0x09
    1dc0:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <overflows>
    1dc4:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <overflows+0x1>
    1dc8:	c9 01       	movw	r24, r18
    1dca:	03 2e       	mov	r0, r19
    1dcc:	00 0c       	add	r0, r0
    1dce:	aa 0b       	sbc	r26, r26
    1dd0:	bb 0b       	sbc	r27, r27
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	99 27       	eor	r25, r25
    1dd6:	88 27       	eor	r24, r24
    1dd8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ddc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1de0:	60 e0       	ldi	r22, 0x00	; 0
    1de2:	70 e0       	ldi	r23, 0x00	; 0
    1de4:	84 2b       	or	r24, r20
    1de6:	95 2b       	or	r25, r21
    1de8:	a6 2b       	or	r26, r22
    1dea:	b7 2b       	or	r27, r23
    1dec:	b0 9b       	sbis	0x16, 0	; 22
    1dee:	13 c0       	rjmp	.+38     	; 0x1e16 <async+0x104>
    1df0:	c9 01       	movw	r24, r18
    1df2:	01 96       	adiw	r24, 0x01	; 1
    1df4:	09 2e       	mov	r0, r25
    1df6:	00 0c       	add	r0, r0
    1df8:	aa 0b       	sbc	r26, r26
    1dfa:	bb 0b       	sbc	r27, r27
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	99 27       	eor	r25, r25
    1e00:	88 27       	eor	r24, r24
    1e02:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1e06:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e0a:	60 e0       	ldi	r22, 0x00	; 0
    1e0c:	70 e0       	ldi	r23, 0x00	; 0
    1e0e:	84 2b       	or	r24, r20
    1e10:	95 2b       	or	r25, r21
    1e12:	a6 2b       	or	r26, r22
    1e14:	b7 2b       	or	r27, r23
    1e16:	48 1a       	sub	r4, r24
    1e18:	59 0a       	sbc	r5, r25
    1e1a:	6a 0a       	sbc	r6, r26
    1e1c:	7b 0a       	sbc	r7, r27
    1e1e:	14 14       	cp	r1, r4
    1e20:	15 04       	cpc	r1, r5
    1e22:	16 04       	cpc	r1, r6
    1e24:	17 04       	cpc	r1, r7
    1e26:	ac f5       	brge	.+106    	; 0x1e92 <async+0x180>
    1e28:	6e e3       	ldi	r22, 0x3E	; 62
    1e2a:	71 e0       	ldi	r23, 0x01	; 1
    1e2c:	ce 01       	movw	r24, r28
    1e2e:	0e 94 28 05 	call	0xa50	; 0xa50 <enqueueByBaseline>
    1e32:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <timerQ>
    1e36:	f0 91 3f 01 	lds	r31, 0x013F	; 0x80013f <timerQ+0x1>
    1e3a:	30 97       	sbiw	r30, 0x00	; 0
    1e3c:	21 f1       	breq	.+72     	; 0x1e86 <async+0x174>
    1e3e:	82 81       	ldd	r24, Z+2	; 0x02
    1e40:	93 81       	ldd	r25, Z+3	; 0x03
    1e42:	a4 81       	ldd	r26, Z+4	; 0x04
    1e44:	b5 81       	ldd	r27, Z+5	; 0x05
    1e46:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <overflows>
    1e4a:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <overflows+0x1>
    1e4e:	2a 17       	cp	r18, r26
    1e50:	3b 07       	cpc	r19, r27
    1e52:	c9 f4       	brne	.+50     	; 0x1e86 <async+0x174>
    1e54:	9c 01       	movw	r18, r24
    1e56:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1e5a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e5e:	84 1b       	sub	r24, r20
    1e60:	95 0b       	sbc	r25, r21
    1e62:	01 97       	sbiw	r24, 0x01	; 1
    1e64:	31 f4       	brne	.+12     	; 0x1e72 <async+0x160>
    1e66:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1e6a:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e6e:	2f 5f       	subi	r18, 0xFF	; 255
    1e70:	3f 4f       	sbci	r19, 0xFF	; 255
    1e72:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1e76:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1e7a:	ef e6       	ldi	r30, 0x6F	; 111
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	80 81       	ld	r24, Z
    1e80:	82 60       	ori	r24, 0x02	; 2
    1e82:	80 83       	st	Z, r24
    1e84:	39 c0       	rjmp	.+114    	; 0x1ef8 <async+0x1e6>
    1e86:	ef e6       	ldi	r30, 0x6F	; 111
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 81       	ld	r24, Z
    1e8c:	8d 7f       	andi	r24, 0xFD	; 253
    1e8e:	80 83       	st	Z, r24
    1e90:	33 c0       	rjmp	.+102    	; 0x1ef8 <async+0x1e6>
    1e92:	60 e4       	ldi	r22, 0x40	; 64
    1e94:	71 e0       	ldi	r23, 0x01	; 1
    1e96:	ce 01       	movw	r24, r28
    1e98:	0e 94 f7 04 	call	0x9ee	; 0x9ee <enqueueByDeadline>
    1e9c:	33 20       	and	r3, r3
    1e9e:	61 f1       	breq	.+88     	; 0x1ef8 <async+0x1e6>
    1ea0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <threadPool>
    1ea4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <threadPool+0x1>
    1ea8:	89 2b       	or	r24, r25
    1eaa:	31 f1       	breq	.+76     	; 0x1ef8 <async+0x1e6>
    1eac:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <msgQ>
    1eb0:	f0 91 41 01 	lds	r31, 0x0141	; 0x800141 <msgQ+0x1>
    1eb4:	86 81       	ldd	r24, Z+6	; 0x06
    1eb6:	97 81       	ldd	r25, Z+7	; 0x07
    1eb8:	a0 85       	ldd	r26, Z+8	; 0x08
    1eba:	b1 85       	ldd	r27, Z+9	; 0x09
    1ebc:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <activeStack>
    1ec0:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <activeStack+0x1>
    1ec4:	02 80       	ldd	r0, Z+2	; 0x02
    1ec6:	f3 81       	ldd	r31, Z+3	; 0x03
    1ec8:	e0 2d       	mov	r30, r0
    1eca:	46 81       	ldd	r20, Z+6	; 0x06
    1ecc:	57 81       	ldd	r21, Z+7	; 0x07
    1ece:	60 85       	ldd	r22, Z+8	; 0x08
    1ed0:	71 85       	ldd	r23, Z+9	; 0x09
    1ed2:	84 1b       	sub	r24, r20
    1ed4:	95 0b       	sbc	r25, r21
    1ed6:	a6 0b       	sbc	r26, r22
    1ed8:	b7 0b       	sbc	r27, r23
    1eda:	72 f4       	brpl	.+28     	; 0x1ef8 <async+0x1e6>
    1edc:	86 e0       	ldi	r24, 0x06	; 6
    1ede:	91 e0       	ldi	r25, 0x01	; 1
    1ee0:	0e 94 84 05 	call	0xb08	; 0xb08 <pop>
    1ee4:	64 e0       	ldi	r22, 0x04	; 4
    1ee6:	71 e0       	ldi	r23, 0x01	; 1
    1ee8:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <push>
    1eec:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <activeStack>
    1ef0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <activeStack+0x1>
    1ef4:	0e 94 d7 04 	call	0x9ae	; 0x9ae <dispatch>
    1ef8:	33 20       	and	r3, r3
    1efa:	09 f0       	breq	.+2      	; 0x1efe <async+0x1ec>
    1efc:	78 94       	sei
    1efe:	ce 01       	movw	r24, r28
    1f00:	df 91       	pop	r29
    1f02:	cf 91       	pop	r28
    1f04:	1f 91       	pop	r17
    1f06:	0f 91       	pop	r16
    1f08:	ff 90       	pop	r15
    1f0a:	ef 90       	pop	r14
    1f0c:	df 90       	pop	r13
    1f0e:	cf 90       	pop	r12
    1f10:	bf 90       	pop	r11
    1f12:	af 90       	pop	r10
    1f14:	9f 90       	pop	r9
    1f16:	8f 90       	pop	r8
    1f18:	7f 90       	pop	r7
    1f1a:	6f 90       	pop	r6
    1f1c:	5f 90       	pop	r5
    1f1e:	4f 90       	pop	r4
    1f20:	3f 90       	pop	r3
    1f22:	08 95       	ret

00001f24 <sync>:
    1f24:	cf 92       	push	r12
    1f26:	df 92       	push	r13
    1f28:	ef 92       	push	r14
    1f2a:	ff 92       	push	r15
    1f2c:	0f 93       	push	r16
    1f2e:	1f 93       	push	r17
    1f30:	cf 93       	push	r28
    1f32:	df 93       	push	r29
    1f34:	ec 01       	movw	r28, r24
    1f36:	7b 01       	movw	r14, r22
    1f38:	6a 01       	movw	r12, r20
    1f3a:	1f b7       	in	r17, 0x3f	; 63
    1f3c:	10 78       	andi	r17, 0x80	; 128
    1f3e:	f8 94       	cli
    1f40:	a8 81       	ld	r26, Y
    1f42:	b9 81       	ldd	r27, Y+1	; 0x01
    1f44:	10 97       	sbiw	r26, 0x00	; 0
    1f46:	19 f4       	brne	.+6      	; 0x1f4e <sync+0x2a>
    1f48:	35 c0       	rjmp	.+106    	; 0x1fb4 <sync+0x90>
    1f4a:	a0 81       	ld	r26, Z
    1f4c:	b1 81       	ldd	r27, Z+1	; 0x01
    1f4e:	14 96       	adiw	r26, 0x04	; 4
    1f50:	ed 91       	ld	r30, X+
    1f52:	fc 91       	ld	r31, X
    1f54:	15 97       	sbiw	r26, 0x05	; 5
    1f56:	30 97       	sbiw	r30, 0x00	; 0
    1f58:	c1 f7       	brne	.-16     	; 0x1f4a <sync+0x26>
    1f5a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <current>
    1f5e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <current+0x1>
    1f62:	a2 17       	cp	r26, r18
    1f64:	b3 07       	cpc	r27, r19
    1f66:	11 f0       	breq	.+4      	; 0x1f6c <sync+0x48>
    1f68:	11 11       	cpse	r17, r1
    1f6a:	07 c0       	rjmp	.+14     	; 0x1f7a <sync+0x56>
    1f6c:	11 23       	and	r17, r17
    1f6e:	09 f4       	brne	.+2      	; 0x1f72 <sync+0x4e>
    1f70:	4a c0       	rjmp	.+148    	; 0x2006 <sync+0xe2>
    1f72:	78 94       	sei
    1f74:	8f ef       	ldi	r24, 0xFF	; 255
    1f76:	9f ef       	ldi	r25, 0xFF	; 255
    1f78:	4e c0       	rjmp	.+156    	; 0x2016 <sync+0xf2>
    1f7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f7e:	00 97       	sbiw	r24, 0x00	; 0
    1f80:	19 f0       	breq	.+6      	; 0x1f88 <sync+0x64>
    1f82:	fc 01       	movw	r30, r24
    1f84:	15 82       	std	Z+5, r1	; 0x05
    1f86:	14 82       	std	Z+4, r1	; 0x04
    1f88:	3b 83       	std	Y+3, r19	; 0x03
    1f8a:	2a 83       	std	Y+2, r18	; 0x02
    1f8c:	f9 01       	movw	r30, r18
    1f8e:	d5 83       	std	Z+5, r29	; 0x05
    1f90:	c4 83       	std	Z+4, r28	; 0x04
    1f92:	cd 01       	movw	r24, r26
    1f94:	0e 94 d7 04 	call	0x9ae	; 0x9ae <dispatch>
    1f98:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <current>
    1f9c:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <current+0x1>
    1fa0:	82 81       	ldd	r24, Z+2	; 0x02
    1fa2:	93 81       	ldd	r25, Z+3	; 0x03
    1fa4:	89 2b       	or	r24, r25
    1fa6:	31 f4       	brne	.+12     	; 0x1fb4 <sync+0x90>
    1fa8:	11 23       	and	r17, r17
    1faa:	81 f1       	breq	.+96     	; 0x200c <sync+0xe8>
    1fac:	78 94       	sei
    1fae:	80 e0       	ldi	r24, 0x00	; 0
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	31 c0       	rjmp	.+98     	; 0x2016 <sync+0xf2>
    1fb4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <current>
    1fb8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <current+0x1>
    1fbc:	99 83       	std	Y+1, r25	; 0x01
    1fbe:	88 83       	st	Y, r24
    1fc0:	11 23       	and	r17, r17
    1fc2:	29 f0       	breq	.+10     	; 0x1fce <sync+0xaa>
    1fc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc6:	9b 81       	ldd	r25, Y+3	; 0x03
    1fc8:	01 97       	sbiw	r24, 0x01	; 1
    1fca:	09 f0       	breq	.+2      	; 0x1fce <sync+0xaa>
    1fcc:	78 94       	sei
    1fce:	b6 01       	movw	r22, r12
    1fd0:	ce 01       	movw	r24, r28
    1fd2:	f7 01       	movw	r30, r14
    1fd4:	09 95       	icall
    1fd6:	f8 2e       	mov	r15, r24
    1fd8:	09 2f       	mov	r16, r25
    1fda:	8f b7       	in	r24, 0x3f	; 63
    1fdc:	f8 94       	cli
    1fde:	19 82       	std	Y+1, r1	; 0x01
    1fe0:	18 82       	st	Y, r1
    1fe2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe4:	9b 81       	ldd	r25, Y+3	; 0x03
    1fe6:	82 30       	cpi	r24, 0x02	; 2
    1fe8:	91 05       	cpc	r25, r1
    1fea:	38 f0       	brcs	.+14     	; 0x1ffa <sync+0xd6>
    1fec:	1b 82       	std	Y+3, r1	; 0x03
    1fee:	1a 82       	std	Y+2, r1	; 0x02
    1ff0:	fc 01       	movw	r30, r24
    1ff2:	15 82       	std	Z+5, r1	; 0x05
    1ff4:	14 82       	std	Z+4, r1	; 0x04
    1ff6:	0e 94 d7 04 	call	0x9ae	; 0x9ae <dispatch>
    1ffa:	11 23       	and	r17, r17
    1ffc:	51 f0       	breq	.+20     	; 0x2012 <sync+0xee>
    1ffe:	78 94       	sei
    2000:	8f 2d       	mov	r24, r15
    2002:	90 2f       	mov	r25, r16
    2004:	08 c0       	rjmp	.+16     	; 0x2016 <sync+0xf2>
    2006:	8f ef       	ldi	r24, 0xFF	; 255
    2008:	9f ef       	ldi	r25, 0xFF	; 255
    200a:	05 c0       	rjmp	.+10     	; 0x2016 <sync+0xf2>
    200c:	80 e0       	ldi	r24, 0x00	; 0
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	02 c0       	rjmp	.+4      	; 0x2016 <sync+0xf2>
    2012:	8f 2d       	mov	r24, r15
    2014:	90 2f       	mov	r25, r16
    2016:	df 91       	pop	r29
    2018:	cf 91       	pop	r28
    201a:	1f 91       	pop	r17
    201c:	0f 91       	pop	r16
    201e:	ff 90       	pop	r15
    2020:	ef 90       	pop	r14
    2022:	df 90       	pop	r13
    2024:	cf 90       	pop	r12
    2026:	08 95       	ret

00002028 <run>:
    2028:	00 91 02 01 	lds	r16, 0x0102	; 0x800102 <current>
    202c:	10 91 03 01 	lds	r17, 0x0103	; 0x800103 <current+0x1>
    2030:	80 e4       	ldi	r24, 0x40	; 64
    2032:	91 e0       	ldi	r25, 0x01	; 1
    2034:	0e 94 59 05 	call	0xab2	; 0xab2 <dequeue>
    2038:	ec 01       	movw	r28, r24
    203a:	f8 01       	movw	r30, r16
    203c:	93 83       	std	Z+3, r25	; 0x03
    203e:	82 83       	std	Z+2, r24	; 0x02
    2040:	78 94       	sei
    2042:	6c 85       	ldd	r22, Y+12	; 0x0c
    2044:	7d 85       	ldd	r23, Y+13	; 0x0d
    2046:	4e 85       	ldd	r20, Y+14	; 0x0e
    2048:	5f 85       	ldd	r21, Y+15	; 0x0f
    204a:	8a 85       	ldd	r24, Y+10	; 0x0a
    204c:	9b 85       	ldd	r25, Y+11	; 0x0b
    204e:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <sync>
    2052:	8f b7       	in	r24, 0x3f	; 63
    2054:	f8 94       	cli
    2056:	68 e0       	ldi	r22, 0x08	; 8
    2058:	71 e0       	ldi	r23, 0x01	; 1
    205a:	ce 01       	movw	r24, r28
    205c:	0e 94 70 05 	call	0xae0	; 0xae0 <insert>
    2060:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <activeStack>
    2064:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <activeStack+0x1>
    2068:	01 90       	ld	r0, Z+
    206a:	f0 81       	ld	r31, Z
    206c:	e0 2d       	mov	r30, r0
    206e:	c2 81       	ldd	r28, Z+2	; 0x02
    2070:	d3 81       	ldd	r29, Z+3	; 0x03
    2072:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <msgQ>
    2076:	f0 91 41 01 	lds	r31, 0x0141	; 0x800141 <msgQ+0x1>
    207a:	30 97       	sbiw	r30, 0x00	; 0
    207c:	a1 f0       	breq	.+40     	; 0x20a6 <run+0x7e>
    207e:	20 97       	sbiw	r28, 0x00	; 0
    2080:	99 f2       	breq	.-90     	; 0x2028 <run>
    2082:	86 81       	ldd	r24, Z+6	; 0x06
    2084:	97 81       	ldd	r25, Z+7	; 0x07
    2086:	a0 85       	ldd	r26, Z+8	; 0x08
    2088:	b1 85       	ldd	r27, Z+9	; 0x09
    208a:	4e 81       	ldd	r20, Y+6	; 0x06
    208c:	5f 81       	ldd	r21, Y+7	; 0x07
    208e:	68 85       	ldd	r22, Y+8	; 0x08
    2090:	79 85       	ldd	r23, Y+9	; 0x09
    2092:	84 1b       	sub	r24, r20
    2094:	95 0b       	sbc	r25, r21
    2096:	a6 0b       	sbc	r26, r22
    2098:	b7 0b       	sbc	r27, r23
    209a:	18 16       	cp	r1, r24
    209c:	19 06       	cpc	r1, r25
    209e:	1a 06       	cpc	r1, r26
    20a0:	1b 06       	cpc	r1, r27
    20a2:	0c f0       	brlt	.+2      	; 0x20a6 <run+0x7e>
    20a4:	c1 cf       	rjmp	.-126    	; 0x2028 <run>
    20a6:	84 e0       	ldi	r24, 0x04	; 4
    20a8:	91 e0       	ldi	r25, 0x01	; 1
    20aa:	0e 94 84 05 	call	0xb08	; 0xb08 <pop>
    20ae:	66 e0       	ldi	r22, 0x06	; 6
    20b0:	71 e0       	ldi	r23, 0x01	; 1
    20b2:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <push>
    20b6:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <activeStack>
    20ba:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <activeStack+0x1>
    20be:	02 c0       	rjmp	.+4      	; 0x20c4 <run+0x9c>
    20c0:	a0 81       	ld	r26, Z
    20c2:	b1 81       	ldd	r27, Z+1	; 0x01
    20c4:	14 96       	adiw	r26, 0x04	; 4
    20c6:	ed 91       	ld	r30, X+
    20c8:	fc 91       	ld	r31, X
    20ca:	15 97       	sbiw	r26, 0x05	; 5
    20cc:	30 97       	sbiw	r30, 0x00	; 0
    20ce:	c1 f7       	brne	.-16     	; 0x20c0 <run+0x98>
    20d0:	cd 01       	movw	r24, r26
    20d2:	0e 94 d7 04 	call	0x9ae	; 0x9ae <dispatch>
    20d6:	a8 cf       	rjmp	.-176    	; 0x2028 <run>

000020d8 <install>:
    20d8:	fc 01       	movw	r30, r24
    20da:	42 31       	cpi	r20, 0x12	; 18
    20dc:	b8 f4       	brcc	.+46     	; 0x210c <install+0x34>
    20de:	9f b7       	in	r25, 0x3f	; 63
    20e0:	90 78       	andi	r25, 0x80	; 128
    20e2:	f8 94       	cli
    20e4:	50 e0       	ldi	r21, 0x00	; 0
    20e6:	44 0f       	add	r20, r20
    20e8:	55 1f       	adc	r21, r21
    20ea:	da 01       	movw	r26, r20
    20ec:	ac 5b       	subi	r26, 0xBC	; 188
    20ee:	be 4f       	sbci	r27, 0xFE	; 254
    20f0:	ed 93       	st	X+, r30
    20f2:	fc 93       	st	X, r31
    20f4:	da 01       	movw	r26, r20
    20f6:	a4 52       	subi	r26, 0x24	; 36
    20f8:	be 4f       	sbci	r27, 0xFE	; 254
    20fa:	6d 93       	st	X+, r22
    20fc:	7c 93       	st	X, r23
    20fe:	21 e0       	ldi	r18, 0x01	; 1
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	33 83       	std	Z+3, r19	; 0x03
    2104:	22 83       	std	Z+2, r18	; 0x02
    2106:	99 23       	and	r25, r25
    2108:	09 f0       	breq	.+2      	; 0x210c <install+0x34>
    210a:	78 94       	sei
    210c:	08 95       	ret

0000210e <tinytimber>:
    210e:	8c 01       	movw	r16, r24
    2110:	7b 01       	movw	r14, r22
    2112:	6a 01       	movw	r12, r20
    2114:	8f b7       	in	r24, 0x3f	; 63
    2116:	f8 94       	cli
    2118:	0e 94 38 04 	call	0x870	; 0x870 <initialize>
    211c:	78 94       	sei
    211e:	e1 14       	cp	r14, r1
    2120:	f1 04       	cpc	r15, r1
    2122:	41 f0       	breq	.+16     	; 0x2134 <tinytimber+0x26>
    2124:	20 e0       	ldi	r18, 0x00	; 0
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	a9 01       	movw	r20, r18
    212a:	60 e0       	ldi	r22, 0x00	; 0
    212c:	70 e0       	ldi	r23, 0x00	; 0
    212e:	cb 01       	movw	r24, r22
    2130:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <async>
    2134:	8f b7       	in	r24, 0x3f	; 63
    2136:	f8 94       	cli
    2138:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <idle>

0000213c <__divmodhi4>:
    213c:	97 fb       	bst	r25, 7
    213e:	07 2e       	mov	r0, r23
    2140:	16 f4       	brtc	.+4      	; 0x2146 <__divmodhi4+0xa>
    2142:	00 94       	com	r0
    2144:	07 d0       	rcall	.+14     	; 0x2154 <__divmodhi4_neg1>
    2146:	77 fd       	sbrc	r23, 7
    2148:	09 d0       	rcall	.+18     	; 0x215c <__divmodhi4_neg2>
    214a:	0e 94 b2 10 	call	0x2164	; 0x2164 <__udivmodhi4>
    214e:	07 fc       	sbrc	r0, 7
    2150:	05 d0       	rcall	.+10     	; 0x215c <__divmodhi4_neg2>
    2152:	3e f4       	brtc	.+14     	; 0x2162 <__divmodhi4_exit>

00002154 <__divmodhi4_neg1>:
    2154:	90 95       	com	r25
    2156:	81 95       	neg	r24
    2158:	9f 4f       	sbci	r25, 0xFF	; 255
    215a:	08 95       	ret

0000215c <__divmodhi4_neg2>:
    215c:	70 95       	com	r23
    215e:	61 95       	neg	r22
    2160:	7f 4f       	sbci	r23, 0xFF	; 255

00002162 <__divmodhi4_exit>:
    2162:	08 95       	ret

00002164 <__udivmodhi4>:
    2164:	aa 1b       	sub	r26, r26
    2166:	bb 1b       	sub	r27, r27
    2168:	51 e1       	ldi	r21, 0x11	; 17
    216a:	07 c0       	rjmp	.+14     	; 0x217a <__udivmodhi4_ep>

0000216c <__udivmodhi4_loop>:
    216c:	aa 1f       	adc	r26, r26
    216e:	bb 1f       	adc	r27, r27
    2170:	a6 17       	cp	r26, r22
    2172:	b7 07       	cpc	r27, r23
    2174:	10 f0       	brcs	.+4      	; 0x217a <__udivmodhi4_ep>
    2176:	a6 1b       	sub	r26, r22
    2178:	b7 0b       	sbc	r27, r23

0000217a <__udivmodhi4_ep>:
    217a:	88 1f       	adc	r24, r24
    217c:	99 1f       	adc	r25, r25
    217e:	5a 95       	dec	r21
    2180:	a9 f7       	brne	.-22     	; 0x216c <__udivmodhi4_loop>
    2182:	80 95       	com	r24
    2184:	90 95       	com	r25
    2186:	bc 01       	movw	r22, r24
    2188:	cd 01       	movw	r24, r26
    218a:	08 95       	ret

0000218c <setjmp>:
    218c:	dc 01       	movw	r26, r24
    218e:	2d 92       	st	X+, r2
    2190:	3d 92       	st	X+, r3
    2192:	4d 92       	st	X+, r4
    2194:	5d 92       	st	X+, r5
    2196:	6d 92       	st	X+, r6
    2198:	7d 92       	st	X+, r7
    219a:	8d 92       	st	X+, r8
    219c:	9d 92       	st	X+, r9
    219e:	ad 92       	st	X+, r10
    21a0:	bd 92       	st	X+, r11
    21a2:	cd 92       	st	X+, r12
    21a4:	dd 92       	st	X+, r13
    21a6:	ed 92       	st	X+, r14
    21a8:	fd 92       	st	X+, r15
    21aa:	0d 93       	st	X+, r16
    21ac:	1d 93       	st	X+, r17
    21ae:	cd 93       	st	X+, r28
    21b0:	dd 93       	st	X+, r29
    21b2:	ff 91       	pop	r31
    21b4:	ef 91       	pop	r30
    21b6:	8d b7       	in	r24, 0x3d	; 61
    21b8:	8d 93       	st	X+, r24
    21ba:	8e b7       	in	r24, 0x3e	; 62
    21bc:	8d 93       	st	X+, r24
    21be:	8f b7       	in	r24, 0x3f	; 63
    21c0:	8d 93       	st	X+, r24
    21c2:	ed 93       	st	X+, r30
    21c4:	fd 93       	st	X+, r31
    21c6:	88 27       	eor	r24, r24
    21c8:	99 27       	eor	r25, r25
    21ca:	09 94       	ijmp

000021cc <longjmp>:
    21cc:	dc 01       	movw	r26, r24
    21ce:	cb 01       	movw	r24, r22
    21d0:	81 30       	cpi	r24, 0x01	; 1
    21d2:	91 05       	cpc	r25, r1
    21d4:	81 1d       	adc	r24, r1
    21d6:	2d 90       	ld	r2, X+
    21d8:	3d 90       	ld	r3, X+
    21da:	4d 90       	ld	r4, X+
    21dc:	5d 90       	ld	r5, X+
    21de:	6d 90       	ld	r6, X+
    21e0:	7d 90       	ld	r7, X+
    21e2:	8d 90       	ld	r8, X+
    21e4:	9d 90       	ld	r9, X+
    21e6:	ad 90       	ld	r10, X+
    21e8:	bd 90       	ld	r11, X+
    21ea:	cd 90       	ld	r12, X+
    21ec:	dd 90       	ld	r13, X+
    21ee:	ed 90       	ld	r14, X+
    21f0:	fd 90       	ld	r15, X+
    21f2:	0d 91       	ld	r16, X+
    21f4:	1d 91       	ld	r17, X+
    21f6:	cd 91       	ld	r28, X+
    21f8:	dd 91       	ld	r29, X+
    21fa:	ed 91       	ld	r30, X+
    21fc:	fd 91       	ld	r31, X+
    21fe:	0d 90       	ld	r0, X+
    2200:	f8 94       	cli
    2202:	fe bf       	out	0x3e, r31	; 62
    2204:	0f be       	out	0x3f, r0	; 63
    2206:	ed bf       	out	0x3d, r30	; 61
    2208:	ed 91       	ld	r30, X+
    220a:	fd 91       	ld	r31, X+
    220c:	09 94       	ijmp

0000220e <_exit>:
    220e:	f8 94       	cli

00002210 <__stop_program>:
    2210:	ff cf       	rjmp	.-2      	; 0x2210 <__stop_program>
