
D0003E-lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  0000228a  0000231e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000228a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000353  00800136  00800136  00002354  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002354  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002384  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a8  00000000  00000000  000023c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000032d1  00000000  00000000  0000266c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001222  00000000  00000000  0000593d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000179b  00000000  00000000  00006b5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000dd8  00000000  00000000  000082fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a56  00000000  00000000  000090d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002b89  00000000  00000000  00009b2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000258  00000000  00000000  0000c6b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__vector_1>
       8:	0c 94 6d 06 	jmp	0xcda	; 0xcda <__vector_2>
       c:	0c 94 dc 06 	jmp	0xdb8	; 0xdb8 <__vector_3>
      10:	0c 94 4b 07 	jmp	0xe96	; 0xe96 <__vector_4>
      14:	0c 94 ba 07 	jmp	0xf74	; 0xf74 <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 25 0e 	jmp	0x1c4a	; 0x1c4a <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <__vector_9>
      28:	0c 94 29 08 	jmp	0x1052	; 0x1052 <__vector_10>
      2c:	0c 94 98 08 	jmp	0x1130	; 0x1130 <__vector_11>
      30:	0c 94 07 09 	jmp	0x120e	; 0x120e <__vector_12>
      34:	0c 94 76 09 	jmp	0x12ec	; 0x12ec <__vector_13>
      38:	0c 94 e5 09 	jmp	0x13ca	; 0x13ca <__vector_14>
      3c:	0c 94 54 0a 	jmp	0x14a8	; 0x14a8 <__vector_15>
      40:	0c 94 c3 0a 	jmp	0x1586	; 0x1586 <__vector_16>
      44:	0c 94 32 0b 	jmp	0x1664	; 0x1664 <__vector_17>
      48:	0c 94 a1 0b 	jmp	0x1742	; 0x1742 <__vector_18>
      4c:	0c 94 10 0c 	jmp	0x1820	; 0x1820 <__vector_19>
      50:	0c 94 7f 0c 	jmp	0x18fe	; 0x18fe <__vector_20>
      54:	0c 94 ee 0c 	jmp	0x19dc	; 0x19dc <__vector_21>
      58:	0c 94 5d 0d 	jmp	0x1aba	; 0x1aba <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	ea e8       	ldi	r30, 0x8A	; 138
      70:	f2 e2       	ldi	r31, 0x22	; 34
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	a6 33       	cpi	r26, 0x36	; 54
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	24 e0       	ldi	r18, 0x04	; 4
      80:	a6 e3       	ldi	r26, 0x36	; 54
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	a9 38       	cpi	r26, 0x89	; 137
      8a:	b2 07       	cpc	r27, r18
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 04 04 	call	0x808	; 0x808 <main>
      92:	0c 94 43 11 	jmp	0x2286	; 0x2286 <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <updateDisplay>:
        else {
            PORTE ^= (1 << PE4);
        }
    AFTER(MSEC(1000/freq), self, generatePulse, NULL);    // Calls itself according to freq
    }
      9a:	cf 92       	push	r12
      9c:	df 92       	push	r13
      9e:	ef 92       	push	r14
      a0:	ff 92       	push	r15
      a2:	0f 93       	push	r16
      a4:	1f 93       	push	r17
      a6:	fc 01       	movw	r30, r24
      a8:	80 85       	ldd	r24, Z+8	; 0x08
      aa:	91 85       	ldd	r25, Z+9	; 0x09
      ac:	89 2b       	or	r24, r25
      ae:	09 f1       	breq	.+66     	; 0xf2 <updateDisplay+0x58>
      b0:	84 81       	ldd	r24, Z+4	; 0x04
      b2:	95 81       	ldd	r25, Z+5	; 0x05
      b4:	6c 01       	movw	r12, r24
      b6:	cc 0c       	add	r12, r12
      b8:	dd 1c       	adc	r13, r13
      ba:	88 0f       	add	r24, r24
      bc:	99 1f       	adc	r25, r25
      be:	88 0f       	add	r24, r24
      c0:	99 1f       	adc	r25, r25
      c2:	88 0f       	add	r24, r24
      c4:	99 1f       	adc	r25, r25
      c6:	c8 0e       	add	r12, r24
      c8:	d9 1e       	adc	r13, r25
      ca:	02 85       	ldd	r16, Z+10	; 0x0a
      cc:	13 85       	ldd	r17, Z+11	; 0x0b
      ce:	84 e0       	ldi	r24, 0x04	; 4
      d0:	c8 0e       	add	r12, r24
      d2:	d1 1c       	adc	r13, r1
      d4:	0f 2e       	mov	r0, r31
      d6:	f7 ed       	ldi	r31, 0xD7	; 215
      d8:	ef 2e       	mov	r14, r31
      da:	f3 e0       	ldi	r31, 0x03	; 3
      dc:	ff 2e       	mov	r15, r31
      de:	f0 2d       	mov	r31, r0
      e0:	20 e0       	ldi	r18, 0x00	; 0
      e2:	30 e0       	ldi	r19, 0x00	; 0
      e4:	a9 01       	movw	r20, r18
      e6:	60 e0       	ldi	r22, 0x00	; 0
      e8:	70 e0       	ldi	r23, 0x00	; 0
      ea:	cb 01       	movw	r24, r22
      ec:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <async>
      f0:	1d c0       	rjmp	.+58     	; 0x12c <updateDisplay+0x92>
      f2:	24 81       	ldd	r18, Z+4	; 0x04
      f4:	35 81       	ldd	r19, Z+5	; 0x05
      f6:	02 85       	ldd	r16, Z+10	; 0x0a
      f8:	13 85       	ldd	r17, Z+11	; 0x0b
      fa:	69 01       	movw	r12, r18
      fc:	cc 0c       	add	r12, r12
      fe:	dd 1c       	adc	r13, r13
     100:	22 0f       	add	r18, r18
     102:	33 1f       	adc	r19, r19
     104:	22 0f       	add	r18, r18
     106:	33 1f       	adc	r19, r19
     108:	22 0f       	add	r18, r18
     10a:	33 1f       	adc	r19, r19
     10c:	c2 0e       	add	r12, r18
     10e:	d3 1e       	adc	r13, r19
     110:	0f 2e       	mov	r0, r31
     112:	f7 ed       	ldi	r31, 0xD7	; 215
     114:	ef 2e       	mov	r14, r31
     116:	f3 e0       	ldi	r31, 0x03	; 3
     118:	ff 2e       	mov	r15, r31
     11a:	f0 2d       	mov	r31, r0
     11c:	20 e0       	ldi	r18, 0x00	; 0
     11e:	30 e0       	ldi	r19, 0x00	; 0
     120:	a9 01       	movw	r20, r18
     122:	60 e0       	ldi	r22, 0x00	; 0
     124:	70 e0       	ldi	r23, 0x00	; 0
     126:	cb 01       	movw	r24, r22
     128:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <async>
     12c:	1f 91       	pop	r17
     12e:	0f 91       	pop	r16
     130:	ff 90       	pop	r15
     132:	ef 90       	pop	r14
     134:	df 90       	pop	r13
     136:	cf 90       	pop	r12
     138:	08 95       	ret

0000013a <increase>:
		ASYNC(self->lcd, printAt, self->currentFreq*10);
	}
}

// Increases frequency
void increase(Generators *self) {
     13a:	cf 92       	push	r12
     13c:	df 92       	push	r13
     13e:	ef 92       	push	r14
     140:	ff 92       	push	r15
     142:	0f 93       	push	r16
     144:	1f 93       	push	r17
	if (self->currentFreq != 99){
     146:	fc 01       	movw	r30, r24
     148:	24 81       	ldd	r18, Z+4	; 0x04
     14a:	35 81       	ldd	r19, Z+5	; 0x05
     14c:	23 36       	cpi	r18, 0x63	; 99
     14e:	31 05       	cpc	r19, r1
     150:	a9 f0       	breq	.+42     	; 0x17c <increase+0x42>
     152:	8c 01       	movw	r16, r24
		self->currentFreq++;
     154:	2f 5f       	subi	r18, 0xFF	; 255
     156:	3f 4f       	sbci	r19, 0xFF	; 255
     158:	35 83       	std	Z+5, r19	; 0x05
     15a:	24 83       	std	Z+4, r18	; 0x04
		ASYNC(self, updateDisplay, NULL);
     15c:	c1 2c       	mov	r12, r1
     15e:	d1 2c       	mov	r13, r1
     160:	0f 2e       	mov	r0, r31
     162:	fd e4       	ldi	r31, 0x4D	; 77
     164:	ef 2e       	mov	r14, r31
     166:	f0 e0       	ldi	r31, 0x00	; 0
     168:	ff 2e       	mov	r15, r31
     16a:	f0 2d       	mov	r31, r0
     16c:	20 e0       	ldi	r18, 0x00	; 0
     16e:	30 e0       	ldi	r19, 0x00	; 0
     170:	a9 01       	movw	r20, r18
     172:	60 e0       	ldi	r22, 0x00	; 0
     174:	70 e0       	ldi	r23, 0x00	; 0
     176:	cb 01       	movw	r24, r22
     178:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <async>
	}   
}
     17c:	1f 91       	pop	r17
     17e:	0f 91       	pop	r16
     180:	ff 90       	pop	r15
     182:	ef 90       	pop	r14
     184:	df 90       	pop	r13
     186:	cf 90       	pop	r12
     188:	08 95       	ret

0000018a <decrease>:

// The thing that happens when pulling joystick down
void decrease(Generators *self) {
     18a:	cf 92       	push	r12
     18c:	df 92       	push	r13
     18e:	ef 92       	push	r14
     190:	ff 92       	push	r15
     192:	0f 93       	push	r16
     194:	1f 93       	push	r17
    if (self->currentFreq > 0) {
     196:	fc 01       	movw	r30, r24
     198:	24 81       	ldd	r18, Z+4	; 0x04
     19a:	35 81       	ldd	r19, Z+5	; 0x05
     19c:	12 16       	cp	r1, r18
     19e:	13 06       	cpc	r1, r19
     1a0:	ac f4       	brge	.+42     	; 0x1cc <decrease+0x42>
     1a2:	8c 01       	movw	r16, r24
        self->currentFreq--;
     1a4:	21 50       	subi	r18, 0x01	; 1
     1a6:	31 09       	sbc	r19, r1
     1a8:	35 83       	std	Z+5, r19	; 0x05
     1aa:	24 83       	std	Z+4, r18	; 0x04
        ASYNC(self, updateDisplay, NULL);
     1ac:	c1 2c       	mov	r12, r1
     1ae:	d1 2c       	mov	r13, r1
     1b0:	0f 2e       	mov	r0, r31
     1b2:	fd e4       	ldi	r31, 0x4D	; 77
     1b4:	ef 2e       	mov	r14, r31
     1b6:	f0 e0       	ldi	r31, 0x00	; 0
     1b8:	ff 2e       	mov	r15, r31
     1ba:	f0 2d       	mov	r31, r0
     1bc:	20 e0       	ldi	r18, 0x00	; 0
     1be:	30 e0       	ldi	r19, 0x00	; 0
     1c0:	a9 01       	movw	r20, r18
     1c2:	60 e0       	ldi	r22, 0x00	; 0
     1c4:	70 e0       	ldi	r23, 0x00	; 0
     1c6:	cb 01       	movw	r24, r22
     1c8:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <async>
        // Uppdatara frekvens (osäker om man ska calla SYNC eller ASYNC)
    }
}
     1cc:	1f 91       	pop	r17
     1ce:	0f 91       	pop	r16
     1d0:	ff 90       	pop	r15
     1d2:	ef 90       	pop	r14
     1d4:	df 90       	pop	r13
     1d6:	cf 90       	pop	r12
     1d8:	08 95       	ret

000001da <press>:

// The thing that happens when pressing the joystick
void press(Generators *self) {
     1da:	cf 92       	push	r12
     1dc:	df 92       	push	r13
     1de:	ef 92       	push	r14
     1e0:	ff 92       	push	r15
     1e2:	0f 93       	push	r16
     1e4:	1f 93       	push	r17
     1e6:	fc 01       	movw	r30, r24
    if (self->currentFreq != 0) { // Maybe fix call later
     1e8:	84 81       	ldd	r24, Z+4	; 0x04
     1ea:	95 81       	ldd	r25, Z+5	; 0x05
     1ec:	00 97       	sbiw	r24, 0x00	; 0
     1ee:	b1 f0       	breq	.+44     	; 0x21c <__EEPROM_REGION_LENGTH__+0x1c>
        self->storedFreq = self->currentFreq;
     1f0:	97 83       	std	Z+7, r25	; 0x07
     1f2:	86 83       	std	Z+6, r24	; 0x06
        self->currentFreq = 0;
     1f4:	15 82       	std	Z+5, r1	; 0x05
     1f6:	14 82       	std	Z+4, r1	; 0x04
		ASYNC(self, updateDisplay, NULL);
     1f8:	c1 2c       	mov	r12, r1
     1fa:	d1 2c       	mov	r13, r1
     1fc:	0f 2e       	mov	r0, r31
     1fe:	fd e4       	ldi	r31, 0x4D	; 77
     200:	ef 2e       	mov	r14, r31
     202:	f0 e0       	ldi	r31, 0x00	; 0
     204:	ff 2e       	mov	r15, r31
     206:	f0 2d       	mov	r31, r0
     208:	8f 01       	movw	r16, r30
     20a:	20 e0       	ldi	r18, 0x00	; 0
     20c:	30 e0       	ldi	r19, 0x00	; 0
     20e:	a9 01       	movw	r20, r18
     210:	60 e0       	ldi	r22, 0x00	; 0
     212:	70 e0       	ldi	r23, 0x00	; 0
     214:	cb 01       	movw	r24, r22
     216:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <async>
     21a:	15 c0       	rjmp	.+42     	; 0x246 <__EEPROM_REGION_LENGTH__+0x46>
    }
    else {
        self->currentFreq = self->storedFreq;
     21c:	86 81       	ldd	r24, Z+6	; 0x06
     21e:	97 81       	ldd	r25, Z+7	; 0x07
     220:	95 83       	std	Z+5, r25	; 0x05
     222:	84 83       	std	Z+4, r24	; 0x04
		ASYNC(self, updateDisplay, NULL);
     224:	c1 2c       	mov	r12, r1
     226:	d1 2c       	mov	r13, r1
     228:	0f 2e       	mov	r0, r31
     22a:	fd e4       	ldi	r31, 0x4D	; 77
     22c:	ef 2e       	mov	r14, r31
     22e:	f0 e0       	ldi	r31, 0x00	; 0
     230:	ff 2e       	mov	r15, r31
     232:	f0 2d       	mov	r31, r0
     234:	8f 01       	movw	r16, r30
     236:	20 e0       	ldi	r18, 0x00	; 0
     238:	30 e0       	ldi	r19, 0x00	; 0
     23a:	a9 01       	movw	r20, r18
     23c:	60 e0       	ldi	r22, 0x00	; 0
     23e:	70 e0       	ldi	r23, 0x00	; 0
     240:	cb 01       	movw	r24, r22
     242:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <async>
    }
}
     246:	1f 91       	pop	r17
     248:	0f 91       	pop	r16
     24a:	ff 90       	pop	r15
     24c:	ef 90       	pop	r14
     24e:	df 90       	pop	r13
     250:	cf 90       	pop	r12
     252:	08 95       	ret

00000254 <increaseGui>:

int isRight = 1; // bool but int


// NOTE: The main purpose of this object is to distinguish current display segment and call methods accordingly
void increaseGui(Gui *self) {
     254:	cf 92       	push	r12
     256:	df 92       	push	r13
     258:	ef 92       	push	r14
     25a:	ff 92       	push	r15
     25c:	0f 93       	push	r16
     25e:	1f 93       	push	r17
    if (isRight) {
     260:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     264:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     268:	23 2b       	or	r18, r19
     26a:	a1 f0       	breq	.+40     	; 0x294 <increaseGui+0x40>
        ASYNC(self->genR, increase, NULL);
     26c:	fc 01       	movw	r30, r24
     26e:	06 81       	ldd	r16, Z+6	; 0x06
     270:	17 81       	ldd	r17, Z+7	; 0x07
     272:	c1 2c       	mov	r12, r1
     274:	d1 2c       	mov	r13, r1
     276:	0f 2e       	mov	r0, r31
     278:	fd e9       	ldi	r31, 0x9D	; 157
     27a:	ef 2e       	mov	r14, r31
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	ff 2e       	mov	r15, r31
     280:	f0 2d       	mov	r31, r0
     282:	20 e0       	ldi	r18, 0x00	; 0
     284:	30 e0       	ldi	r19, 0x00	; 0
     286:	a9 01       	movw	r20, r18
     288:	60 e0       	ldi	r22, 0x00	; 0
     28a:	70 e0       	ldi	r23, 0x00	; 0
     28c:	cb 01       	movw	r24, r22
     28e:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <async>
     292:	13 c0       	rjmp	.+38     	; 0x2ba <increaseGui+0x66>
    }
    else {
        ASYNC(self->genL, increase, NULL);
     294:	fc 01       	movw	r30, r24
     296:	04 81       	ldd	r16, Z+4	; 0x04
     298:	15 81       	ldd	r17, Z+5	; 0x05
     29a:	c1 2c       	mov	r12, r1
     29c:	d1 2c       	mov	r13, r1
     29e:	0f 2e       	mov	r0, r31
     2a0:	fd e9       	ldi	r31, 0x9D	; 157
     2a2:	ef 2e       	mov	r14, r31
     2a4:	f0 e0       	ldi	r31, 0x00	; 0
     2a6:	ff 2e       	mov	r15, r31
     2a8:	f0 2d       	mov	r31, r0
     2aa:	20 e0       	ldi	r18, 0x00	; 0
     2ac:	30 e0       	ldi	r19, 0x00	; 0
     2ae:	a9 01       	movw	r20, r18
     2b0:	60 e0       	ldi	r22, 0x00	; 0
     2b2:	70 e0       	ldi	r23, 0x00	; 0
     2b4:	cb 01       	movw	r24, r22
     2b6:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <async>
    }
}
     2ba:	1f 91       	pop	r17
     2bc:	0f 91       	pop	r16
     2be:	ff 90       	pop	r15
     2c0:	ef 90       	pop	r14
     2c2:	df 90       	pop	r13
     2c4:	cf 90       	pop	r12
     2c6:	08 95       	ret

000002c8 <decreaseGui>:

void decreaseGui(Gui *self) {
     2c8:	cf 92       	push	r12
     2ca:	df 92       	push	r13
     2cc:	ef 92       	push	r14
     2ce:	ff 92       	push	r15
     2d0:	0f 93       	push	r16
     2d2:	1f 93       	push	r17
    if (isRight) {
     2d4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     2d8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     2dc:	23 2b       	or	r18, r19
     2de:	a1 f0       	breq	.+40     	; 0x308 <decreaseGui+0x40>
        ASYNC(self->genR, decrease, NULL);
     2e0:	fc 01       	movw	r30, r24
     2e2:	06 81       	ldd	r16, Z+6	; 0x06
     2e4:	17 81       	ldd	r17, Z+7	; 0x07
     2e6:	c1 2c       	mov	r12, r1
     2e8:	d1 2c       	mov	r13, r1
     2ea:	0f 2e       	mov	r0, r31
     2ec:	f5 ec       	ldi	r31, 0xC5	; 197
     2ee:	ef 2e       	mov	r14, r31
     2f0:	f0 e0       	ldi	r31, 0x00	; 0
     2f2:	ff 2e       	mov	r15, r31
     2f4:	f0 2d       	mov	r31, r0
     2f6:	20 e0       	ldi	r18, 0x00	; 0
     2f8:	30 e0       	ldi	r19, 0x00	; 0
     2fa:	a9 01       	movw	r20, r18
     2fc:	60 e0       	ldi	r22, 0x00	; 0
     2fe:	70 e0       	ldi	r23, 0x00	; 0
     300:	cb 01       	movw	r24, r22
     302:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <async>
     306:	13 c0       	rjmp	.+38     	; 0x32e <decreaseGui+0x66>
    }
    else {
        ASYNC(self->genL, printAt, NULL);
     308:	fc 01       	movw	r30, r24
     30a:	04 81       	ldd	r16, Z+4	; 0x04
     30c:	15 81       	ldd	r17, Z+5	; 0x05
     30e:	c1 2c       	mov	r12, r1
     310:	d1 2c       	mov	r13, r1
     312:	0f 2e       	mov	r0, r31
     314:	f7 ed       	ldi	r31, 0xD7	; 215
     316:	ef 2e       	mov	r14, r31
     318:	f3 e0       	ldi	r31, 0x03	; 3
     31a:	ff 2e       	mov	r15, r31
     31c:	f0 2d       	mov	r31, r0
     31e:	20 e0       	ldi	r18, 0x00	; 0
     320:	30 e0       	ldi	r19, 0x00	; 0
     322:	a9 01       	movw	r20, r18
     324:	60 e0       	ldi	r22, 0x00	; 0
     326:	70 e0       	ldi	r23, 0x00	; 0
     328:	cb 01       	movw	r24, r22
     32a:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <async>
    }
}
     32e:	1f 91       	pop	r17
     330:	0f 91       	pop	r16
     332:	ff 90       	pop	r15
     334:	ef 90       	pop	r14
     336:	df 90       	pop	r13
     338:	cf 90       	pop	r12
     33a:	08 95       	ret

0000033c <switchGeneratorGui>:

void switchGeneratorGui(Gui *self) {
     33c:	cf 92       	push	r12
     33e:	df 92       	push	r13
     340:	ef 92       	push	r14
     342:	ff 92       	push	r15
     344:	0f 93       	push	r16
     346:	1f 93       	push	r17
    ASYNC(self->lcd, switchSegment, NULL);
     348:	fc 01       	movw	r30, r24
     34a:	00 85       	ldd	r16, Z+8	; 0x08
     34c:	11 85       	ldd	r17, Z+9	; 0x09
     34e:	c1 2c       	mov	r12, r1
     350:	d1 2c       	mov	r13, r1
     352:	0f 2e       	mov	r0, r31
     354:	f9 ec       	ldi	r31, 0xC9	; 201
     356:	ef 2e       	mov	r14, r31
     358:	f3 e0       	ldi	r31, 0x03	; 3
     35a:	ff 2e       	mov	r15, r31
     35c:	f0 2d       	mov	r31, r0
     35e:	20 e0       	ldi	r18, 0x00	; 0
     360:	30 e0       	ldi	r19, 0x00	; 0
     362:	a9 01       	movw	r20, r18
     364:	60 e0       	ldi	r22, 0x00	; 0
     366:	70 e0       	ldi	r23, 0x00	; 0
     368:	cb 01       	movw	r24, r22
     36a:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <async>
    isRight = !(isRight);
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     376:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     37a:	23 2b       	or	r18, r19
     37c:	11 f0       	breq	.+4      	; 0x382 <switchGeneratorGui+0x46>
     37e:	80 e0       	ldi	r24, 0x00	; 0
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     386:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
     38a:	1f 91       	pop	r17
     38c:	0f 91       	pop	r16
     38e:	ff 90       	pop	r15
     390:	ef 90       	pop	r14
     392:	df 90       	pop	r13
     394:	cf 90       	pop	r12
     396:	08 95       	ret

00000398 <pressGui>:

void pressGui(Gui *self) {
     398:	cf 92       	push	r12
     39a:	df 92       	push	r13
     39c:	ef 92       	push	r14
     39e:	ff 92       	push	r15
     3a0:	0f 93       	push	r16
     3a2:	1f 93       	push	r17
    if (isRight) {
     3a4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     3a8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     3ac:	23 2b       	or	r18, r19
     3ae:	a1 f0       	breq	.+40     	; 0x3d8 <pressGui+0x40>
        ASYNC(self->genR, press, NULL);
     3b0:	fc 01       	movw	r30, r24
     3b2:	06 81       	ldd	r16, Z+6	; 0x06
     3b4:	17 81       	ldd	r17, Z+7	; 0x07
     3b6:	c1 2c       	mov	r12, r1
     3b8:	d1 2c       	mov	r13, r1
     3ba:	0f 2e       	mov	r0, r31
     3bc:	fd ee       	ldi	r31, 0xED	; 237
     3be:	ef 2e       	mov	r14, r31
     3c0:	f0 e0       	ldi	r31, 0x00	; 0
     3c2:	ff 2e       	mov	r15, r31
     3c4:	f0 2d       	mov	r31, r0
     3c6:	20 e0       	ldi	r18, 0x00	; 0
     3c8:	30 e0       	ldi	r19, 0x00	; 0
     3ca:	a9 01       	movw	r20, r18
     3cc:	60 e0       	ldi	r22, 0x00	; 0
     3ce:	70 e0       	ldi	r23, 0x00	; 0
     3d0:	cb 01       	movw	r24, r22
     3d2:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <async>
     3d6:	13 c0       	rjmp	.+38     	; 0x3fe <pressGui+0x66>
    }
    else {
        ASYNC(self->genL, press, NULL);
     3d8:	fc 01       	movw	r30, r24
     3da:	04 81       	ldd	r16, Z+4	; 0x04
     3dc:	15 81       	ldd	r17, Z+5	; 0x05
     3de:	c1 2c       	mov	r12, r1
     3e0:	d1 2c       	mov	r13, r1
     3e2:	0f 2e       	mov	r0, r31
     3e4:	fd ee       	ldi	r31, 0xED	; 237
     3e6:	ef 2e       	mov	r14, r31
     3e8:	f0 e0       	ldi	r31, 0x00	; 0
     3ea:	ff 2e       	mov	r15, r31
     3ec:	f0 2d       	mov	r31, r0
     3ee:	20 e0       	ldi	r18, 0x00	; 0
     3f0:	30 e0       	ldi	r19, 0x00	; 0
     3f2:	a9 01       	movw	r20, r18
     3f4:	60 e0       	ldi	r22, 0x00	; 0
     3f6:	70 e0       	ldi	r23, 0x00	; 0
     3f8:	cb 01       	movw	r24, r22
     3fa:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <async>
    }
}
     3fe:	1f 91       	pop	r17
     400:	0f 91       	pop	r16
     402:	ff 90       	pop	r15
     404:	ef 90       	pop	r14
     406:	df 90       	pop	r13
     408:	cf 90       	pop	r12
     40a:	08 95       	ret

0000040c <Init>:
     40c:	e1 e6       	ldi	r30, 0x61	; 97
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	80 e8       	ldi	r24, 0x80	; 128
     412:	80 83       	st	Z, r24
     414:	10 82       	st	Z, r1
     416:	9f e0       	ldi	r25, 0x0F	; 15
     418:	90 93 e7 00 	sts	0x00E7, r25	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
     41c:	97 eb       	ldi	r25, 0xB7	; 183
     41e:	90 93 e5 00 	sts	0x00E5, r25	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
     422:	97 e0       	ldi	r25, 0x07	; 7
     424:	90 93 e6 00 	sts	0x00E6, r25	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
     428:	90 ec       	ldi	r25, 0xC0	; 192
     42a:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
     42e:	90 ed       	ldi	r25, 0xD0	; 208
     430:	95 b9       	out	0x05, r25	; 5
     432:	84 b9       	out	0x04, r24	; 4
     434:	8c e0       	ldi	r24, 0x0C	; 12
     436:	8e b9       	out	0x0e, r24	; 14
     438:	8d b9       	out	0x0d, r24	; 13
     43a:	ec e6       	ldi	r30, 0x6C	; 108
     43c:	f0 e0       	ldi	r31, 0x00	; 0
     43e:	80 81       	ld	r24, Z
     440:	80 6d       	ori	r24, 0xD0	; 208
     442:	80 83       	st	Z, r24
     444:	eb e6       	ldi	r30, 0x6B	; 107
     446:	f0 e0       	ldi	r31, 0x00	; 0
     448:	80 81       	ld	r24, Z
     44a:	8c 60       	ori	r24, 0x0C	; 12
     44c:	80 83       	st	Z, r24
     44e:	8d b3       	in	r24, 0x1d	; 29
     450:	80 6c       	ori	r24, 0xC0	; 192
     452:	8d bb       	out	0x1d, r24	; 29
     454:	08 95       	ret

00000456 <FreqChange>:
#include <avr/io.h>
#include "InteruptHandler.h"
#include "TinyTimber.h"
#include "Joystick.h"

void FreqChange(InteruptHandler *self){
     456:	cf 92       	push	r12
     458:	df 92       	push	r13
     45a:	ef 92       	push	r14
     45c:	ff 92       	push	r15
     45e:	0f 93       	push	r16
     460:	1f 93       	push	r17
    ASYNC(self->Joystick, joystickVert, NULL);
     462:	fc 01       	movw	r30, r24
     464:	04 81       	ldd	r16, Z+4	; 0x04
     466:	15 81       	ldd	r17, Z+5	; 0x05
     468:	c1 2c       	mov	r12, r1
     46a:	d1 2c       	mov	r13, r1
     46c:	0f 2e       	mov	r0, r31
     46e:	fb e6       	ldi	r31, 0x6B	; 107
     470:	ef 2e       	mov	r14, r31
     472:	f2 e0       	ldi	r31, 0x02	; 2
     474:	ff 2e       	mov	r15, r31
     476:	f0 2d       	mov	r31, r0
     478:	20 e0       	ldi	r18, 0x00	; 0
     47a:	30 e0       	ldi	r19, 0x00	; 0
     47c:	a9 01       	movw	r20, r18
     47e:	60 e0       	ldi	r22, 0x00	; 0
     480:	70 e0       	ldi	r23, 0x00	; 0
     482:	cb 01       	movw	r24, r22
     484:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <async>
}
     488:	1f 91       	pop	r17
     48a:	0f 91       	pop	r16
     48c:	ff 90       	pop	r15
     48e:	ef 90       	pop	r14
     490:	df 90       	pop	r13
     492:	cf 90       	pop	r12
     494:	08 95       	ret

00000496 <genSwitch>:

void genSwitch(InteruptHandler *self) {
     496:	cf 92       	push	r12
     498:	df 92       	push	r13
     49a:	ef 92       	push	r14
     49c:	ff 92       	push	r15
     49e:	0f 93       	push	r16
     4a0:	1f 93       	push	r17
	ASYNC(self->Joystick, joystickHor, NULL);
     4a2:	fc 01       	movw	r30, r24
     4a4:	04 81       	ldd	r16, Z+4	; 0x04
     4a6:	15 81       	ldd	r17, Z+5	; 0x05
     4a8:	c1 2c       	mov	r12, r1
     4aa:	d1 2c       	mov	r13, r1
     4ac:	0f 2e       	mov	r0, r31
     4ae:	fe ed       	ldi	r31, 0xDE	; 222
     4b0:	ef 2e       	mov	r14, r31
     4b2:	f2 e0       	ldi	r31, 0x02	; 2
     4b4:	ff 2e       	mov	r15, r31
     4b6:	f0 2d       	mov	r31, r0
     4b8:	20 e0       	ldi	r18, 0x00	; 0
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	a9 01       	movw	r20, r18
     4be:	60 e0       	ldi	r22, 0x00	; 0
     4c0:	70 e0       	ldi	r23, 0x00	; 0
     4c2:	cb 01       	movw	r24, r22
     4c4:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <async>
}
     4c8:	1f 91       	pop	r17
     4ca:	0f 91       	pop	r16
     4cc:	ff 90       	pop	r15
     4ce:	ef 90       	pop	r14
     4d0:	df 90       	pop	r13
     4d2:	cf 90       	pop	r12
     4d4:	08 95       	ret

000004d6 <joystickVert>:
	if (!(PINB & (1 << PB6))) {	// Up
		self->hold = true;
		ASYNC(self->gui, increaseGui, NULL);
		AFTER(MSEC(100), self, joystickVert, NULL);
	}
}
     4d6:	cf 92       	push	r12
     4d8:	df 92       	push	r13
     4da:	ef 92       	push	r14
     4dc:	ff 92       	push	r15
     4de:	0f 93       	push	r16
     4e0:	1f 93       	push	r17
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	ec 01       	movw	r28, r24
     4e8:	8e 81       	ldd	r24, Y+6	; 0x06
     4ea:	81 11       	cpse	r24, r1
     4ec:	24 c0       	rjmp	.+72     	; 0x536 <__stack+0x37>
     4ee:	1f 99       	sbic	0x03, 7	; 3
     4f0:	22 c0       	rjmp	.+68     	; 0x536 <__stack+0x37>
     4f2:	0c 81       	ldd	r16, Y+4	; 0x04
     4f4:	1d 81       	ldd	r17, Y+5	; 0x05
     4f6:	c1 2c       	mov	r12, r1
     4f8:	d1 2c       	mov	r13, r1
     4fa:	0f 2e       	mov	r0, r31
     4fc:	f4 e6       	ldi	r31, 0x64	; 100
     4fe:	ef 2e       	mov	r14, r31
     500:	f1 e0       	ldi	r31, 0x01	; 1
     502:	ff 2e       	mov	r15, r31
     504:	f0 2d       	mov	r31, r0
     506:	20 e0       	ldi	r18, 0x00	; 0
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	a9 01       	movw	r20, r18
     50c:	60 e0       	ldi	r22, 0x00	; 0
     50e:	70 e0       	ldi	r23, 0x00	; 0
     510:	cb 01       	movw	r24, r22
     512:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <async>
     516:	0f 2e       	mov	r0, r31
     518:	fb e6       	ldi	r31, 0x6B	; 107
     51a:	ef 2e       	mov	r14, r31
     51c:	f2 e0       	ldi	r31, 0x02	; 2
     51e:	ff 2e       	mov	r15, r31
     520:	f0 2d       	mov	r31, r0
     522:	8e 01       	movw	r16, r28
     524:	20 e0       	ldi	r18, 0x00	; 0
     526:	30 e0       	ldi	r19, 0x00	; 0
     528:	a9 01       	movw	r20, r18
     52a:	65 e3       	ldi	r22, 0x35	; 53
     52c:	7c e0       	ldi	r23, 0x0C	; 12
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <async>
     536:	1e 99       	sbic	0x03, 6	; 3
     538:	22 c0       	rjmp	.+68     	; 0x57e <__stack+0x7f>
     53a:	0c 81       	ldd	r16, Y+4	; 0x04
     53c:	1d 81       	ldd	r17, Y+5	; 0x05
     53e:	c1 2c       	mov	r12, r1
     540:	d1 2c       	mov	r13, r1
     542:	0f 2e       	mov	r0, r31
     544:	fa e2       	ldi	r31, 0x2A	; 42
     546:	ef 2e       	mov	r14, r31
     548:	f1 e0       	ldi	r31, 0x01	; 1
     54a:	ff 2e       	mov	r15, r31
     54c:	f0 2d       	mov	r31, r0
     54e:	20 e0       	ldi	r18, 0x00	; 0
     550:	30 e0       	ldi	r19, 0x00	; 0
     552:	a9 01       	movw	r20, r18
     554:	60 e0       	ldi	r22, 0x00	; 0
     556:	70 e0       	ldi	r23, 0x00	; 0
     558:	cb 01       	movw	r24, r22
     55a:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <async>
     55e:	0f 2e       	mov	r0, r31
     560:	fb e6       	ldi	r31, 0x6B	; 107
     562:	ef 2e       	mov	r14, r31
     564:	f2 e0       	ldi	r31, 0x02	; 2
     566:	ff 2e       	mov	r15, r31
     568:	f0 2d       	mov	r31, r0
     56a:	8e 01       	movw	r16, r28
     56c:	20 e0       	ldi	r18, 0x00	; 0
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	a9 01       	movw	r20, r18
     572:	65 e3       	ldi	r22, 0x35	; 53
     574:	7c e0       	ldi	r23, 0x0C	; 12
     576:	80 e0       	ldi	r24, 0x00	; 0
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <async>
     57e:	1c 99       	sbic	0x03, 4	; 3
     580:	12 c0       	rjmp	.+36     	; 0x5a6 <__stack+0xa7>
     582:	0c 81       	ldd	r16, Y+4	; 0x04
     584:	1d 81       	ldd	r17, Y+5	; 0x05
     586:	c1 2c       	mov	r12, r1
     588:	d1 2c       	mov	r13, r1
     58a:	0f 2e       	mov	r0, r31
     58c:	fc ec       	ldi	r31, 0xCC	; 204
     58e:	ef 2e       	mov	r14, r31
     590:	f1 e0       	ldi	r31, 0x01	; 1
     592:	ff 2e       	mov	r15, r31
     594:	f0 2d       	mov	r31, r0
     596:	20 e0       	ldi	r18, 0x00	; 0
     598:	30 e0       	ldi	r19, 0x00	; 0
     59a:	a9 01       	movw	r20, r18
     59c:	60 e0       	ldi	r22, 0x00	; 0
     59e:	70 e0       	ldi	r23, 0x00	; 0
     5a0:	cb 01       	movw	r24, r22
     5a2:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <async>
     5a6:	80 e0       	ldi	r24, 0x00	; 0
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	1f 91       	pop	r17
     5b0:	0f 91       	pop	r16
     5b2:	ff 90       	pop	r15
     5b4:	ef 90       	pop	r14
     5b6:	df 90       	pop	r13
     5b8:	cf 90       	pop	r12
     5ba:	08 95       	ret

000005bc <joystickHor>:
	}
	return 0;
}


int joystickHor(Joystick *self) {
     5bc:	cf 92       	push	r12
     5be:	df 92       	push	r13
     5c0:	ef 92       	push	r14
     5c2:	ff 92       	push	r15
     5c4:	0f 93       	push	r16
     5c6:	1f 93       	push	r17
	if (!(PINE & (1 << PE3)) || (!(PINE & (1 << PE2)))) {	// Både och???
     5c8:	63 9b       	sbis	0x0c, 3	; 12
     5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <joystickHor+0x14>
     5cc:	62 99       	sbic	0x0c, 2	; 12
     5ce:	13 c0       	rjmp	.+38     	; 0x5f6 <joystickHor+0x3a>
     5d0:	fc 01       	movw	r30, r24
		ASYNC(self->gui, switchGeneratorGui, NULL);
     5d2:	04 81       	ldd	r16, Z+4	; 0x04
     5d4:	15 81       	ldd	r17, Z+5	; 0x05
     5d6:	c1 2c       	mov	r12, r1
     5d8:	d1 2c       	mov	r13, r1
     5da:	0f 2e       	mov	r0, r31
     5dc:	fe e9       	ldi	r31, 0x9E	; 158
     5de:	ef 2e       	mov	r14, r31
     5e0:	f1 e0       	ldi	r31, 0x01	; 1
     5e2:	ff 2e       	mov	r15, r31
     5e4:	f0 2d       	mov	r31, r0
     5e6:	20 e0       	ldi	r18, 0x00	; 0
     5e8:	30 e0       	ldi	r19, 0x00	; 0
     5ea:	a9 01       	movw	r20, r18
     5ec:	60 e0       	ldi	r22, 0x00	; 0
     5ee:	70 e0       	ldi	r23, 0x00	; 0
     5f0:	cb 01       	movw	r24, r22
     5f2:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <async>
	}
}
     5f6:	1f 91       	pop	r17
     5f8:	0f 91       	pop	r16
     5fa:	ff 90       	pop	r15
     5fc:	ef 90       	pop	r14
     5fe:	df 90       	pop	r13
     600:	cf 90       	pop	r12
     602:	08 95       	ret

00000604 <displayChar>:
    [9] = {0b0001, 0b0101, 0b1011, 0b0001},
    [10] = {0b1001, 0b1111, 0b1111, 0b1111},// This spot is for the "invalid" character (also used for reset)
};
 
//Help function for writeChar (fills array with elements that match character)
void displayChar(char c, bool odd, volatile uint8_t *address) {
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	00 d0       	rcall	.+0      	; 0x60a <displayChar+0x6>
     60a:	00 d0       	rcall	.+0      	; 0x60c <displayChar+0x8>
     60c:	cd b7       	in	r28, 0x3d	; 61
     60e:	de b7       	in	r29, 0x3e	; 62
     610:	da 01       	movw	r26, r20
    uint8_t array[4];
    if (c < '0' || c > '9') {	// Invalid character
     612:	90 ed       	ldi	r25, 0xD0	; 208
     614:	98 0f       	add	r25, r24
     616:	9a 30       	cpi	r25, 0x0A	; 10
     618:	80 f4       	brcc	.+32     	; 0x63a <displayChar+0x36>
     61a:	20 e0       	ldi	r18, 0x00	; 0
     61c:	30 e0       	ldi	r19, 0x00	; 0
     61e:	28 c0       	rjmp	.+80     	; 0x670 <displayChar+0x6c>
        for (int i = 0; i < 4; i++) {
            array[i] = characters[10][i];
     620:	fc 01       	movw	r30, r24
     622:	e6 5f       	subi	r30, 0xF6	; 246
     624:	fe 4f       	sbci	r31, 0xFE	; 254
     626:	20 a5       	ldd	r18, Z+40	; 0x28
     628:	e1 e0       	ldi	r30, 0x01	; 1
     62a:	f0 e0       	ldi	r31, 0x00	; 0
     62c:	ec 0f       	add	r30, r28
     62e:	fd 1f       	adc	r31, r29
     630:	e8 0f       	add	r30, r24
     632:	f9 1f       	adc	r31, r25
     634:	20 83       	st	Z, r18
 
//Help function for writeChar (fills array with elements that match character)
void displayChar(char c, bool odd, volatile uint8_t *address) {
    uint8_t array[4];
    if (c < '0' || c > '9') {	// Invalid character
        for (int i = 0; i < 4; i++) {
     636:	01 96       	adiw	r24, 0x01	; 1
     638:	02 c0       	rjmp	.+4      	; 0x63e <displayChar+0x3a>
     63a:	80 e0       	ldi	r24, 0x00	; 0
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	84 30       	cpi	r24, 0x04	; 4
     640:	91 05       	cpc	r25, r1
     642:	74 f3       	brlt	.-36     	; 0x620 <displayChar+0x1c>
     644:	18 c0       	rjmp	.+48     	; 0x676 <displayChar+0x72>
            array[i] = characters[10][i];
        }
    }
    else {						// Valid character
        for (int i = 0; i < 4; i++) {
            array[i] = characters[c-48][i];
     646:	e8 2f       	mov	r30, r24
     648:	f0 e0       	ldi	r31, 0x00	; 0
     64a:	f0 97       	sbiw	r30, 0x30	; 48
     64c:	ee 0f       	add	r30, r30
     64e:	ff 1f       	adc	r31, r31
     650:	ee 0f       	add	r30, r30
     652:	ff 1f       	adc	r31, r31
     654:	e6 5f       	subi	r30, 0xF6	; 246
     656:	fe 4f       	sbci	r31, 0xFE	; 254
     658:	e2 0f       	add	r30, r18
     65a:	f3 1f       	adc	r31, r19
     65c:	90 81       	ld	r25, Z
     65e:	e1 e0       	ldi	r30, 0x01	; 1
     660:	f0 e0       	ldi	r31, 0x00	; 0
     662:	ec 0f       	add	r30, r28
     664:	fd 1f       	adc	r31, r29
     666:	e2 0f       	add	r30, r18
     668:	f3 1f       	adc	r31, r19
     66a:	90 83       	st	Z, r25
        for (int i = 0; i < 4; i++) {
            array[i] = characters[10][i];
        }
    }
    else {						// Valid character
        for (int i = 0; i < 4; i++) {
     66c:	2f 5f       	subi	r18, 0xFF	; 255
     66e:	3f 4f       	sbci	r19, 0xFF	; 255
     670:	24 30       	cpi	r18, 0x04	; 4
     672:	31 05       	cpc	r19, r1
     674:	44 f3       	brlt	.-48     	; 0x646 <displayChar+0x42>
            array[i] = characters[c-48][i];
        }
    }
    if (odd) {					// If odd digit, shifts in order to set correct digit
     676:	61 11       	cpse	r22, r1
     678:	0d c0       	rjmp	.+26     	; 0x694 <displayChar+0x90>
     67a:	11 c0       	rjmp	.+34     	; 0x69e <displayChar+0x9a>
        for (int i = 0; i < 4; i++) {
            array[i] <<= 4;
     67c:	e1 e0       	ldi	r30, 0x01	; 1
     67e:	f0 e0       	ldi	r31, 0x00	; 0
     680:	ec 0f       	add	r30, r28
     682:	fd 1f       	adc	r31, r29
     684:	e8 0f       	add	r30, r24
     686:	f9 1f       	adc	r31, r25
     688:	20 81       	ld	r18, Z
     68a:	22 95       	swap	r18
     68c:	20 7f       	andi	r18, 0xF0	; 240
     68e:	20 83       	st	Z, r18
        for (int i = 0; i < 4; i++) {
            array[i] = characters[c-48][i];
        }
    }
    if (odd) {					// If odd digit, shifts in order to set correct digit
        for (int i = 0; i < 4; i++) {
     690:	01 96       	adiw	r24, 0x01	; 1
     692:	02 c0       	rjmp	.+4      	; 0x698 <displayChar+0x94>
     694:	80 e0       	ldi	r24, 0x00	; 0
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	84 30       	cpi	r24, 0x04	; 4
     69a:	91 05       	cpc	r25, r1
     69c:	7c f3       	brlt	.-34     	; 0x67c <displayChar+0x78>
            array[i] <<= 4;
        }
    }							// This part sets the character in needed registers
    *address |= array[0];		// (K, -, -, A)
     69e:	9c 91       	ld	r25, X
     6a0:	89 81       	ldd	r24, Y+1	; 0x01
     6a2:	89 2b       	or	r24, r25
     6a4:	8c 93       	st	X, r24
    *(address+5) |= array[1];	// (J, F, H, B)
     6a6:	15 96       	adiw	r26, 0x05	; 5
     6a8:	9c 91       	ld	r25, X
     6aa:	15 97       	sbiw	r26, 0x05	; 5
     6ac:	8a 81       	ldd	r24, Y+2	; 0x02
     6ae:	89 2b       	or	r24, r25
     6b0:	15 96       	adiw	r26, 0x05	; 5
     6b2:	8c 93       	st	X, r24
     6b4:	15 97       	sbiw	r26, 0x05	; 5
    *(address+10) |= array[2];	// (L, E, G, C)
     6b6:	1a 96       	adiw	r26, 0x0a	; 10
     6b8:	9c 91       	ld	r25, X
     6ba:	1a 97       	sbiw	r26, 0x0a	; 10
     6bc:	8b 81       	ldd	r24, Y+3	; 0x03
     6be:	89 2b       	or	r24, r25
     6c0:	1a 96       	adiw	r26, 0x0a	; 10
     6c2:	8c 93       	st	X, r24
     6c4:	1a 97       	sbiw	r26, 0x0a	; 10
    *(address+15) |= array[3];	// (M, P, N, D)
     6c6:	1f 96       	adiw	r26, 0x0f	; 15
     6c8:	9c 91       	ld	r25, X
     6ca:	1f 97       	sbiw	r26, 0x0f	; 15
     6cc:	8c 81       	ldd	r24, Y+4	; 0x04
     6ce:	89 2b       	or	r24, r25
     6d0:	1f 96       	adiw	r26, 0x0f	; 15
     6d2:	8c 93       	st	X, r24
}
     6d4:	0f 90       	pop	r0
     6d6:	0f 90       	pop	r0
     6d8:	0f 90       	pop	r0
     6da:	0f 90       	pop	r0
     6dc:	df 91       	pop	r29
     6de:	cf 91       	pop	r28
     6e0:	08 95       	ret

000006e2 <removeOldChar>:
 
 
// Removes previous character at given location
void removeOldChar(bool odd, volatile uint8_t *address) {
    // AND:s 0 on the parts that need to be reset
    if (odd) {
     6e2:	88 23       	and	r24, r24
     6e4:	91 f0       	breq	.+36     	; 0x70a <removeOldChar+0x28>
        *address &= 0b00001001;
     6e6:	fb 01       	movw	r30, r22
     6e8:	80 81       	ld	r24, Z
     6ea:	89 70       	andi	r24, 0x09	; 9
     6ec:	80 83       	st	Z, r24
        for (int i = 5; i < 20; i += 5) {
     6ee:	85 e0       	ldi	r24, 0x05	; 5
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	07 c0       	rjmp	.+14     	; 0x702 <removeOldChar+0x20>
            *(address + i) &= 0b00001111;
     6f4:	fb 01       	movw	r30, r22
     6f6:	e8 0f       	add	r30, r24
     6f8:	f9 1f       	adc	r31, r25
     6fa:	20 81       	ld	r18, Z
     6fc:	2f 70       	andi	r18, 0x0F	; 15
     6fe:	20 83       	st	Z, r18
// Removes previous character at given location
void removeOldChar(bool odd, volatile uint8_t *address) {
    // AND:s 0 on the parts that need to be reset
    if (odd) {
        *address &= 0b00001001;
        for (int i = 5; i < 20; i += 5) {
     700:	05 96       	adiw	r24, 0x05	; 5
     702:	84 31       	cpi	r24, 0x14	; 20
     704:	91 05       	cpc	r25, r1
     706:	b4 f3       	brlt	.-20     	; 0x6f4 <removeOldChar+0x12>
     708:	08 95       	ret
            *(address + i) &= 0b00001111;
        }
    }
    else {
        *address &= 0b10010000;
     70a:	fb 01       	movw	r30, r22
     70c:	80 81       	ld	r24, Z
     70e:	80 79       	andi	r24, 0x90	; 144
     710:	80 83       	st	Z, r24
        for (int i = 5; i < 20; i += 5) {
     712:	85 e0       	ldi	r24, 0x05	; 5
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	07 c0       	rjmp	.+14     	; 0x726 <removeOldChar+0x44>
            *(address + i) &= 0b11110000;
     718:	fb 01       	movw	r30, r22
     71a:	e8 0f       	add	r30, r24
     71c:	f9 1f       	adc	r31, r25
     71e:	20 81       	ld	r18, Z
     720:	20 7f       	andi	r18, 0xF0	; 240
     722:	20 83       	st	Z, r18
            *(address + i) &= 0b00001111;
        }
    }
    else {
        *address &= 0b10010000;
        for (int i = 5; i < 20; i += 5) {
     724:	05 96       	adiw	r24, 0x05	; 5
     726:	84 31       	cpi	r24, 0x14	; 20
     728:	91 05       	cpc	r25, r1
     72a:	b4 f3       	brlt	.-20     	; 0x718 <removeOldChar+0x36>
     72c:	08 95       	ret

0000072e <writeChar>:
        }
    }
}
 
// Takes character ('0' - '9') and a position (0 - 5 (NOT CHECKED)) and prints it on the screen
void writeChar(char c, int pos) {
     72e:	1f 93       	push	r17
     730:	cf 93       	push	r28
     732:	df 93       	push	r29
     734:	18 2f       	mov	r17, r24
    volatile uint8_t *address = &LCDDR0;	// Create pointer to start register
    if (pos % 2 == 0) {	// Even
     736:	60 fd       	sbrc	r22, 0
     738:	14 c0       	rjmp	.+40     	; 0x762 <writeChar+0x34>
        address += pos/2;					// Change address according to position
     73a:	ab 01       	movw	r20, r22
     73c:	77 23       	and	r23, r23
     73e:	14 f4       	brge	.+4      	; 0x744 <writeChar+0x16>
     740:	4f 5f       	subi	r20, 0xFF	; 255
     742:	5f 4f       	sbci	r21, 0xFF	; 255
     744:	55 95       	asr	r21
     746:	47 95       	ror	r20
     748:	ea 01       	movw	r28, r20
     74a:	c4 51       	subi	r28, 0x14	; 20
     74c:	df 4f       	sbci	r29, 0xFF	; 255
        removeOldChar(false, address);
     74e:	be 01       	movw	r22, r28
     750:	80 e0       	ldi	r24, 0x00	; 0
     752:	0e 94 71 03 	call	0x6e2	; 0x6e2 <removeOldChar>
        displayChar(c, false, address);
     756:	ae 01       	movw	r20, r28
     758:	60 e0       	ldi	r22, 0x00	; 0
     75a:	81 2f       	mov	r24, r17
     75c:	0e 94 02 03 	call	0x604	; 0x604 <displayChar>
     760:	14 c0       	rjmp	.+40     	; 0x78a <writeChar+0x5c>
    }
    else {				// Odd
        address += (pos - 1) / 2;			// Change address according to position
     762:	61 50       	subi	r22, 0x01	; 1
     764:	71 09       	sbc	r23, r1
     766:	ab 01       	movw	r20, r22
     768:	12 f4       	brpl	.+4      	; 0x76e <writeChar+0x40>
     76a:	4f 5f       	subi	r20, 0xFF	; 255
     76c:	5f 4f       	sbci	r21, 0xFF	; 255
     76e:	55 95       	asr	r21
     770:	47 95       	ror	r20
     772:	ea 01       	movw	r28, r20
     774:	c4 51       	subi	r28, 0x14	; 20
     776:	df 4f       	sbci	r29, 0xFF	; 255
        removeOldChar(true, address);
     778:	be 01       	movw	r22, r28
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <removeOldChar>
        displayChar(c, true, address);
     780:	ae 01       	movw	r20, r28
     782:	61 e0       	ldi	r22, 0x01	; 1
     784:	81 2f       	mov	r24, r17
     786:	0e 94 02 03 	call	0x604	; 0x604 <displayChar>
    }
};
     78a:	df 91       	pop	r29
     78c:	cf 91       	pop	r28
     78e:	1f 91       	pop	r17
     790:	08 95       	ret

00000792 <switchSegment>:

// Switches between two segments 
void switchSegment() {
    LCDDR13 = !(LCDDR13 & 1);
     792:	e9 ef       	ldi	r30, 0xF9	; 249
     794:	f0 e0       	ldi	r31, 0x00	; 0
     796:	90 81       	ld	r25, Z
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	98 27       	eor	r25, r24
     79c:	91 70       	andi	r25, 0x01	; 1
     79e:	90 83       	st	Z, r25
    LCDDR18 = !(LCDDR18 & 1);
     7a0:	ee ef       	ldi	r30, 0xFE	; 254
     7a2:	f0 e0       	ldi	r31, 0x00	; 0
     7a4:	90 81       	ld	r25, Z
     7a6:	89 27       	eor	r24, r25
     7a8:	81 70       	andi	r24, 0x01	; 1
     7aa:	80 83       	st	Z, r24
     7ac:	08 95       	ret

000007ae <printAt>:
}
 
// Displays last two digits of num in pos and pos+1
int  printAt(Lcd *self, int input) {  // [pos, num]
     7ae:	ef 92       	push	r14
     7b0:	ff 92       	push	r15
     7b2:	0f 93       	push	r16
     7b4:	1f 93       	push	r17
     7b6:	cf 93       	push	r28
     7b8:	df 93       	push	r29
     7ba:	cb 01       	movw	r24, r22
    int pp = input % 10;
     7bc:	0a e0       	ldi	r16, 0x0A	; 10
     7be:	10 e0       	ldi	r17, 0x00	; 0
     7c0:	b8 01       	movw	r22, r16
     7c2:	0e 94 da 10 	call	0x21b4	; 0x21b4 <__divmodhi4>
     7c6:	7b 01       	movw	r14, r22
     7c8:	ec 01       	movw	r28, r24
    int num = input / 10;
    writeChar((num % 100) / 10 + '0', pp);
     7ca:	cb 01       	movw	r24, r22
     7cc:	64 e6       	ldi	r22, 0x64	; 100
     7ce:	70 e0       	ldi	r23, 0x00	; 0
     7d0:	0e 94 da 10 	call	0x21b4	; 0x21b4 <__divmodhi4>
     7d4:	b8 01       	movw	r22, r16
     7d6:	0e 94 da 10 	call	0x21b4	; 0x21b4 <__divmodhi4>
     7da:	86 2f       	mov	r24, r22
     7dc:	be 01       	movw	r22, r28
     7de:	80 5d       	subi	r24, 0xD0	; 208
     7e0:	0e 94 97 03 	call	0x72e	; 0x72e <writeChar>
    pp++;
     7e4:	21 96       	adiw	r28, 0x01	; 1
    writeChar( num % 10 + '0', pp);
     7e6:	c7 01       	movw	r24, r14
     7e8:	b8 01       	movw	r22, r16
     7ea:	0e 94 da 10 	call	0x21b4	; 0x21b4 <__divmodhi4>
     7ee:	be 01       	movw	r22, r28
     7f0:	80 5d       	subi	r24, 0xD0	; 208
     7f2:	0e 94 97 03 	call	0x72e	; 0x72e <writeChar>

    return 0;
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	df 91       	pop	r29
     7fc:	cf 91       	pop	r28
     7fe:	1f 91       	pop	r17
     800:	0f 91       	pop	r16
     802:	ff 90       	pop	r15
     804:	ef 90       	pop	r14
     806:	08 95       	ret

00000808 <main>:
#include "Joystick.h"
#include "Lcd.h"
#include "TinyTimber.h"


int main() {
     808:	0f 93       	push	r16
     80a:	1f 93       	push	r17
     80c:	cf 93       	push	r28
     80e:	df 93       	push	r29
     810:	cd b7       	in	r28, 0x3d	; 61
     812:	de b7       	in	r29, 0x3e	; 62
     814:	e5 97       	sbiw	r28, 0x35	; 53
     816:	0f b6       	in	r0, 0x3f	; 63
     818:	f8 94       	cli
     81a:	de bf       	out	0x3e, r29	; 62
     81c:	0f be       	out	0x3f, r0	; 63
     81e:	cd bf       	out	0x3d, r28	; 61
	Init();
     820:	0e 94 06 02 	call	0x40c	; 0x40c <Init>
	Lcd display = initLcd();
     824:	1a 82       	std	Y+2, r1	; 0x02
     826:	19 82       	std	Y+1, r1	; 0x01
     828:	1c 82       	std	Y+4, r1	; 0x04
     82a:	1b 82       	std	Y+3, r1	; 0x03
	Generators genL = initGenerator(&display, 0);
     82c:	1e 82       	std	Y+6, r1	; 0x06
     82e:	1d 82       	std	Y+5, r1	; 0x05
     830:	18 86       	std	Y+8, r1	; 0x08
     832:	1f 82       	std	Y+7, r1	; 0x07
     834:	1a 86       	std	Y+10, r1	; 0x0a
     836:	19 86       	std	Y+9, r1	; 0x09
     838:	1c 86       	std	Y+12, r1	; 0x0c
     83a:	1b 86       	std	Y+11, r1	; 0x0b
     83c:	1e 86       	std	Y+14, r1	; 0x0e
     83e:	1d 86       	std	Y+13, r1	; 0x0d
     840:	ce 01       	movw	r24, r28
     842:	01 96       	adiw	r24, 0x01	; 1
     844:	98 8b       	std	Y+16, r25	; 0x10
     846:	8f 87       	std	Y+15, r24	; 0x0f
	Generators genR = initGenerator(&display, 1);
     848:	1a 8a       	std	Y+18, r1	; 0x12
     84a:	19 8a       	std	Y+17, r1	; 0x11
     84c:	1c 8a       	std	Y+20, r1	; 0x14
     84e:	1b 8a       	std	Y+19, r1	; 0x13
     850:	1e 8a       	std	Y+22, r1	; 0x16
     852:	1d 8a       	std	Y+21, r1	; 0x15
     854:	18 8e       	std	Y+24, r1	; 0x18
     856:	1f 8a       	std	Y+23, r1	; 0x17
     858:	21 e0       	ldi	r18, 0x01	; 1
     85a:	30 e0       	ldi	r19, 0x00	; 0
     85c:	3a 8f       	std	Y+26, r19	; 0x1a
     85e:	29 8f       	std	Y+25, r18	; 0x19
     860:	9c 8f       	std	Y+28, r25	; 0x1c
     862:	8b 8f       	std	Y+27, r24	; 0x1b
	Gui gui = initGui(&genL, &genR, &display);
     864:	1e 8e       	std	Y+30, r1	; 0x1e
     866:	1d 8e       	std	Y+29, r1	; 0x1d
     868:	18 a2       	std	Y+32, r1	; 0x20
     86a:	1f 8e       	std	Y+31, r1	; 0x1f
     86c:	9e 01       	movw	r18, r28
     86e:	2b 5f       	subi	r18, 0xFB	; 251
     870:	3f 4f       	sbci	r19, 0xFF	; 255
     872:	3a a3       	std	Y+34, r19	; 0x22
     874:	29 a3       	std	Y+33, r18	; 0x21
     876:	24 5f       	subi	r18, 0xF4	; 244
     878:	3f 4f       	sbci	r19, 0xFF	; 255
     87a:	3c a3       	std	Y+36, r19	; 0x24
     87c:	2b a3       	std	Y+35, r18	; 0x23
     87e:	9e a3       	std	Y+38, r25	; 0x26
     880:	8d a3       	std	Y+37, r24	; 0x25
	Joystick joy = initJoystick(&gui);
     882:	18 a6       	std	Y+40, r1	; 0x28
     884:	1f a2       	std	Y+39, r1	; 0x27
     886:	1a a6       	std	Y+42, r1	; 0x2a
     888:	19 a6       	std	Y+41, r1	; 0x29
     88a:	4c 96       	adiw	r24, 0x1c	; 28
     88c:	9c a7       	std	Y+44, r25	; 0x2c
     88e:	8b a7       	std	Y+43, r24	; 0x2b
     890:	1d a6       	std	Y+45, r1	; 0x2d
	InteruptHandler inter = initInteruptHandler(&joy);
     892:	8e 01       	movw	r16, r28
     894:	02 5d       	subi	r16, 0xD2	; 210
     896:	1f 4f       	sbci	r17, 0xFF	; 255
     898:	88 e0       	ldi	r24, 0x08	; 8
     89a:	f8 01       	movw	r30, r16
     89c:	11 92       	st	Z+, r1
     89e:	8a 95       	dec	r24
     8a0:	e9 f7       	brne	.-6      	; 0x89c <main+0x94>
     8a2:	ce 01       	movw	r24, r28
     8a4:	87 96       	adiw	r24, 0x27	; 39
     8a6:	9b ab       	std	Y+51, r25	; 0x33
     8a8:	8a ab       	std	Y+50, r24	; 0x32
	/*INSTALL(&joy, joystickVert, IRQ_PCINT1);
	INSTALL(&joy, joystickHor, IRQ_PCINT0);*/
	INSTALL(&inter, FreqChange, IRQ_PCINT1);
     8aa:	42 e0       	ldi	r20, 0x02	; 2
     8ac:	6b e2       	ldi	r22, 0x2B	; 43
     8ae:	72 e0       	ldi	r23, 0x02	; 2
     8b0:	c8 01       	movw	r24, r16
     8b2:	0e 94 a8 10 	call	0x2150	; 0x2150 <install>
	INSTALL(&inter, genSwitch, IRQ_PCINT0);
     8b6:	41 e0       	ldi	r20, 0x01	; 1
     8b8:	6b e4       	ldi	r22, 0x4B	; 75
     8ba:	72 e0       	ldi	r23, 0x02	; 2
     8bc:	c8 01       	movw	r24, r16
     8be:	0e 94 a8 10 	call	0x2150	; 0x2150 <install>
	return tinytimber(NULL,NULL,NULL);		
     8c2:	40 e0       	ldi	r20, 0x00	; 0
     8c4:	50 e0       	ldi	r21, 0x00	; 0
     8c6:	60 e0       	ldi	r22, 0x00	; 0
     8c8:	70 e0       	ldi	r23, 0x00	; 0
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	0e 94 c3 10 	call	0x2186	; 0x2186 <tinytimber>
     8d2:	e5 96       	adiw	r28, 0x35	; 53
     8d4:	0f b6       	in	r0, 0x3f	; 63
     8d6:	f8 94       	cli
     8d8:	de bf       	out	0x3e, r29	; 62
     8da:	0f be       	out	0x3f, r0	; 63
     8dc:	cd bf       	out	0x3d, r28	; 61
     8de:	df 91       	pop	r29
     8e0:	cf 91       	pop	r28
     8e2:	1f 91       	pop	r17
     8e4:	0f 91       	pop	r16
     8e6:	08 95       	ret

000008e8 <initialize>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     8e8:	cf 93       	push	r28
     8ea:	df 93       	push	r29
     8ec:	00 d0       	rcall	.+0      	; 0x8ee <initialize+0x6>
     8ee:	00 d0       	rcall	.+0      	; 0x8f0 <initialize+0x8>
     8f0:	cd b7       	in	r28, 0x3d	; 61
     8f2:	de b7       	in	r29, 0x3e	; 62
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	18 c0       	rjmp	.+48     	; 0x92a <initialize+0x42>
     8fa:	ac 01       	movw	r20, r24
     8fc:	4f 5f       	subi	r20, 0xFF	; 255
     8fe:	5f 4f       	sbci	r21, 0xFF	; 255
     900:	9a 01       	movw	r18, r20
     902:	22 95       	swap	r18
     904:	32 95       	swap	r19
     906:	30 7f       	andi	r19, 0xF0	; 240
     908:	32 27       	eor	r19, r18
     90a:	20 7f       	andi	r18, 0xF0	; 240
     90c:	32 27       	eor	r19, r18
     90e:	27 5e       	subi	r18, 0xE7	; 231
     910:	3d 4f       	sbci	r19, 0xFD	; 253
     912:	82 95       	swap	r24
     914:	92 95       	swap	r25
     916:	90 7f       	andi	r25, 0xF0	; 240
     918:	98 27       	eor	r25, r24
     91a:	80 7f       	andi	r24, 0xF0	; 240
     91c:	98 27       	eor	r25, r24
     91e:	fc 01       	movw	r30, r24
     920:	e7 5e       	subi	r30, 0xE7	; 231
     922:	fd 4f       	sbci	r31, 0xFD	; 253
     924:	31 83       	std	Z+1, r19	; 0x01
     926:	20 83       	st	Z, r18
     928:	ca 01       	movw	r24, r20
     92a:	8e 30       	cpi	r24, 0x0E	; 14
     92c:	91 05       	cpc	r25, r1
     92e:	2c f3       	brlt	.-54     	; 0x8fa <initialize+0x12>
     930:	10 92 fa 02 	sts	0x02FA, r1	; 0x8002fa <messages+0xe1>
     934:	10 92 f9 02 	sts	0x02F9, r1	; 0x8002f9 <messages+0xe0>
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	15 c0       	rjmp	.+42     	; 0x968 <initialize+0x80>
     93e:	ac 01       	movw	r20, r24
     940:	4f 5f       	subi	r20, 0xFF	; 255
     942:	5f 4f       	sbci	r21, 0xFF	; 255
     944:	6d e1       	ldi	r22, 0x1D	; 29
     946:	64 9f       	mul	r22, r20
     948:	90 01       	movw	r18, r0
     94a:	65 9f       	mul	r22, r21
     94c:	30 0d       	add	r19, r0
     94e:	11 24       	eor	r1, r1
     950:	2c 59       	subi	r18, 0x9C	; 156
     952:	3e 4f       	sbci	r19, 0xFE	; 254
     954:	68 9f       	mul	r22, r24
     956:	f0 01       	movw	r30, r0
     958:	69 9f       	mul	r22, r25
     95a:	f0 0d       	add	r31, r0
     95c:	11 24       	eor	r1, r1
     95e:	ec 59       	subi	r30, 0x9C	; 156
     960:	fe 4f       	sbci	r31, 0xFE	; 254
     962:	31 83       	std	Z+1, r19	; 0x01
     964:	20 83       	st	Z, r18
     966:	ca 01       	movw	r24, r20
     968:	83 30       	cpi	r24, 0x03	; 3
     96a:	91 05       	cpc	r25, r1
     96c:	44 f3       	brlt	.-48     	; 0x93e <initialize+0x56>
     96e:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <threads+0x58>
     972:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <threads+0x57>
     976:	1a 82       	std	Y+2, r1	; 0x02
     978:	19 82       	std	Y+1, r1	; 0x01
     97a:	32 c0       	rjmp	.+100    	; 0x9e0 <initialize+0xf8>
     97c:	2d e1       	ldi	r18, 0x1D	; 29
     97e:	49 81       	ldd	r20, Y+1	; 0x01
     980:	5a 81       	ldd	r21, Y+2	; 0x02
     982:	24 9f       	mul	r18, r20
     984:	c0 01       	movw	r24, r0
     986:	25 9f       	mul	r18, r21
     988:	90 0d       	add	r25, r0
     98a:	11 24       	eor	r1, r1
     98c:	fc 01       	movw	r30, r24
     98e:	e6 59       	subi	r30, 0x96	; 150
     990:	fe 4f       	sbci	r31, 0xFE	; 254
     992:	fc 83       	std	Y+4, r31	; 0x04
     994:	eb 83       	std	Y+3, r30	; 0x03
     996:	cf 01       	movw	r24, r30
     998:	0e 94 02 11 	call	0x2204	; 0x2204 <setjmp>
     99c:	20 e6       	ldi	r18, 0x60	; 96
     99e:	49 81       	ldd	r20, Y+1	; 0x01
     9a0:	5a 81       	ldd	r21, Y+2	; 0x02
     9a2:	24 9f       	mul	r18, r20
     9a4:	c0 01       	movw	r24, r0
     9a6:	25 9f       	mul	r18, r21
     9a8:	90 0d       	add	r25, r0
     9aa:	11 24       	eor	r1, r1
     9ac:	8b 59       	subi	r24, 0x9B	; 155
     9ae:	9c 4f       	sbci	r25, 0xFC	; 252
     9b0:	eb 81       	ldd	r30, Y+3	; 0x03
     9b2:	fc 81       	ldd	r31, Y+4	; 0x04
     9b4:	91 8b       	std	Z+17, r25	; 0x11
     9b6:	80 8b       	std	Z+16, r24	; 0x10
     9b8:	93 8b       	std	Z+19, r25	; 0x13
     9ba:	82 8b       	std	Z+18, r24	; 0x12
     9bc:	80 e5       	ldi	r24, 0x50	; 80
     9be:	90 e1       	ldi	r25, 0x10	; 16
     9c0:	96 8b       	std	Z+22, r25	; 0x16
     9c2:	85 8b       	std	Z+21, r24	; 0x15
     9c4:	8d e1       	ldi	r24, 0x1D	; 29
     9c6:	84 9f       	mul	r24, r20
     9c8:	f0 01       	movw	r30, r0
     9ca:	85 9f       	mul	r24, r21
     9cc:	f0 0d       	add	r31, r0
     9ce:	11 24       	eor	r1, r1
     9d0:	ec 59       	subi	r30, 0x9C	; 156
     9d2:	fe 4f       	sbci	r31, 0xFE	; 254
     9d4:	15 82       	std	Z+5, r1	; 0x05
     9d6:	14 82       	std	Z+4, r1	; 0x04
     9d8:	4f 5f       	subi	r20, 0xFF	; 255
     9da:	5f 4f       	sbci	r21, 0xFF	; 255
     9dc:	5a 83       	std	Y+2, r21	; 0x02
     9de:	49 83       	std	Y+1, r20	; 0x01
     9e0:	29 81       	ldd	r18, Y+1	; 0x01
     9e2:	3a 81       	ldd	r19, Y+2	; 0x02
     9e4:	24 30       	cpi	r18, 0x04	; 4
     9e6:	31 05       	cpc	r19, r1
     9e8:	4c f2       	brlt	.-110    	; 0x97c <initialize+0x94>
     9ea:	ec ef       	ldi	r30, 0xFC	; 252
     9ec:	f1 e0       	ldi	r31, 0x01	; 1
     9ee:	11 82       	std	Z+1, r1	; 0x01
     9f0:	10 82       	st	Z, r1
     9f2:	15 82       	std	Z+5, r1	; 0x05
     9f4:	14 82       	std	Z+4, r1	; 0x04
     9f6:	13 82       	std	Z+3, r1	; 0x03
     9f8:	12 82       	std	Z+2, r1	; 0x02
     9fa:	e1 e6       	ldi	r30, 0x61	; 97
     9fc:	f0 e0       	ldi	r31, 0x00	; 0
     9fe:	80 e8       	ldi	r24, 0x80	; 128
     a00:	80 83       	st	Z, r24
     a02:	10 82       	st	Z, r1
     a04:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     a08:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     a0c:	84 e0       	ldi	r24, 0x04	; 4
     a0e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
     a18:	0f 90       	pop	r0
     a1a:	0f 90       	pop	r0
     a1c:	0f 90       	pop	r0
     a1e:	0f 90       	pop	r0
     a20:	df 91       	pop	r29
     a22:	cf 91       	pop	r28
     a24:	08 95       	ret

00000a26 <dispatch>:
     a26:	cf 93       	push	r28
     a28:	df 93       	push	r29
     a2a:	00 d0       	rcall	.+0      	; 0xa2c <dispatch+0x6>
     a2c:	cd b7       	in	r28, 0x3d	; 61
     a2e:	de b7       	in	r29, 0x3e	; 62
     a30:	9a 83       	std	Y+2, r25	; 0x02
     a32:	89 83       	std	Y+1, r24	; 0x01
     a34:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <current>
     a38:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <current+0x1>
     a3c:	06 96       	adiw	r24, 0x06	; 6
     a3e:	0e 94 02 11 	call	0x2204	; 0x2204 <setjmp>
     a42:	89 2b       	or	r24, r25
     a44:	59 f4       	brne	.+22     	; 0xa5c <dispatch+0x36>
     a46:	89 81       	ldd	r24, Y+1	; 0x01
     a48:	9a 81       	ldd	r25, Y+2	; 0x02
     a4a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <current+0x1>
     a4e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <current>
     a52:	61 e0       	ldi	r22, 0x01	; 1
     a54:	70 e0       	ldi	r23, 0x00	; 0
     a56:	06 96       	adiw	r24, 0x06	; 6
     a58:	0e 94 22 11 	call	0x2244	; 0x2244 <longjmp>
     a5c:	0f 90       	pop	r0
     a5e:	0f 90       	pop	r0
     a60:	df 91       	pop	r29
     a62:	cf 91       	pop	r28
     a64:	08 95       	ret

00000a66 <enqueueByDeadline>:
     a66:	0f 93       	push	r16
     a68:	1f 93       	push	r17
     a6a:	cf 93       	push	r28
     a6c:	df 93       	push	r29
     a6e:	dc 01       	movw	r26, r24
     a70:	cb 01       	movw	r24, r22
     a72:	eb 01       	movw	r28, r22
     a74:	e8 81       	ld	r30, Y
     a76:	f9 81       	ldd	r31, Y+1	; 0x01
     a78:	c0 e0       	ldi	r28, 0x00	; 0
     a7a:	d0 e0       	ldi	r29, 0x00	; 0
     a7c:	04 c0       	rjmp	.+8      	; 0xa86 <enqueueByDeadline+0x20>
     a7e:	ef 01       	movw	r28, r30
     a80:	01 90       	ld	r0, Z+
     a82:	f0 81       	ld	r31, Z
     a84:	e0 2d       	mov	r30, r0
     a86:	30 97       	sbiw	r30, 0x00	; 0
     a88:	79 f0       	breq	.+30     	; 0xaa8 <enqueueByDeadline+0x42>
     a8a:	06 81       	ldd	r16, Z+6	; 0x06
     a8c:	17 81       	ldd	r17, Z+7	; 0x07
     a8e:	20 85       	ldd	r18, Z+8	; 0x08
     a90:	31 85       	ldd	r19, Z+9	; 0x09
     a92:	16 96       	adiw	r26, 0x06	; 6
     a94:	4d 91       	ld	r20, X+
     a96:	5d 91       	ld	r21, X+
     a98:	6d 91       	ld	r22, X+
     a9a:	7c 91       	ld	r23, X
     a9c:	19 97       	sbiw	r26, 0x09	; 9
     a9e:	40 17       	cp	r20, r16
     aa0:	51 07       	cpc	r21, r17
     aa2:	62 07       	cpc	r22, r18
     aa4:	73 07       	cpc	r23, r19
     aa6:	5c f7       	brge	.-42     	; 0xa7e <enqueueByDeadline+0x18>
     aa8:	11 96       	adiw	r26, 0x01	; 1
     aaa:	fc 93       	st	X, r31
     aac:	ee 93       	st	-X, r30
     aae:	20 97       	sbiw	r28, 0x00	; 0
     ab0:	21 f4       	brne	.+8      	; 0xaba <enqueueByDeadline+0x54>
     ab2:	fc 01       	movw	r30, r24
     ab4:	b1 83       	std	Z+1, r27	; 0x01
     ab6:	a0 83       	st	Z, r26
     ab8:	02 c0       	rjmp	.+4      	; 0xabe <enqueueByDeadline+0x58>
     aba:	b9 83       	std	Y+1, r27	; 0x01
     abc:	a8 83       	st	Y, r26
     abe:	df 91       	pop	r29
     ac0:	cf 91       	pop	r28
     ac2:	1f 91       	pop	r17
     ac4:	0f 91       	pop	r16
     ac6:	08 95       	ret

00000ac8 <enqueueByBaseline>:
     ac8:	0f 93       	push	r16
     aca:	1f 93       	push	r17
     acc:	cf 93       	push	r28
     ace:	df 93       	push	r29
     ad0:	dc 01       	movw	r26, r24
     ad2:	cb 01       	movw	r24, r22
     ad4:	eb 01       	movw	r28, r22
     ad6:	e8 81       	ld	r30, Y
     ad8:	f9 81       	ldd	r31, Y+1	; 0x01
     ada:	c0 e0       	ldi	r28, 0x00	; 0
     adc:	d0 e0       	ldi	r29, 0x00	; 0
     ade:	04 c0       	rjmp	.+8      	; 0xae8 <enqueueByBaseline+0x20>
     ae0:	ef 01       	movw	r28, r30
     ae2:	01 90       	ld	r0, Z+
     ae4:	f0 81       	ld	r31, Z
     ae6:	e0 2d       	mov	r30, r0
     ae8:	30 97       	sbiw	r30, 0x00	; 0
     aea:	79 f0       	breq	.+30     	; 0xb0a <enqueueByBaseline+0x42>
     aec:	02 81       	ldd	r16, Z+2	; 0x02
     aee:	13 81       	ldd	r17, Z+3	; 0x03
     af0:	24 81       	ldd	r18, Z+4	; 0x04
     af2:	35 81       	ldd	r19, Z+5	; 0x05
     af4:	12 96       	adiw	r26, 0x02	; 2
     af6:	4d 91       	ld	r20, X+
     af8:	5d 91       	ld	r21, X+
     afa:	6d 91       	ld	r22, X+
     afc:	7c 91       	ld	r23, X
     afe:	15 97       	sbiw	r26, 0x05	; 5
     b00:	40 17       	cp	r20, r16
     b02:	51 07       	cpc	r21, r17
     b04:	62 07       	cpc	r22, r18
     b06:	73 07       	cpc	r23, r19
     b08:	5c f7       	brge	.-42     	; 0xae0 <enqueueByBaseline+0x18>
     b0a:	11 96       	adiw	r26, 0x01	; 1
     b0c:	fc 93       	st	X, r31
     b0e:	ee 93       	st	-X, r30
     b10:	20 97       	sbiw	r28, 0x00	; 0
     b12:	21 f4       	brne	.+8      	; 0xb1c <enqueueByBaseline+0x54>
     b14:	fc 01       	movw	r30, r24
     b16:	b1 83       	std	Z+1, r27	; 0x01
     b18:	a0 83       	st	Z, r26
     b1a:	02 c0       	rjmp	.+4      	; 0xb20 <enqueueByBaseline+0x58>
     b1c:	b9 83       	std	Y+1, r27	; 0x01
     b1e:	a8 83       	st	Y, r26
     b20:	df 91       	pop	r29
     b22:	cf 91       	pop	r28
     b24:	1f 91       	pop	r17
     b26:	0f 91       	pop	r16
     b28:	08 95       	ret

00000b2a <dequeue>:
     b2a:	dc 01       	movw	r26, r24
     b2c:	ed 91       	ld	r30, X+
     b2e:	fc 91       	ld	r31, X
     b30:	11 97       	sbiw	r26, 0x01	; 1
     b32:	30 97       	sbiw	r30, 0x00	; 0
     b34:	59 f4       	brne	.+22     	; 0xb4c <dequeue+0x22>
     b36:	8f ef       	ldi	r24, 0xFF	; 255
     b38:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     b3c:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
     b40:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
     b44:	81 e0       	ldi	r24, 0x01	; 1
     b46:	83 bf       	out	0x33, r24	; 51
     b48:	88 95       	sleep
     b4a:	fc cf       	rjmp	.-8      	; 0xb44 <dequeue+0x1a>
     b4c:	20 81       	ld	r18, Z
     b4e:	31 81       	ldd	r19, Z+1	; 0x01
     b50:	2d 93       	st	X+, r18
     b52:	3c 93       	st	X, r19
     b54:	cf 01       	movw	r24, r30
     b56:	08 95       	ret

00000b58 <insert>:
     b58:	fb 01       	movw	r30, r22
     b5a:	20 81       	ld	r18, Z
     b5c:	31 81       	ldd	r19, Z+1	; 0x01
     b5e:	fc 01       	movw	r30, r24
     b60:	31 83       	std	Z+1, r19	; 0x01
     b62:	20 83       	st	Z, r18
     b64:	fb 01       	movw	r30, r22
     b66:	91 83       	std	Z+1, r25	; 0x01
     b68:	80 83       	st	Z, r24
     b6a:	08 95       	ret

00000b6c <push>:
     b6c:	fb 01       	movw	r30, r22
     b6e:	20 81       	ld	r18, Z
     b70:	31 81       	ldd	r19, Z+1	; 0x01
     b72:	fc 01       	movw	r30, r24
     b74:	31 83       	std	Z+1, r19	; 0x01
     b76:	20 83       	st	Z, r18
     b78:	fb 01       	movw	r30, r22
     b7a:	91 83       	std	Z+1, r25	; 0x01
     b7c:	80 83       	st	Z, r24
     b7e:	08 95       	ret

00000b80 <pop>:
     b80:	dc 01       	movw	r26, r24
     b82:	ed 91       	ld	r30, X+
     b84:	fc 91       	ld	r31, X
     b86:	11 97       	sbiw	r26, 0x01	; 1
     b88:	20 81       	ld	r18, Z
     b8a:	31 81       	ldd	r19, Z+1	; 0x01
     b8c:	2d 93       	st	X+, r18
     b8e:	3c 93       	st	X, r19
     b90:	cf 01       	movw	r24, r30
     b92:	08 95       	ret

00000b94 <schedule>:
     b94:	cf 93       	push	r28
     b96:	df 93       	push	r29
     b98:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <activeStack>
     b9c:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <activeStack+0x1>
     ba0:	c2 81       	ldd	r28, Z+2	; 0x02
     ba2:	d3 81       	ldd	r29, Z+3	; 0x03
     ba4:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <msgQ>
     ba8:	f0 91 3f 01 	lds	r31, 0x013F	; 0x80013f <msgQ+0x1>
     bac:	30 97       	sbiw	r30, 0x00	; 0
     bae:	19 f1       	breq	.+70     	; 0xbf6 <schedule+0x62>
     bb0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <threadPool>
     bb4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <threadPool+0x1>
     bb8:	89 2b       	or	r24, r25
     bba:	e9 f0       	breq	.+58     	; 0xbf6 <schedule+0x62>
     bbc:	20 97       	sbiw	r28, 0x00	; 0
     bbe:	69 f0       	breq	.+26     	; 0xbda <schedule+0x46>
     bc0:	86 81       	ldd	r24, Z+6	; 0x06
     bc2:	97 81       	ldd	r25, Z+7	; 0x07
     bc4:	a0 85       	ldd	r26, Z+8	; 0x08
     bc6:	b1 85       	ldd	r27, Z+9	; 0x09
     bc8:	4e 81       	ldd	r20, Y+6	; 0x06
     bca:	5f 81       	ldd	r21, Y+7	; 0x07
     bcc:	68 85       	ldd	r22, Y+8	; 0x08
     bce:	79 85       	ldd	r23, Y+9	; 0x09
     bd0:	84 1b       	sub	r24, r20
     bd2:	95 0b       	sbc	r25, r21
     bd4:	a6 0b       	sbc	r26, r22
     bd6:	b7 0b       	sbc	r27, r23
     bd8:	72 f4       	brpl	.+28     	; 0xbf6 <schedule+0x62>
     bda:	86 e0       	ldi	r24, 0x06	; 6
     bdc:	91 e0       	ldi	r25, 0x01	; 1
     bde:	0e 94 c0 05 	call	0xb80	; 0xb80 <pop>
     be2:	64 e0       	ldi	r22, 0x04	; 4
     be4:	71 e0       	ldi	r23, 0x01	; 1
     be6:	0e 94 b6 05 	call	0xb6c	; 0xb6c <push>
     bea:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <activeStack>
     bee:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <activeStack+0x1>
     bf2:	0e 94 13 05 	call	0xa26	; 0xa26 <dispatch>
     bf6:	df 91       	pop	r29
     bf8:	cf 91       	pop	r28
     bfa:	08 95       	ret

00000bfc <__vector_1>:
     bfc:	1f 92       	push	r1
     bfe:	0f 92       	push	r0
     c00:	0f b6       	in	r0, 0x3f	; 63
     c02:	0f 92       	push	r0
     c04:	11 24       	eor	r1, r1
     c06:	0f 93       	push	r16
     c08:	1f 93       	push	r17
     c0a:	2f 93       	push	r18
     c0c:	3f 93       	push	r19
     c0e:	4f 93       	push	r20
     c10:	5f 93       	push	r21
     c12:	6f 93       	push	r22
     c14:	7f 93       	push	r23
     c16:	8f 93       	push	r24
     c18:	9f 93       	push	r25
     c1a:	af 93       	push	r26
     c1c:	bf 93       	push	r27
     c1e:	ef 93       	push	r30
     c20:	ff 93       	push	r31
     c22:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
     c26:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <__data_end+0x1>
     c2a:	ac 01       	movw	r20, r24
     c2c:	09 2e       	mov	r0, r25
     c2e:	00 0c       	add	r0, r0
     c30:	66 0b       	sbc	r22, r22
     c32:	77 0b       	sbc	r23, r23
     c34:	9a 01       	movw	r18, r20
     c36:	11 27       	eor	r17, r17
     c38:	00 27       	eor	r16, r16
     c3a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     c3e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c42:	60 e0       	ldi	r22, 0x00	; 0
     c44:	70 e0       	ldi	r23, 0x00	; 0
     c46:	40 2b       	or	r20, r16
     c48:	51 2b       	or	r21, r17
     c4a:	62 2b       	or	r22, r18
     c4c:	73 2b       	or	r23, r19
     c4e:	40 93 38 01 	sts	0x0138, r20	; 0x800138 <timestamp>
     c52:	50 93 39 01 	sts	0x0139, r21	; 0x800139 <timestamp+0x1>
     c56:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <timestamp+0x2>
     c5a:	70 93 3b 01 	sts	0x013B, r23	; 0x80013b <timestamp+0x3>
     c5e:	b0 9b       	sbis	0x16, 0	; 22
     c60:	1a c0       	rjmp	.+52     	; 0xc96 <__vector_1+0x9a>
     c62:	01 96       	adiw	r24, 0x01	; 1
     c64:	09 2e       	mov	r0, r25
     c66:	00 0c       	add	r0, r0
     c68:	aa 0b       	sbc	r26, r26
     c6a:	bb 0b       	sbc	r27, r27
     c6c:	bc 01       	movw	r22, r24
     c6e:	55 27       	eor	r21, r21
     c70:	44 27       	eor	r20, r20
     c72:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     c76:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c7a:	a0 e0       	ldi	r26, 0x00	; 0
     c7c:	b0 e0       	ldi	r27, 0x00	; 0
     c7e:	84 2b       	or	r24, r20
     c80:	95 2b       	or	r25, r21
     c82:	a6 2b       	or	r26, r22
     c84:	b7 2b       	or	r27, r23
     c86:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
     c8a:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
     c8e:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
     c92:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
     c96:	e0 91 d8 01 	lds	r30, 0x01D8	; 0x8001d8 <mtable>
     c9a:	f0 91 d9 01 	lds	r31, 0x01D9	; 0x8001d9 <mtable+0x1>
     c9e:	30 97       	sbiw	r30, 0x00	; 0
     ca0:	39 f0       	breq	.+14     	; 0xcb0 <__vector_1+0xb4>
     ca2:	60 e0       	ldi	r22, 0x00	; 0
     ca4:	70 e0       	ldi	r23, 0x00	; 0
     ca6:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <otable>
     caa:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <otable+0x1>
     cae:	09 95       	icall
     cb0:	0e 94 ca 05 	call	0xb94	; 0xb94 <schedule>
     cb4:	ff 91       	pop	r31
     cb6:	ef 91       	pop	r30
     cb8:	bf 91       	pop	r27
     cba:	af 91       	pop	r26
     cbc:	9f 91       	pop	r25
     cbe:	8f 91       	pop	r24
     cc0:	7f 91       	pop	r23
     cc2:	6f 91       	pop	r22
     cc4:	5f 91       	pop	r21
     cc6:	4f 91       	pop	r20
     cc8:	3f 91       	pop	r19
     cca:	2f 91       	pop	r18
     ccc:	1f 91       	pop	r17
     cce:	0f 91       	pop	r16
     cd0:	0f 90       	pop	r0
     cd2:	0f be       	out	0x3f, r0	; 63
     cd4:	0f 90       	pop	r0
     cd6:	1f 90       	pop	r1
     cd8:	18 95       	reti

00000cda <__vector_2>:
     cda:	1f 92       	push	r1
     cdc:	0f 92       	push	r0
     cde:	0f b6       	in	r0, 0x3f	; 63
     ce0:	0f 92       	push	r0
     ce2:	11 24       	eor	r1, r1
     ce4:	0f 93       	push	r16
     ce6:	1f 93       	push	r17
     ce8:	2f 93       	push	r18
     cea:	3f 93       	push	r19
     cec:	4f 93       	push	r20
     cee:	5f 93       	push	r21
     cf0:	6f 93       	push	r22
     cf2:	7f 93       	push	r23
     cf4:	8f 93       	push	r24
     cf6:	9f 93       	push	r25
     cf8:	af 93       	push	r26
     cfa:	bf 93       	push	r27
     cfc:	ef 93       	push	r30
     cfe:	ff 93       	push	r31
     d00:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
     d04:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <__data_end+0x1>
     d08:	ac 01       	movw	r20, r24
     d0a:	09 2e       	mov	r0, r25
     d0c:	00 0c       	add	r0, r0
     d0e:	66 0b       	sbc	r22, r22
     d10:	77 0b       	sbc	r23, r23
     d12:	9a 01       	movw	r18, r20
     d14:	11 27       	eor	r17, r17
     d16:	00 27       	eor	r16, r16
     d18:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d1c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d20:	60 e0       	ldi	r22, 0x00	; 0
     d22:	70 e0       	ldi	r23, 0x00	; 0
     d24:	40 2b       	or	r20, r16
     d26:	51 2b       	or	r21, r17
     d28:	62 2b       	or	r22, r18
     d2a:	73 2b       	or	r23, r19
     d2c:	40 93 38 01 	sts	0x0138, r20	; 0x800138 <timestamp>
     d30:	50 93 39 01 	sts	0x0139, r21	; 0x800139 <timestamp+0x1>
     d34:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <timestamp+0x2>
     d38:	70 93 3b 01 	sts	0x013B, r23	; 0x80013b <timestamp+0x3>
     d3c:	b0 9b       	sbis	0x16, 0	; 22
     d3e:	1a c0       	rjmp	.+52     	; 0xd74 <__vector_2+0x9a>
     d40:	01 96       	adiw	r24, 0x01	; 1
     d42:	09 2e       	mov	r0, r25
     d44:	00 0c       	add	r0, r0
     d46:	aa 0b       	sbc	r26, r26
     d48:	bb 0b       	sbc	r27, r27
     d4a:	bc 01       	movw	r22, r24
     d4c:	55 27       	eor	r21, r21
     d4e:	44 27       	eor	r20, r20
     d50:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d54:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d58:	a0 e0       	ldi	r26, 0x00	; 0
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	84 2b       	or	r24, r20
     d5e:	95 2b       	or	r25, r21
     d60:	a6 2b       	or	r26, r22
     d62:	b7 2b       	or	r27, r23
     d64:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
     d68:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
     d6c:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
     d70:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
     d74:	e0 91 da 01 	lds	r30, 0x01DA	; 0x8001da <mtable+0x2>
     d78:	f0 91 db 01 	lds	r31, 0x01DB	; 0x8001db <mtable+0x3>
     d7c:	30 97       	sbiw	r30, 0x00	; 0
     d7e:	39 f0       	breq	.+14     	; 0xd8e <__vector_2+0xb4>
     d80:	61 e0       	ldi	r22, 0x01	; 1
     d82:	70 e0       	ldi	r23, 0x00	; 0
     d84:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <otable+0x2>
     d88:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <otable+0x3>
     d8c:	09 95       	icall
     d8e:	0e 94 ca 05 	call	0xb94	; 0xb94 <schedule>
     d92:	ff 91       	pop	r31
     d94:	ef 91       	pop	r30
     d96:	bf 91       	pop	r27
     d98:	af 91       	pop	r26
     d9a:	9f 91       	pop	r25
     d9c:	8f 91       	pop	r24
     d9e:	7f 91       	pop	r23
     da0:	6f 91       	pop	r22
     da2:	5f 91       	pop	r21
     da4:	4f 91       	pop	r20
     da6:	3f 91       	pop	r19
     da8:	2f 91       	pop	r18
     daa:	1f 91       	pop	r17
     dac:	0f 91       	pop	r16
     dae:	0f 90       	pop	r0
     db0:	0f be       	out	0x3f, r0	; 63
     db2:	0f 90       	pop	r0
     db4:	1f 90       	pop	r1
     db6:	18 95       	reti

00000db8 <__vector_3>:
     db8:	1f 92       	push	r1
     dba:	0f 92       	push	r0
     dbc:	0f b6       	in	r0, 0x3f	; 63
     dbe:	0f 92       	push	r0
     dc0:	11 24       	eor	r1, r1
     dc2:	0f 93       	push	r16
     dc4:	1f 93       	push	r17
     dc6:	2f 93       	push	r18
     dc8:	3f 93       	push	r19
     dca:	4f 93       	push	r20
     dcc:	5f 93       	push	r21
     dce:	6f 93       	push	r22
     dd0:	7f 93       	push	r23
     dd2:	8f 93       	push	r24
     dd4:	9f 93       	push	r25
     dd6:	af 93       	push	r26
     dd8:	bf 93       	push	r27
     dda:	ef 93       	push	r30
     ddc:	ff 93       	push	r31
     dde:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
     de2:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <__data_end+0x1>
     de6:	ac 01       	movw	r20, r24
     de8:	09 2e       	mov	r0, r25
     dea:	00 0c       	add	r0, r0
     dec:	66 0b       	sbc	r22, r22
     dee:	77 0b       	sbc	r23, r23
     df0:	9a 01       	movw	r18, r20
     df2:	11 27       	eor	r17, r17
     df4:	00 27       	eor	r16, r16
     df6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     dfa:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     dfe:	60 e0       	ldi	r22, 0x00	; 0
     e00:	70 e0       	ldi	r23, 0x00	; 0
     e02:	40 2b       	or	r20, r16
     e04:	51 2b       	or	r21, r17
     e06:	62 2b       	or	r22, r18
     e08:	73 2b       	or	r23, r19
     e0a:	40 93 38 01 	sts	0x0138, r20	; 0x800138 <timestamp>
     e0e:	50 93 39 01 	sts	0x0139, r21	; 0x800139 <timestamp+0x1>
     e12:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <timestamp+0x2>
     e16:	70 93 3b 01 	sts	0x013B, r23	; 0x80013b <timestamp+0x3>
     e1a:	b0 9b       	sbis	0x16, 0	; 22
     e1c:	1a c0       	rjmp	.+52     	; 0xe52 <__vector_3+0x9a>
     e1e:	01 96       	adiw	r24, 0x01	; 1
     e20:	09 2e       	mov	r0, r25
     e22:	00 0c       	add	r0, r0
     e24:	aa 0b       	sbc	r26, r26
     e26:	bb 0b       	sbc	r27, r27
     e28:	bc 01       	movw	r22, r24
     e2a:	55 27       	eor	r21, r21
     e2c:	44 27       	eor	r20, r20
     e2e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e32:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e36:	a0 e0       	ldi	r26, 0x00	; 0
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	84 2b       	or	r24, r20
     e3c:	95 2b       	or	r25, r21
     e3e:	a6 2b       	or	r26, r22
     e40:	b7 2b       	or	r27, r23
     e42:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
     e46:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
     e4a:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
     e4e:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
     e52:	e0 91 dc 01 	lds	r30, 0x01DC	; 0x8001dc <mtable+0x4>
     e56:	f0 91 dd 01 	lds	r31, 0x01DD	; 0x8001dd <mtable+0x5>
     e5a:	30 97       	sbiw	r30, 0x00	; 0
     e5c:	39 f0       	breq	.+14     	; 0xe6c <__vector_3+0xb4>
     e5e:	62 e0       	ldi	r22, 0x02	; 2
     e60:	70 e0       	ldi	r23, 0x00	; 0
     e62:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <otable+0x4>
     e66:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <otable+0x5>
     e6a:	09 95       	icall
     e6c:	0e 94 ca 05 	call	0xb94	; 0xb94 <schedule>
     e70:	ff 91       	pop	r31
     e72:	ef 91       	pop	r30
     e74:	bf 91       	pop	r27
     e76:	af 91       	pop	r26
     e78:	9f 91       	pop	r25
     e7a:	8f 91       	pop	r24
     e7c:	7f 91       	pop	r23
     e7e:	6f 91       	pop	r22
     e80:	5f 91       	pop	r21
     e82:	4f 91       	pop	r20
     e84:	3f 91       	pop	r19
     e86:	2f 91       	pop	r18
     e88:	1f 91       	pop	r17
     e8a:	0f 91       	pop	r16
     e8c:	0f 90       	pop	r0
     e8e:	0f be       	out	0x3f, r0	; 63
     e90:	0f 90       	pop	r0
     e92:	1f 90       	pop	r1
     e94:	18 95       	reti

00000e96 <__vector_4>:
     e96:	1f 92       	push	r1
     e98:	0f 92       	push	r0
     e9a:	0f b6       	in	r0, 0x3f	; 63
     e9c:	0f 92       	push	r0
     e9e:	11 24       	eor	r1, r1
     ea0:	0f 93       	push	r16
     ea2:	1f 93       	push	r17
     ea4:	2f 93       	push	r18
     ea6:	3f 93       	push	r19
     ea8:	4f 93       	push	r20
     eaa:	5f 93       	push	r21
     eac:	6f 93       	push	r22
     eae:	7f 93       	push	r23
     eb0:	8f 93       	push	r24
     eb2:	9f 93       	push	r25
     eb4:	af 93       	push	r26
     eb6:	bf 93       	push	r27
     eb8:	ef 93       	push	r30
     eba:	ff 93       	push	r31
     ebc:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
     ec0:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <__data_end+0x1>
     ec4:	ac 01       	movw	r20, r24
     ec6:	09 2e       	mov	r0, r25
     ec8:	00 0c       	add	r0, r0
     eca:	66 0b       	sbc	r22, r22
     ecc:	77 0b       	sbc	r23, r23
     ece:	9a 01       	movw	r18, r20
     ed0:	11 27       	eor	r17, r17
     ed2:	00 27       	eor	r16, r16
     ed4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ed8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     edc:	60 e0       	ldi	r22, 0x00	; 0
     ede:	70 e0       	ldi	r23, 0x00	; 0
     ee0:	40 2b       	or	r20, r16
     ee2:	51 2b       	or	r21, r17
     ee4:	62 2b       	or	r22, r18
     ee6:	73 2b       	or	r23, r19
     ee8:	40 93 38 01 	sts	0x0138, r20	; 0x800138 <timestamp>
     eec:	50 93 39 01 	sts	0x0139, r21	; 0x800139 <timestamp+0x1>
     ef0:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <timestamp+0x2>
     ef4:	70 93 3b 01 	sts	0x013B, r23	; 0x80013b <timestamp+0x3>
     ef8:	b0 9b       	sbis	0x16, 0	; 22
     efa:	1a c0       	rjmp	.+52     	; 0xf30 <__vector_4+0x9a>
     efc:	01 96       	adiw	r24, 0x01	; 1
     efe:	09 2e       	mov	r0, r25
     f00:	00 0c       	add	r0, r0
     f02:	aa 0b       	sbc	r26, r26
     f04:	bb 0b       	sbc	r27, r27
     f06:	bc 01       	movw	r22, r24
     f08:	55 27       	eor	r21, r21
     f0a:	44 27       	eor	r20, r20
     f0c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f10:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f14:	a0 e0       	ldi	r26, 0x00	; 0
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	84 2b       	or	r24, r20
     f1a:	95 2b       	or	r25, r21
     f1c:	a6 2b       	or	r26, r22
     f1e:	b7 2b       	or	r27, r23
     f20:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
     f24:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
     f28:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
     f2c:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
     f30:	e0 91 de 01 	lds	r30, 0x01DE	; 0x8001de <mtable+0x6>
     f34:	f0 91 df 01 	lds	r31, 0x01DF	; 0x8001df <mtable+0x7>
     f38:	30 97       	sbiw	r30, 0x00	; 0
     f3a:	39 f0       	breq	.+14     	; 0xf4a <__vector_4+0xb4>
     f3c:	63 e0       	ldi	r22, 0x03	; 3
     f3e:	70 e0       	ldi	r23, 0x00	; 0
     f40:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <otable+0x6>
     f44:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <otable+0x7>
     f48:	09 95       	icall
     f4a:	0e 94 ca 05 	call	0xb94	; 0xb94 <schedule>
     f4e:	ff 91       	pop	r31
     f50:	ef 91       	pop	r30
     f52:	bf 91       	pop	r27
     f54:	af 91       	pop	r26
     f56:	9f 91       	pop	r25
     f58:	8f 91       	pop	r24
     f5a:	7f 91       	pop	r23
     f5c:	6f 91       	pop	r22
     f5e:	5f 91       	pop	r21
     f60:	4f 91       	pop	r20
     f62:	3f 91       	pop	r19
     f64:	2f 91       	pop	r18
     f66:	1f 91       	pop	r17
     f68:	0f 91       	pop	r16
     f6a:	0f 90       	pop	r0
     f6c:	0f be       	out	0x3f, r0	; 63
     f6e:	0f 90       	pop	r0
     f70:	1f 90       	pop	r1
     f72:	18 95       	reti

00000f74 <__vector_5>:
     f74:	1f 92       	push	r1
     f76:	0f 92       	push	r0
     f78:	0f b6       	in	r0, 0x3f	; 63
     f7a:	0f 92       	push	r0
     f7c:	11 24       	eor	r1, r1
     f7e:	0f 93       	push	r16
     f80:	1f 93       	push	r17
     f82:	2f 93       	push	r18
     f84:	3f 93       	push	r19
     f86:	4f 93       	push	r20
     f88:	5f 93       	push	r21
     f8a:	6f 93       	push	r22
     f8c:	7f 93       	push	r23
     f8e:	8f 93       	push	r24
     f90:	9f 93       	push	r25
     f92:	af 93       	push	r26
     f94:	bf 93       	push	r27
     f96:	ef 93       	push	r30
     f98:	ff 93       	push	r31
     f9a:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
     f9e:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <__data_end+0x1>
     fa2:	ac 01       	movw	r20, r24
     fa4:	09 2e       	mov	r0, r25
     fa6:	00 0c       	add	r0, r0
     fa8:	66 0b       	sbc	r22, r22
     faa:	77 0b       	sbc	r23, r23
     fac:	9a 01       	movw	r18, r20
     fae:	11 27       	eor	r17, r17
     fb0:	00 27       	eor	r16, r16
     fb2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     fb6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     fba:	60 e0       	ldi	r22, 0x00	; 0
     fbc:	70 e0       	ldi	r23, 0x00	; 0
     fbe:	40 2b       	or	r20, r16
     fc0:	51 2b       	or	r21, r17
     fc2:	62 2b       	or	r22, r18
     fc4:	73 2b       	or	r23, r19
     fc6:	40 93 38 01 	sts	0x0138, r20	; 0x800138 <timestamp>
     fca:	50 93 39 01 	sts	0x0139, r21	; 0x800139 <timestamp+0x1>
     fce:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <timestamp+0x2>
     fd2:	70 93 3b 01 	sts	0x013B, r23	; 0x80013b <timestamp+0x3>
     fd6:	b0 9b       	sbis	0x16, 0	; 22
     fd8:	1a c0       	rjmp	.+52     	; 0x100e <__vector_5+0x9a>
     fda:	01 96       	adiw	r24, 0x01	; 1
     fdc:	09 2e       	mov	r0, r25
     fde:	00 0c       	add	r0, r0
     fe0:	aa 0b       	sbc	r26, r26
     fe2:	bb 0b       	sbc	r27, r27
     fe4:	bc 01       	movw	r22, r24
     fe6:	55 27       	eor	r21, r21
     fe8:	44 27       	eor	r20, r20
     fea:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     fee:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ff2:	a0 e0       	ldi	r26, 0x00	; 0
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	84 2b       	or	r24, r20
     ff8:	95 2b       	or	r25, r21
     ffa:	a6 2b       	or	r26, r22
     ffc:	b7 2b       	or	r27, r23
     ffe:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
    1002:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
    1006:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
    100a:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
    100e:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <mtable+0x8>
    1012:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <mtable+0x9>
    1016:	30 97       	sbiw	r30, 0x00	; 0
    1018:	39 f0       	breq	.+14     	; 0x1028 <__vector_5+0xb4>
    101a:	64 e0       	ldi	r22, 0x04	; 4
    101c:	70 e0       	ldi	r23, 0x00	; 0
    101e:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <otable+0x8>
    1022:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <otable+0x9>
    1026:	09 95       	icall
    1028:	0e 94 ca 05 	call	0xb94	; 0xb94 <schedule>
    102c:	ff 91       	pop	r31
    102e:	ef 91       	pop	r30
    1030:	bf 91       	pop	r27
    1032:	af 91       	pop	r26
    1034:	9f 91       	pop	r25
    1036:	8f 91       	pop	r24
    1038:	7f 91       	pop	r23
    103a:	6f 91       	pop	r22
    103c:	5f 91       	pop	r21
    103e:	4f 91       	pop	r20
    1040:	3f 91       	pop	r19
    1042:	2f 91       	pop	r18
    1044:	1f 91       	pop	r17
    1046:	0f 91       	pop	r16
    1048:	0f 90       	pop	r0
    104a:	0f be       	out	0x3f, r0	; 63
    104c:	0f 90       	pop	r0
    104e:	1f 90       	pop	r1
    1050:	18 95       	reti

00001052 <__vector_10>:
    1052:	1f 92       	push	r1
    1054:	0f 92       	push	r0
    1056:	0f b6       	in	r0, 0x3f	; 63
    1058:	0f 92       	push	r0
    105a:	11 24       	eor	r1, r1
    105c:	0f 93       	push	r16
    105e:	1f 93       	push	r17
    1060:	2f 93       	push	r18
    1062:	3f 93       	push	r19
    1064:	4f 93       	push	r20
    1066:	5f 93       	push	r21
    1068:	6f 93       	push	r22
    106a:	7f 93       	push	r23
    106c:	8f 93       	push	r24
    106e:	9f 93       	push	r25
    1070:	af 93       	push	r26
    1072:	bf 93       	push	r27
    1074:	ef 93       	push	r30
    1076:	ff 93       	push	r31
    1078:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
    107c:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <__data_end+0x1>
    1080:	ac 01       	movw	r20, r24
    1082:	09 2e       	mov	r0, r25
    1084:	00 0c       	add	r0, r0
    1086:	66 0b       	sbc	r22, r22
    1088:	77 0b       	sbc	r23, r23
    108a:	9a 01       	movw	r18, r20
    108c:	11 27       	eor	r17, r17
    108e:	00 27       	eor	r16, r16
    1090:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1094:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1098:	60 e0       	ldi	r22, 0x00	; 0
    109a:	70 e0       	ldi	r23, 0x00	; 0
    109c:	40 2b       	or	r20, r16
    109e:	51 2b       	or	r21, r17
    10a0:	62 2b       	or	r22, r18
    10a2:	73 2b       	or	r23, r19
    10a4:	40 93 38 01 	sts	0x0138, r20	; 0x800138 <timestamp>
    10a8:	50 93 39 01 	sts	0x0139, r21	; 0x800139 <timestamp+0x1>
    10ac:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <timestamp+0x2>
    10b0:	70 93 3b 01 	sts	0x013B, r23	; 0x80013b <timestamp+0x3>
    10b4:	b0 9b       	sbis	0x16, 0	; 22
    10b6:	1a c0       	rjmp	.+52     	; 0x10ec <__vector_10+0x9a>
    10b8:	01 96       	adiw	r24, 0x01	; 1
    10ba:	09 2e       	mov	r0, r25
    10bc:	00 0c       	add	r0, r0
    10be:	aa 0b       	sbc	r26, r26
    10c0:	bb 0b       	sbc	r27, r27
    10c2:	bc 01       	movw	r22, r24
    10c4:	55 27       	eor	r21, r21
    10c6:	44 27       	eor	r20, r20
    10c8:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    10cc:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    10d0:	a0 e0       	ldi	r26, 0x00	; 0
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	84 2b       	or	r24, r20
    10d6:	95 2b       	or	r25, r21
    10d8:	a6 2b       	or	r26, r22
    10da:	b7 2b       	or	r27, r23
    10dc:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
    10e0:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
    10e4:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
    10e8:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
    10ec:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <mtable+0xa>
    10f0:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <mtable+0xb>
    10f4:	30 97       	sbiw	r30, 0x00	; 0
    10f6:	39 f0       	breq	.+14     	; 0x1106 <__vector_10+0xb4>
    10f8:	65 e0       	ldi	r22, 0x05	; 5
    10fa:	70 e0       	ldi	r23, 0x00	; 0
    10fc:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <otable+0xa>
    1100:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <otable+0xb>
    1104:	09 95       	icall
    1106:	0e 94 ca 05 	call	0xb94	; 0xb94 <schedule>
    110a:	ff 91       	pop	r31
    110c:	ef 91       	pop	r30
    110e:	bf 91       	pop	r27
    1110:	af 91       	pop	r26
    1112:	9f 91       	pop	r25
    1114:	8f 91       	pop	r24
    1116:	7f 91       	pop	r23
    1118:	6f 91       	pop	r22
    111a:	5f 91       	pop	r21
    111c:	4f 91       	pop	r20
    111e:	3f 91       	pop	r19
    1120:	2f 91       	pop	r18
    1122:	1f 91       	pop	r17
    1124:	0f 91       	pop	r16
    1126:	0f 90       	pop	r0
    1128:	0f be       	out	0x3f, r0	; 63
    112a:	0f 90       	pop	r0
    112c:	1f 90       	pop	r1
    112e:	18 95       	reti

00001130 <__vector_11>:
    1130:	1f 92       	push	r1
    1132:	0f 92       	push	r0
    1134:	0f b6       	in	r0, 0x3f	; 63
    1136:	0f 92       	push	r0
    1138:	11 24       	eor	r1, r1
    113a:	0f 93       	push	r16
    113c:	1f 93       	push	r17
    113e:	2f 93       	push	r18
    1140:	3f 93       	push	r19
    1142:	4f 93       	push	r20
    1144:	5f 93       	push	r21
    1146:	6f 93       	push	r22
    1148:	7f 93       	push	r23
    114a:	8f 93       	push	r24
    114c:	9f 93       	push	r25
    114e:	af 93       	push	r26
    1150:	bf 93       	push	r27
    1152:	ef 93       	push	r30
    1154:	ff 93       	push	r31
    1156:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
    115a:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <__data_end+0x1>
    115e:	ac 01       	movw	r20, r24
    1160:	09 2e       	mov	r0, r25
    1162:	00 0c       	add	r0, r0
    1164:	66 0b       	sbc	r22, r22
    1166:	77 0b       	sbc	r23, r23
    1168:	9a 01       	movw	r18, r20
    116a:	11 27       	eor	r17, r17
    116c:	00 27       	eor	r16, r16
    116e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1172:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1176:	60 e0       	ldi	r22, 0x00	; 0
    1178:	70 e0       	ldi	r23, 0x00	; 0
    117a:	40 2b       	or	r20, r16
    117c:	51 2b       	or	r21, r17
    117e:	62 2b       	or	r22, r18
    1180:	73 2b       	or	r23, r19
    1182:	40 93 38 01 	sts	0x0138, r20	; 0x800138 <timestamp>
    1186:	50 93 39 01 	sts	0x0139, r21	; 0x800139 <timestamp+0x1>
    118a:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <timestamp+0x2>
    118e:	70 93 3b 01 	sts	0x013B, r23	; 0x80013b <timestamp+0x3>
    1192:	b0 9b       	sbis	0x16, 0	; 22
    1194:	1a c0       	rjmp	.+52     	; 0x11ca <__vector_11+0x9a>
    1196:	01 96       	adiw	r24, 0x01	; 1
    1198:	09 2e       	mov	r0, r25
    119a:	00 0c       	add	r0, r0
    119c:	aa 0b       	sbc	r26, r26
    119e:	bb 0b       	sbc	r27, r27
    11a0:	bc 01       	movw	r22, r24
    11a2:	55 27       	eor	r21, r21
    11a4:	44 27       	eor	r20, r20
    11a6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11aa:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    11ae:	a0 e0       	ldi	r26, 0x00	; 0
    11b0:	b0 e0       	ldi	r27, 0x00	; 0
    11b2:	84 2b       	or	r24, r20
    11b4:	95 2b       	or	r25, r21
    11b6:	a6 2b       	or	r26, r22
    11b8:	b7 2b       	or	r27, r23
    11ba:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
    11be:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
    11c2:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
    11c6:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
    11ca:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <mtable+0xc>
    11ce:	f0 91 e5 01 	lds	r31, 0x01E5	; 0x8001e5 <mtable+0xd>
    11d2:	30 97       	sbiw	r30, 0x00	; 0
    11d4:	39 f0       	breq	.+14     	; 0x11e4 <__vector_11+0xb4>
    11d6:	66 e0       	ldi	r22, 0x06	; 6
    11d8:	70 e0       	ldi	r23, 0x00	; 0
    11da:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <otable+0xc>
    11de:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <otable+0xd>
    11e2:	09 95       	icall
    11e4:	0e 94 ca 05 	call	0xb94	; 0xb94 <schedule>
    11e8:	ff 91       	pop	r31
    11ea:	ef 91       	pop	r30
    11ec:	bf 91       	pop	r27
    11ee:	af 91       	pop	r26
    11f0:	9f 91       	pop	r25
    11f2:	8f 91       	pop	r24
    11f4:	7f 91       	pop	r23
    11f6:	6f 91       	pop	r22
    11f8:	5f 91       	pop	r21
    11fa:	4f 91       	pop	r20
    11fc:	3f 91       	pop	r19
    11fe:	2f 91       	pop	r18
    1200:	1f 91       	pop	r17
    1202:	0f 91       	pop	r16
    1204:	0f 90       	pop	r0
    1206:	0f be       	out	0x3f, r0	; 63
    1208:	0f 90       	pop	r0
    120a:	1f 90       	pop	r1
    120c:	18 95       	reti

0000120e <__vector_12>:
    120e:	1f 92       	push	r1
    1210:	0f 92       	push	r0
    1212:	0f b6       	in	r0, 0x3f	; 63
    1214:	0f 92       	push	r0
    1216:	11 24       	eor	r1, r1
    1218:	0f 93       	push	r16
    121a:	1f 93       	push	r17
    121c:	2f 93       	push	r18
    121e:	3f 93       	push	r19
    1220:	4f 93       	push	r20
    1222:	5f 93       	push	r21
    1224:	6f 93       	push	r22
    1226:	7f 93       	push	r23
    1228:	8f 93       	push	r24
    122a:	9f 93       	push	r25
    122c:	af 93       	push	r26
    122e:	bf 93       	push	r27
    1230:	ef 93       	push	r30
    1232:	ff 93       	push	r31
    1234:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
    1238:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <__data_end+0x1>
    123c:	ac 01       	movw	r20, r24
    123e:	09 2e       	mov	r0, r25
    1240:	00 0c       	add	r0, r0
    1242:	66 0b       	sbc	r22, r22
    1244:	77 0b       	sbc	r23, r23
    1246:	9a 01       	movw	r18, r20
    1248:	11 27       	eor	r17, r17
    124a:	00 27       	eor	r16, r16
    124c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1250:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1254:	60 e0       	ldi	r22, 0x00	; 0
    1256:	70 e0       	ldi	r23, 0x00	; 0
    1258:	40 2b       	or	r20, r16
    125a:	51 2b       	or	r21, r17
    125c:	62 2b       	or	r22, r18
    125e:	73 2b       	or	r23, r19
    1260:	40 93 38 01 	sts	0x0138, r20	; 0x800138 <timestamp>
    1264:	50 93 39 01 	sts	0x0139, r21	; 0x800139 <timestamp+0x1>
    1268:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <timestamp+0x2>
    126c:	70 93 3b 01 	sts	0x013B, r23	; 0x80013b <timestamp+0x3>
    1270:	b0 9b       	sbis	0x16, 0	; 22
    1272:	1a c0       	rjmp	.+52     	; 0x12a8 <__vector_12+0x9a>
    1274:	01 96       	adiw	r24, 0x01	; 1
    1276:	09 2e       	mov	r0, r25
    1278:	00 0c       	add	r0, r0
    127a:	aa 0b       	sbc	r26, r26
    127c:	bb 0b       	sbc	r27, r27
    127e:	bc 01       	movw	r22, r24
    1280:	55 27       	eor	r21, r21
    1282:	44 27       	eor	r20, r20
    1284:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1288:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    128c:	a0 e0       	ldi	r26, 0x00	; 0
    128e:	b0 e0       	ldi	r27, 0x00	; 0
    1290:	84 2b       	or	r24, r20
    1292:	95 2b       	or	r25, r21
    1294:	a6 2b       	or	r26, r22
    1296:	b7 2b       	or	r27, r23
    1298:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
    129c:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
    12a0:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
    12a4:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
    12a8:	e0 91 e6 01 	lds	r30, 0x01E6	; 0x8001e6 <mtable+0xe>
    12ac:	f0 91 e7 01 	lds	r31, 0x01E7	; 0x8001e7 <mtable+0xf>
    12b0:	30 97       	sbiw	r30, 0x00	; 0
    12b2:	39 f0       	breq	.+14     	; 0x12c2 <__vector_12+0xb4>
    12b4:	67 e0       	ldi	r22, 0x07	; 7
    12b6:	70 e0       	ldi	r23, 0x00	; 0
    12b8:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <otable+0xe>
    12bc:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <otable+0xf>
    12c0:	09 95       	icall
    12c2:	0e 94 ca 05 	call	0xb94	; 0xb94 <schedule>
    12c6:	ff 91       	pop	r31
    12c8:	ef 91       	pop	r30
    12ca:	bf 91       	pop	r27
    12cc:	af 91       	pop	r26
    12ce:	9f 91       	pop	r25
    12d0:	8f 91       	pop	r24
    12d2:	7f 91       	pop	r23
    12d4:	6f 91       	pop	r22
    12d6:	5f 91       	pop	r21
    12d8:	4f 91       	pop	r20
    12da:	3f 91       	pop	r19
    12dc:	2f 91       	pop	r18
    12de:	1f 91       	pop	r17
    12e0:	0f 91       	pop	r16
    12e2:	0f 90       	pop	r0
    12e4:	0f be       	out	0x3f, r0	; 63
    12e6:	0f 90       	pop	r0
    12e8:	1f 90       	pop	r1
    12ea:	18 95       	reti

000012ec <__vector_13>:
    12ec:	1f 92       	push	r1
    12ee:	0f 92       	push	r0
    12f0:	0f b6       	in	r0, 0x3f	; 63
    12f2:	0f 92       	push	r0
    12f4:	11 24       	eor	r1, r1
    12f6:	0f 93       	push	r16
    12f8:	1f 93       	push	r17
    12fa:	2f 93       	push	r18
    12fc:	3f 93       	push	r19
    12fe:	4f 93       	push	r20
    1300:	5f 93       	push	r21
    1302:	6f 93       	push	r22
    1304:	7f 93       	push	r23
    1306:	8f 93       	push	r24
    1308:	9f 93       	push	r25
    130a:	af 93       	push	r26
    130c:	bf 93       	push	r27
    130e:	ef 93       	push	r30
    1310:	ff 93       	push	r31
    1312:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
    1316:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <__data_end+0x1>
    131a:	ac 01       	movw	r20, r24
    131c:	09 2e       	mov	r0, r25
    131e:	00 0c       	add	r0, r0
    1320:	66 0b       	sbc	r22, r22
    1322:	77 0b       	sbc	r23, r23
    1324:	9a 01       	movw	r18, r20
    1326:	11 27       	eor	r17, r17
    1328:	00 27       	eor	r16, r16
    132a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    132e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1332:	60 e0       	ldi	r22, 0x00	; 0
    1334:	70 e0       	ldi	r23, 0x00	; 0
    1336:	40 2b       	or	r20, r16
    1338:	51 2b       	or	r21, r17
    133a:	62 2b       	or	r22, r18
    133c:	73 2b       	or	r23, r19
    133e:	40 93 38 01 	sts	0x0138, r20	; 0x800138 <timestamp>
    1342:	50 93 39 01 	sts	0x0139, r21	; 0x800139 <timestamp+0x1>
    1346:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <timestamp+0x2>
    134a:	70 93 3b 01 	sts	0x013B, r23	; 0x80013b <timestamp+0x3>
    134e:	b0 9b       	sbis	0x16, 0	; 22
    1350:	1a c0       	rjmp	.+52     	; 0x1386 <__vector_13+0x9a>
    1352:	01 96       	adiw	r24, 0x01	; 1
    1354:	09 2e       	mov	r0, r25
    1356:	00 0c       	add	r0, r0
    1358:	aa 0b       	sbc	r26, r26
    135a:	bb 0b       	sbc	r27, r27
    135c:	bc 01       	movw	r22, r24
    135e:	55 27       	eor	r21, r21
    1360:	44 27       	eor	r20, r20
    1362:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1366:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    136a:	a0 e0       	ldi	r26, 0x00	; 0
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	84 2b       	or	r24, r20
    1370:	95 2b       	or	r25, r21
    1372:	a6 2b       	or	r26, r22
    1374:	b7 2b       	or	r27, r23
    1376:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
    137a:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
    137e:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
    1382:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
    1386:	e0 91 e8 01 	lds	r30, 0x01E8	; 0x8001e8 <mtable+0x10>
    138a:	f0 91 e9 01 	lds	r31, 0x01E9	; 0x8001e9 <mtable+0x11>
    138e:	30 97       	sbiw	r30, 0x00	; 0
    1390:	39 f0       	breq	.+14     	; 0x13a0 <__vector_13+0xb4>
    1392:	68 e0       	ldi	r22, 0x08	; 8
    1394:	70 e0       	ldi	r23, 0x00	; 0
    1396:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <otable+0x10>
    139a:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <otable+0x11>
    139e:	09 95       	icall
    13a0:	0e 94 ca 05 	call	0xb94	; 0xb94 <schedule>
    13a4:	ff 91       	pop	r31
    13a6:	ef 91       	pop	r30
    13a8:	bf 91       	pop	r27
    13aa:	af 91       	pop	r26
    13ac:	9f 91       	pop	r25
    13ae:	8f 91       	pop	r24
    13b0:	7f 91       	pop	r23
    13b2:	6f 91       	pop	r22
    13b4:	5f 91       	pop	r21
    13b6:	4f 91       	pop	r20
    13b8:	3f 91       	pop	r19
    13ba:	2f 91       	pop	r18
    13bc:	1f 91       	pop	r17
    13be:	0f 91       	pop	r16
    13c0:	0f 90       	pop	r0
    13c2:	0f be       	out	0x3f, r0	; 63
    13c4:	0f 90       	pop	r0
    13c6:	1f 90       	pop	r1
    13c8:	18 95       	reti

000013ca <__vector_14>:
    13ca:	1f 92       	push	r1
    13cc:	0f 92       	push	r0
    13ce:	0f b6       	in	r0, 0x3f	; 63
    13d0:	0f 92       	push	r0
    13d2:	11 24       	eor	r1, r1
    13d4:	0f 93       	push	r16
    13d6:	1f 93       	push	r17
    13d8:	2f 93       	push	r18
    13da:	3f 93       	push	r19
    13dc:	4f 93       	push	r20
    13de:	5f 93       	push	r21
    13e0:	6f 93       	push	r22
    13e2:	7f 93       	push	r23
    13e4:	8f 93       	push	r24
    13e6:	9f 93       	push	r25
    13e8:	af 93       	push	r26
    13ea:	bf 93       	push	r27
    13ec:	ef 93       	push	r30
    13ee:	ff 93       	push	r31
    13f0:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
    13f4:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <__data_end+0x1>
    13f8:	ac 01       	movw	r20, r24
    13fa:	09 2e       	mov	r0, r25
    13fc:	00 0c       	add	r0, r0
    13fe:	66 0b       	sbc	r22, r22
    1400:	77 0b       	sbc	r23, r23
    1402:	9a 01       	movw	r18, r20
    1404:	11 27       	eor	r17, r17
    1406:	00 27       	eor	r16, r16
    1408:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    140c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1410:	60 e0       	ldi	r22, 0x00	; 0
    1412:	70 e0       	ldi	r23, 0x00	; 0
    1414:	40 2b       	or	r20, r16
    1416:	51 2b       	or	r21, r17
    1418:	62 2b       	or	r22, r18
    141a:	73 2b       	or	r23, r19
    141c:	40 93 38 01 	sts	0x0138, r20	; 0x800138 <timestamp>
    1420:	50 93 39 01 	sts	0x0139, r21	; 0x800139 <timestamp+0x1>
    1424:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <timestamp+0x2>
    1428:	70 93 3b 01 	sts	0x013B, r23	; 0x80013b <timestamp+0x3>
    142c:	b0 9b       	sbis	0x16, 0	; 22
    142e:	1a c0       	rjmp	.+52     	; 0x1464 <__vector_14+0x9a>
    1430:	01 96       	adiw	r24, 0x01	; 1
    1432:	09 2e       	mov	r0, r25
    1434:	00 0c       	add	r0, r0
    1436:	aa 0b       	sbc	r26, r26
    1438:	bb 0b       	sbc	r27, r27
    143a:	bc 01       	movw	r22, r24
    143c:	55 27       	eor	r21, r21
    143e:	44 27       	eor	r20, r20
    1440:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1444:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1448:	a0 e0       	ldi	r26, 0x00	; 0
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	84 2b       	or	r24, r20
    144e:	95 2b       	or	r25, r21
    1450:	a6 2b       	or	r26, r22
    1452:	b7 2b       	or	r27, r23
    1454:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
    1458:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
    145c:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
    1460:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
    1464:	e0 91 ea 01 	lds	r30, 0x01EA	; 0x8001ea <mtable+0x12>
    1468:	f0 91 eb 01 	lds	r31, 0x01EB	; 0x8001eb <mtable+0x13>
    146c:	30 97       	sbiw	r30, 0x00	; 0
    146e:	39 f0       	breq	.+14     	; 0x147e <__vector_14+0xb4>
    1470:	69 e0       	ldi	r22, 0x09	; 9
    1472:	70 e0       	ldi	r23, 0x00	; 0
    1474:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <otable+0x12>
    1478:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <otable+0x13>
    147c:	09 95       	icall
    147e:	0e 94 ca 05 	call	0xb94	; 0xb94 <schedule>
    1482:	ff 91       	pop	r31
    1484:	ef 91       	pop	r30
    1486:	bf 91       	pop	r27
    1488:	af 91       	pop	r26
    148a:	9f 91       	pop	r25
    148c:	8f 91       	pop	r24
    148e:	7f 91       	pop	r23
    1490:	6f 91       	pop	r22
    1492:	5f 91       	pop	r21
    1494:	4f 91       	pop	r20
    1496:	3f 91       	pop	r19
    1498:	2f 91       	pop	r18
    149a:	1f 91       	pop	r17
    149c:	0f 91       	pop	r16
    149e:	0f 90       	pop	r0
    14a0:	0f be       	out	0x3f, r0	; 63
    14a2:	0f 90       	pop	r0
    14a4:	1f 90       	pop	r1
    14a6:	18 95       	reti

000014a8 <__vector_15>:
    14a8:	1f 92       	push	r1
    14aa:	0f 92       	push	r0
    14ac:	0f b6       	in	r0, 0x3f	; 63
    14ae:	0f 92       	push	r0
    14b0:	11 24       	eor	r1, r1
    14b2:	0f 93       	push	r16
    14b4:	1f 93       	push	r17
    14b6:	2f 93       	push	r18
    14b8:	3f 93       	push	r19
    14ba:	4f 93       	push	r20
    14bc:	5f 93       	push	r21
    14be:	6f 93       	push	r22
    14c0:	7f 93       	push	r23
    14c2:	8f 93       	push	r24
    14c4:	9f 93       	push	r25
    14c6:	af 93       	push	r26
    14c8:	bf 93       	push	r27
    14ca:	ef 93       	push	r30
    14cc:	ff 93       	push	r31
    14ce:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
    14d2:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <__data_end+0x1>
    14d6:	ac 01       	movw	r20, r24
    14d8:	09 2e       	mov	r0, r25
    14da:	00 0c       	add	r0, r0
    14dc:	66 0b       	sbc	r22, r22
    14de:	77 0b       	sbc	r23, r23
    14e0:	9a 01       	movw	r18, r20
    14e2:	11 27       	eor	r17, r17
    14e4:	00 27       	eor	r16, r16
    14e6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    14ea:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    14ee:	60 e0       	ldi	r22, 0x00	; 0
    14f0:	70 e0       	ldi	r23, 0x00	; 0
    14f2:	40 2b       	or	r20, r16
    14f4:	51 2b       	or	r21, r17
    14f6:	62 2b       	or	r22, r18
    14f8:	73 2b       	or	r23, r19
    14fa:	40 93 38 01 	sts	0x0138, r20	; 0x800138 <timestamp>
    14fe:	50 93 39 01 	sts	0x0139, r21	; 0x800139 <timestamp+0x1>
    1502:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <timestamp+0x2>
    1506:	70 93 3b 01 	sts	0x013B, r23	; 0x80013b <timestamp+0x3>
    150a:	b0 9b       	sbis	0x16, 0	; 22
    150c:	1a c0       	rjmp	.+52     	; 0x1542 <__vector_15+0x9a>
    150e:	01 96       	adiw	r24, 0x01	; 1
    1510:	09 2e       	mov	r0, r25
    1512:	00 0c       	add	r0, r0
    1514:	aa 0b       	sbc	r26, r26
    1516:	bb 0b       	sbc	r27, r27
    1518:	bc 01       	movw	r22, r24
    151a:	55 27       	eor	r21, r21
    151c:	44 27       	eor	r20, r20
    151e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1522:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1526:	a0 e0       	ldi	r26, 0x00	; 0
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	84 2b       	or	r24, r20
    152c:	95 2b       	or	r25, r21
    152e:	a6 2b       	or	r26, r22
    1530:	b7 2b       	or	r27, r23
    1532:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
    1536:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
    153a:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
    153e:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
    1542:	e0 91 ec 01 	lds	r30, 0x01EC	; 0x8001ec <mtable+0x14>
    1546:	f0 91 ed 01 	lds	r31, 0x01ED	; 0x8001ed <mtable+0x15>
    154a:	30 97       	sbiw	r30, 0x00	; 0
    154c:	39 f0       	breq	.+14     	; 0x155c <__vector_15+0xb4>
    154e:	6a e0       	ldi	r22, 0x0A	; 10
    1550:	70 e0       	ldi	r23, 0x00	; 0
    1552:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <otable+0x14>
    1556:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <otable+0x15>
    155a:	09 95       	icall
    155c:	0e 94 ca 05 	call	0xb94	; 0xb94 <schedule>
    1560:	ff 91       	pop	r31
    1562:	ef 91       	pop	r30
    1564:	bf 91       	pop	r27
    1566:	af 91       	pop	r26
    1568:	9f 91       	pop	r25
    156a:	8f 91       	pop	r24
    156c:	7f 91       	pop	r23
    156e:	6f 91       	pop	r22
    1570:	5f 91       	pop	r21
    1572:	4f 91       	pop	r20
    1574:	3f 91       	pop	r19
    1576:	2f 91       	pop	r18
    1578:	1f 91       	pop	r17
    157a:	0f 91       	pop	r16
    157c:	0f 90       	pop	r0
    157e:	0f be       	out	0x3f, r0	; 63
    1580:	0f 90       	pop	r0
    1582:	1f 90       	pop	r1
    1584:	18 95       	reti

00001586 <__vector_16>:
    1586:	1f 92       	push	r1
    1588:	0f 92       	push	r0
    158a:	0f b6       	in	r0, 0x3f	; 63
    158c:	0f 92       	push	r0
    158e:	11 24       	eor	r1, r1
    1590:	0f 93       	push	r16
    1592:	1f 93       	push	r17
    1594:	2f 93       	push	r18
    1596:	3f 93       	push	r19
    1598:	4f 93       	push	r20
    159a:	5f 93       	push	r21
    159c:	6f 93       	push	r22
    159e:	7f 93       	push	r23
    15a0:	8f 93       	push	r24
    15a2:	9f 93       	push	r25
    15a4:	af 93       	push	r26
    15a6:	bf 93       	push	r27
    15a8:	ef 93       	push	r30
    15aa:	ff 93       	push	r31
    15ac:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
    15b0:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <__data_end+0x1>
    15b4:	ac 01       	movw	r20, r24
    15b6:	09 2e       	mov	r0, r25
    15b8:	00 0c       	add	r0, r0
    15ba:	66 0b       	sbc	r22, r22
    15bc:	77 0b       	sbc	r23, r23
    15be:	9a 01       	movw	r18, r20
    15c0:	11 27       	eor	r17, r17
    15c2:	00 27       	eor	r16, r16
    15c4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    15c8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    15cc:	60 e0       	ldi	r22, 0x00	; 0
    15ce:	70 e0       	ldi	r23, 0x00	; 0
    15d0:	40 2b       	or	r20, r16
    15d2:	51 2b       	or	r21, r17
    15d4:	62 2b       	or	r22, r18
    15d6:	73 2b       	or	r23, r19
    15d8:	40 93 38 01 	sts	0x0138, r20	; 0x800138 <timestamp>
    15dc:	50 93 39 01 	sts	0x0139, r21	; 0x800139 <timestamp+0x1>
    15e0:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <timestamp+0x2>
    15e4:	70 93 3b 01 	sts	0x013B, r23	; 0x80013b <timestamp+0x3>
    15e8:	b0 9b       	sbis	0x16, 0	; 22
    15ea:	1a c0       	rjmp	.+52     	; 0x1620 <__vector_16+0x9a>
    15ec:	01 96       	adiw	r24, 0x01	; 1
    15ee:	09 2e       	mov	r0, r25
    15f0:	00 0c       	add	r0, r0
    15f2:	aa 0b       	sbc	r26, r26
    15f4:	bb 0b       	sbc	r27, r27
    15f6:	bc 01       	movw	r22, r24
    15f8:	55 27       	eor	r21, r21
    15fa:	44 27       	eor	r20, r20
    15fc:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1600:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1604:	a0 e0       	ldi	r26, 0x00	; 0
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	84 2b       	or	r24, r20
    160a:	95 2b       	or	r25, r21
    160c:	a6 2b       	or	r26, r22
    160e:	b7 2b       	or	r27, r23
    1610:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
    1614:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
    1618:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
    161c:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
    1620:	e0 91 ee 01 	lds	r30, 0x01EE	; 0x8001ee <mtable+0x16>
    1624:	f0 91 ef 01 	lds	r31, 0x01EF	; 0x8001ef <mtable+0x17>
    1628:	30 97       	sbiw	r30, 0x00	; 0
    162a:	39 f0       	breq	.+14     	; 0x163a <__vector_16+0xb4>
    162c:	6b e0       	ldi	r22, 0x0B	; 11
    162e:	70 e0       	ldi	r23, 0x00	; 0
    1630:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <otable+0x16>
    1634:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <otable+0x17>
    1638:	09 95       	icall
    163a:	0e 94 ca 05 	call	0xb94	; 0xb94 <schedule>
    163e:	ff 91       	pop	r31
    1640:	ef 91       	pop	r30
    1642:	bf 91       	pop	r27
    1644:	af 91       	pop	r26
    1646:	9f 91       	pop	r25
    1648:	8f 91       	pop	r24
    164a:	7f 91       	pop	r23
    164c:	6f 91       	pop	r22
    164e:	5f 91       	pop	r21
    1650:	4f 91       	pop	r20
    1652:	3f 91       	pop	r19
    1654:	2f 91       	pop	r18
    1656:	1f 91       	pop	r17
    1658:	0f 91       	pop	r16
    165a:	0f 90       	pop	r0
    165c:	0f be       	out	0x3f, r0	; 63
    165e:	0f 90       	pop	r0
    1660:	1f 90       	pop	r1
    1662:	18 95       	reti

00001664 <__vector_17>:
    1664:	1f 92       	push	r1
    1666:	0f 92       	push	r0
    1668:	0f b6       	in	r0, 0x3f	; 63
    166a:	0f 92       	push	r0
    166c:	11 24       	eor	r1, r1
    166e:	0f 93       	push	r16
    1670:	1f 93       	push	r17
    1672:	2f 93       	push	r18
    1674:	3f 93       	push	r19
    1676:	4f 93       	push	r20
    1678:	5f 93       	push	r21
    167a:	6f 93       	push	r22
    167c:	7f 93       	push	r23
    167e:	8f 93       	push	r24
    1680:	9f 93       	push	r25
    1682:	af 93       	push	r26
    1684:	bf 93       	push	r27
    1686:	ef 93       	push	r30
    1688:	ff 93       	push	r31
    168a:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
    168e:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <__data_end+0x1>
    1692:	ac 01       	movw	r20, r24
    1694:	09 2e       	mov	r0, r25
    1696:	00 0c       	add	r0, r0
    1698:	66 0b       	sbc	r22, r22
    169a:	77 0b       	sbc	r23, r23
    169c:	9a 01       	movw	r18, r20
    169e:	11 27       	eor	r17, r17
    16a0:	00 27       	eor	r16, r16
    16a2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    16a6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    16aa:	60 e0       	ldi	r22, 0x00	; 0
    16ac:	70 e0       	ldi	r23, 0x00	; 0
    16ae:	40 2b       	or	r20, r16
    16b0:	51 2b       	or	r21, r17
    16b2:	62 2b       	or	r22, r18
    16b4:	73 2b       	or	r23, r19
    16b6:	40 93 38 01 	sts	0x0138, r20	; 0x800138 <timestamp>
    16ba:	50 93 39 01 	sts	0x0139, r21	; 0x800139 <timestamp+0x1>
    16be:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <timestamp+0x2>
    16c2:	70 93 3b 01 	sts	0x013B, r23	; 0x80013b <timestamp+0x3>
    16c6:	b0 9b       	sbis	0x16, 0	; 22
    16c8:	1a c0       	rjmp	.+52     	; 0x16fe <__vector_17+0x9a>
    16ca:	01 96       	adiw	r24, 0x01	; 1
    16cc:	09 2e       	mov	r0, r25
    16ce:	00 0c       	add	r0, r0
    16d0:	aa 0b       	sbc	r26, r26
    16d2:	bb 0b       	sbc	r27, r27
    16d4:	bc 01       	movw	r22, r24
    16d6:	55 27       	eor	r21, r21
    16d8:	44 27       	eor	r20, r20
    16da:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    16de:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    16e2:	a0 e0       	ldi	r26, 0x00	; 0
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	84 2b       	or	r24, r20
    16e8:	95 2b       	or	r25, r21
    16ea:	a6 2b       	or	r26, r22
    16ec:	b7 2b       	or	r27, r23
    16ee:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
    16f2:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
    16f6:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
    16fa:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
    16fe:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <mtable+0x18>
    1702:	f0 91 f1 01 	lds	r31, 0x01F1	; 0x8001f1 <mtable+0x19>
    1706:	30 97       	sbiw	r30, 0x00	; 0
    1708:	39 f0       	breq	.+14     	; 0x1718 <__vector_17+0xb4>
    170a:	6c e0       	ldi	r22, 0x0C	; 12
    170c:	70 e0       	ldi	r23, 0x00	; 0
    170e:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <otable+0x18>
    1712:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <otable+0x19>
    1716:	09 95       	icall
    1718:	0e 94 ca 05 	call	0xb94	; 0xb94 <schedule>
    171c:	ff 91       	pop	r31
    171e:	ef 91       	pop	r30
    1720:	bf 91       	pop	r27
    1722:	af 91       	pop	r26
    1724:	9f 91       	pop	r25
    1726:	8f 91       	pop	r24
    1728:	7f 91       	pop	r23
    172a:	6f 91       	pop	r22
    172c:	5f 91       	pop	r21
    172e:	4f 91       	pop	r20
    1730:	3f 91       	pop	r19
    1732:	2f 91       	pop	r18
    1734:	1f 91       	pop	r17
    1736:	0f 91       	pop	r16
    1738:	0f 90       	pop	r0
    173a:	0f be       	out	0x3f, r0	; 63
    173c:	0f 90       	pop	r0
    173e:	1f 90       	pop	r1
    1740:	18 95       	reti

00001742 <__vector_18>:
    1742:	1f 92       	push	r1
    1744:	0f 92       	push	r0
    1746:	0f b6       	in	r0, 0x3f	; 63
    1748:	0f 92       	push	r0
    174a:	11 24       	eor	r1, r1
    174c:	0f 93       	push	r16
    174e:	1f 93       	push	r17
    1750:	2f 93       	push	r18
    1752:	3f 93       	push	r19
    1754:	4f 93       	push	r20
    1756:	5f 93       	push	r21
    1758:	6f 93       	push	r22
    175a:	7f 93       	push	r23
    175c:	8f 93       	push	r24
    175e:	9f 93       	push	r25
    1760:	af 93       	push	r26
    1762:	bf 93       	push	r27
    1764:	ef 93       	push	r30
    1766:	ff 93       	push	r31
    1768:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
    176c:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <__data_end+0x1>
    1770:	ac 01       	movw	r20, r24
    1772:	09 2e       	mov	r0, r25
    1774:	00 0c       	add	r0, r0
    1776:	66 0b       	sbc	r22, r22
    1778:	77 0b       	sbc	r23, r23
    177a:	9a 01       	movw	r18, r20
    177c:	11 27       	eor	r17, r17
    177e:	00 27       	eor	r16, r16
    1780:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1784:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1788:	60 e0       	ldi	r22, 0x00	; 0
    178a:	70 e0       	ldi	r23, 0x00	; 0
    178c:	40 2b       	or	r20, r16
    178e:	51 2b       	or	r21, r17
    1790:	62 2b       	or	r22, r18
    1792:	73 2b       	or	r23, r19
    1794:	40 93 38 01 	sts	0x0138, r20	; 0x800138 <timestamp>
    1798:	50 93 39 01 	sts	0x0139, r21	; 0x800139 <timestamp+0x1>
    179c:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <timestamp+0x2>
    17a0:	70 93 3b 01 	sts	0x013B, r23	; 0x80013b <timestamp+0x3>
    17a4:	b0 9b       	sbis	0x16, 0	; 22
    17a6:	1a c0       	rjmp	.+52     	; 0x17dc <__vector_18+0x9a>
    17a8:	01 96       	adiw	r24, 0x01	; 1
    17aa:	09 2e       	mov	r0, r25
    17ac:	00 0c       	add	r0, r0
    17ae:	aa 0b       	sbc	r26, r26
    17b0:	bb 0b       	sbc	r27, r27
    17b2:	bc 01       	movw	r22, r24
    17b4:	55 27       	eor	r21, r21
    17b6:	44 27       	eor	r20, r20
    17b8:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    17bc:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    17c0:	a0 e0       	ldi	r26, 0x00	; 0
    17c2:	b0 e0       	ldi	r27, 0x00	; 0
    17c4:	84 2b       	or	r24, r20
    17c6:	95 2b       	or	r25, r21
    17c8:	a6 2b       	or	r26, r22
    17ca:	b7 2b       	or	r27, r23
    17cc:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
    17d0:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
    17d4:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
    17d8:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
    17dc:	e0 91 f2 01 	lds	r30, 0x01F2	; 0x8001f2 <mtable+0x1a>
    17e0:	f0 91 f3 01 	lds	r31, 0x01F3	; 0x8001f3 <mtable+0x1b>
    17e4:	30 97       	sbiw	r30, 0x00	; 0
    17e6:	39 f0       	breq	.+14     	; 0x17f6 <__vector_18+0xb4>
    17e8:	6d e0       	ldi	r22, 0x0D	; 13
    17ea:	70 e0       	ldi	r23, 0x00	; 0
    17ec:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <otable+0x1a>
    17f0:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <otable+0x1b>
    17f4:	09 95       	icall
    17f6:	0e 94 ca 05 	call	0xb94	; 0xb94 <schedule>
    17fa:	ff 91       	pop	r31
    17fc:	ef 91       	pop	r30
    17fe:	bf 91       	pop	r27
    1800:	af 91       	pop	r26
    1802:	9f 91       	pop	r25
    1804:	8f 91       	pop	r24
    1806:	7f 91       	pop	r23
    1808:	6f 91       	pop	r22
    180a:	5f 91       	pop	r21
    180c:	4f 91       	pop	r20
    180e:	3f 91       	pop	r19
    1810:	2f 91       	pop	r18
    1812:	1f 91       	pop	r17
    1814:	0f 91       	pop	r16
    1816:	0f 90       	pop	r0
    1818:	0f be       	out	0x3f, r0	; 63
    181a:	0f 90       	pop	r0
    181c:	1f 90       	pop	r1
    181e:	18 95       	reti

00001820 <__vector_19>:
    1820:	1f 92       	push	r1
    1822:	0f 92       	push	r0
    1824:	0f b6       	in	r0, 0x3f	; 63
    1826:	0f 92       	push	r0
    1828:	11 24       	eor	r1, r1
    182a:	0f 93       	push	r16
    182c:	1f 93       	push	r17
    182e:	2f 93       	push	r18
    1830:	3f 93       	push	r19
    1832:	4f 93       	push	r20
    1834:	5f 93       	push	r21
    1836:	6f 93       	push	r22
    1838:	7f 93       	push	r23
    183a:	8f 93       	push	r24
    183c:	9f 93       	push	r25
    183e:	af 93       	push	r26
    1840:	bf 93       	push	r27
    1842:	ef 93       	push	r30
    1844:	ff 93       	push	r31
    1846:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
    184a:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <__data_end+0x1>
    184e:	ac 01       	movw	r20, r24
    1850:	09 2e       	mov	r0, r25
    1852:	00 0c       	add	r0, r0
    1854:	66 0b       	sbc	r22, r22
    1856:	77 0b       	sbc	r23, r23
    1858:	9a 01       	movw	r18, r20
    185a:	11 27       	eor	r17, r17
    185c:	00 27       	eor	r16, r16
    185e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1862:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1866:	60 e0       	ldi	r22, 0x00	; 0
    1868:	70 e0       	ldi	r23, 0x00	; 0
    186a:	40 2b       	or	r20, r16
    186c:	51 2b       	or	r21, r17
    186e:	62 2b       	or	r22, r18
    1870:	73 2b       	or	r23, r19
    1872:	40 93 38 01 	sts	0x0138, r20	; 0x800138 <timestamp>
    1876:	50 93 39 01 	sts	0x0139, r21	; 0x800139 <timestamp+0x1>
    187a:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <timestamp+0x2>
    187e:	70 93 3b 01 	sts	0x013B, r23	; 0x80013b <timestamp+0x3>
    1882:	b0 9b       	sbis	0x16, 0	; 22
    1884:	1a c0       	rjmp	.+52     	; 0x18ba <__vector_19+0x9a>
    1886:	01 96       	adiw	r24, 0x01	; 1
    1888:	09 2e       	mov	r0, r25
    188a:	00 0c       	add	r0, r0
    188c:	aa 0b       	sbc	r26, r26
    188e:	bb 0b       	sbc	r27, r27
    1890:	bc 01       	movw	r22, r24
    1892:	55 27       	eor	r21, r21
    1894:	44 27       	eor	r20, r20
    1896:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    189a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    189e:	a0 e0       	ldi	r26, 0x00	; 0
    18a0:	b0 e0       	ldi	r27, 0x00	; 0
    18a2:	84 2b       	or	r24, r20
    18a4:	95 2b       	or	r25, r21
    18a6:	a6 2b       	or	r26, r22
    18a8:	b7 2b       	or	r27, r23
    18aa:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
    18ae:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
    18b2:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
    18b6:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
    18ba:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <mtable+0x1c>
    18be:	f0 91 f5 01 	lds	r31, 0x01F5	; 0x8001f5 <mtable+0x1d>
    18c2:	30 97       	sbiw	r30, 0x00	; 0
    18c4:	39 f0       	breq	.+14     	; 0x18d4 <__vector_19+0xb4>
    18c6:	6e e0       	ldi	r22, 0x0E	; 14
    18c8:	70 e0       	ldi	r23, 0x00	; 0
    18ca:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <otable+0x1c>
    18ce:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <otable+0x1d>
    18d2:	09 95       	icall
    18d4:	0e 94 ca 05 	call	0xb94	; 0xb94 <schedule>
    18d8:	ff 91       	pop	r31
    18da:	ef 91       	pop	r30
    18dc:	bf 91       	pop	r27
    18de:	af 91       	pop	r26
    18e0:	9f 91       	pop	r25
    18e2:	8f 91       	pop	r24
    18e4:	7f 91       	pop	r23
    18e6:	6f 91       	pop	r22
    18e8:	5f 91       	pop	r21
    18ea:	4f 91       	pop	r20
    18ec:	3f 91       	pop	r19
    18ee:	2f 91       	pop	r18
    18f0:	1f 91       	pop	r17
    18f2:	0f 91       	pop	r16
    18f4:	0f 90       	pop	r0
    18f6:	0f be       	out	0x3f, r0	; 63
    18f8:	0f 90       	pop	r0
    18fa:	1f 90       	pop	r1
    18fc:	18 95       	reti

000018fe <__vector_20>:
    18fe:	1f 92       	push	r1
    1900:	0f 92       	push	r0
    1902:	0f b6       	in	r0, 0x3f	; 63
    1904:	0f 92       	push	r0
    1906:	11 24       	eor	r1, r1
    1908:	0f 93       	push	r16
    190a:	1f 93       	push	r17
    190c:	2f 93       	push	r18
    190e:	3f 93       	push	r19
    1910:	4f 93       	push	r20
    1912:	5f 93       	push	r21
    1914:	6f 93       	push	r22
    1916:	7f 93       	push	r23
    1918:	8f 93       	push	r24
    191a:	9f 93       	push	r25
    191c:	af 93       	push	r26
    191e:	bf 93       	push	r27
    1920:	ef 93       	push	r30
    1922:	ff 93       	push	r31
    1924:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
    1928:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <__data_end+0x1>
    192c:	ac 01       	movw	r20, r24
    192e:	09 2e       	mov	r0, r25
    1930:	00 0c       	add	r0, r0
    1932:	66 0b       	sbc	r22, r22
    1934:	77 0b       	sbc	r23, r23
    1936:	9a 01       	movw	r18, r20
    1938:	11 27       	eor	r17, r17
    193a:	00 27       	eor	r16, r16
    193c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1940:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1944:	60 e0       	ldi	r22, 0x00	; 0
    1946:	70 e0       	ldi	r23, 0x00	; 0
    1948:	40 2b       	or	r20, r16
    194a:	51 2b       	or	r21, r17
    194c:	62 2b       	or	r22, r18
    194e:	73 2b       	or	r23, r19
    1950:	40 93 38 01 	sts	0x0138, r20	; 0x800138 <timestamp>
    1954:	50 93 39 01 	sts	0x0139, r21	; 0x800139 <timestamp+0x1>
    1958:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <timestamp+0x2>
    195c:	70 93 3b 01 	sts	0x013B, r23	; 0x80013b <timestamp+0x3>
    1960:	b0 9b       	sbis	0x16, 0	; 22
    1962:	1a c0       	rjmp	.+52     	; 0x1998 <__vector_20+0x9a>
    1964:	01 96       	adiw	r24, 0x01	; 1
    1966:	09 2e       	mov	r0, r25
    1968:	00 0c       	add	r0, r0
    196a:	aa 0b       	sbc	r26, r26
    196c:	bb 0b       	sbc	r27, r27
    196e:	bc 01       	movw	r22, r24
    1970:	55 27       	eor	r21, r21
    1972:	44 27       	eor	r20, r20
    1974:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1978:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    197c:	a0 e0       	ldi	r26, 0x00	; 0
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	84 2b       	or	r24, r20
    1982:	95 2b       	or	r25, r21
    1984:	a6 2b       	or	r26, r22
    1986:	b7 2b       	or	r27, r23
    1988:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
    198c:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
    1990:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
    1994:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
    1998:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <mtable+0x1e>
    199c:	f0 91 f7 01 	lds	r31, 0x01F7	; 0x8001f7 <mtable+0x1f>
    19a0:	30 97       	sbiw	r30, 0x00	; 0
    19a2:	39 f0       	breq	.+14     	; 0x19b2 <__vector_20+0xb4>
    19a4:	6f e0       	ldi	r22, 0x0F	; 15
    19a6:	70 e0       	ldi	r23, 0x00	; 0
    19a8:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <otable+0x1e>
    19ac:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <otable+0x1f>
    19b0:	09 95       	icall
    19b2:	0e 94 ca 05 	call	0xb94	; 0xb94 <schedule>
    19b6:	ff 91       	pop	r31
    19b8:	ef 91       	pop	r30
    19ba:	bf 91       	pop	r27
    19bc:	af 91       	pop	r26
    19be:	9f 91       	pop	r25
    19c0:	8f 91       	pop	r24
    19c2:	7f 91       	pop	r23
    19c4:	6f 91       	pop	r22
    19c6:	5f 91       	pop	r21
    19c8:	4f 91       	pop	r20
    19ca:	3f 91       	pop	r19
    19cc:	2f 91       	pop	r18
    19ce:	1f 91       	pop	r17
    19d0:	0f 91       	pop	r16
    19d2:	0f 90       	pop	r0
    19d4:	0f be       	out	0x3f, r0	; 63
    19d6:	0f 90       	pop	r0
    19d8:	1f 90       	pop	r1
    19da:	18 95       	reti

000019dc <__vector_21>:
    19dc:	1f 92       	push	r1
    19de:	0f 92       	push	r0
    19e0:	0f b6       	in	r0, 0x3f	; 63
    19e2:	0f 92       	push	r0
    19e4:	11 24       	eor	r1, r1
    19e6:	0f 93       	push	r16
    19e8:	1f 93       	push	r17
    19ea:	2f 93       	push	r18
    19ec:	3f 93       	push	r19
    19ee:	4f 93       	push	r20
    19f0:	5f 93       	push	r21
    19f2:	6f 93       	push	r22
    19f4:	7f 93       	push	r23
    19f6:	8f 93       	push	r24
    19f8:	9f 93       	push	r25
    19fa:	af 93       	push	r26
    19fc:	bf 93       	push	r27
    19fe:	ef 93       	push	r30
    1a00:	ff 93       	push	r31
    1a02:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
    1a06:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <__data_end+0x1>
    1a0a:	ac 01       	movw	r20, r24
    1a0c:	09 2e       	mov	r0, r25
    1a0e:	00 0c       	add	r0, r0
    1a10:	66 0b       	sbc	r22, r22
    1a12:	77 0b       	sbc	r23, r23
    1a14:	9a 01       	movw	r18, r20
    1a16:	11 27       	eor	r17, r17
    1a18:	00 27       	eor	r16, r16
    1a1a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a1e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a22:	60 e0       	ldi	r22, 0x00	; 0
    1a24:	70 e0       	ldi	r23, 0x00	; 0
    1a26:	40 2b       	or	r20, r16
    1a28:	51 2b       	or	r21, r17
    1a2a:	62 2b       	or	r22, r18
    1a2c:	73 2b       	or	r23, r19
    1a2e:	40 93 38 01 	sts	0x0138, r20	; 0x800138 <timestamp>
    1a32:	50 93 39 01 	sts	0x0139, r21	; 0x800139 <timestamp+0x1>
    1a36:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <timestamp+0x2>
    1a3a:	70 93 3b 01 	sts	0x013B, r23	; 0x80013b <timestamp+0x3>
    1a3e:	b0 9b       	sbis	0x16, 0	; 22
    1a40:	1a c0       	rjmp	.+52     	; 0x1a76 <__vector_21+0x9a>
    1a42:	01 96       	adiw	r24, 0x01	; 1
    1a44:	09 2e       	mov	r0, r25
    1a46:	00 0c       	add	r0, r0
    1a48:	aa 0b       	sbc	r26, r26
    1a4a:	bb 0b       	sbc	r27, r27
    1a4c:	bc 01       	movw	r22, r24
    1a4e:	55 27       	eor	r21, r21
    1a50:	44 27       	eor	r20, r20
    1a52:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a56:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a5a:	a0 e0       	ldi	r26, 0x00	; 0
    1a5c:	b0 e0       	ldi	r27, 0x00	; 0
    1a5e:	84 2b       	or	r24, r20
    1a60:	95 2b       	or	r25, r21
    1a62:	a6 2b       	or	r26, r22
    1a64:	b7 2b       	or	r27, r23
    1a66:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
    1a6a:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
    1a6e:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
    1a72:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
    1a76:	e0 91 f8 01 	lds	r30, 0x01F8	; 0x8001f8 <mtable+0x20>
    1a7a:	f0 91 f9 01 	lds	r31, 0x01F9	; 0x8001f9 <mtable+0x21>
    1a7e:	30 97       	sbiw	r30, 0x00	; 0
    1a80:	39 f0       	breq	.+14     	; 0x1a90 <__vector_21+0xb4>
    1a82:	60 e1       	ldi	r22, 0x10	; 16
    1a84:	70 e0       	ldi	r23, 0x00	; 0
    1a86:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <otable+0x20>
    1a8a:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <otable+0x21>
    1a8e:	09 95       	icall
    1a90:	0e 94 ca 05 	call	0xb94	; 0xb94 <schedule>
    1a94:	ff 91       	pop	r31
    1a96:	ef 91       	pop	r30
    1a98:	bf 91       	pop	r27
    1a9a:	af 91       	pop	r26
    1a9c:	9f 91       	pop	r25
    1a9e:	8f 91       	pop	r24
    1aa0:	7f 91       	pop	r23
    1aa2:	6f 91       	pop	r22
    1aa4:	5f 91       	pop	r21
    1aa6:	4f 91       	pop	r20
    1aa8:	3f 91       	pop	r19
    1aaa:	2f 91       	pop	r18
    1aac:	1f 91       	pop	r17
    1aae:	0f 91       	pop	r16
    1ab0:	0f 90       	pop	r0
    1ab2:	0f be       	out	0x3f, r0	; 63
    1ab4:	0f 90       	pop	r0
    1ab6:	1f 90       	pop	r1
    1ab8:	18 95       	reti

00001aba <__vector_22>:
    1aba:	1f 92       	push	r1
    1abc:	0f 92       	push	r0
    1abe:	0f b6       	in	r0, 0x3f	; 63
    1ac0:	0f 92       	push	r0
    1ac2:	11 24       	eor	r1, r1
    1ac4:	0f 93       	push	r16
    1ac6:	1f 93       	push	r17
    1ac8:	2f 93       	push	r18
    1aca:	3f 93       	push	r19
    1acc:	4f 93       	push	r20
    1ace:	5f 93       	push	r21
    1ad0:	6f 93       	push	r22
    1ad2:	7f 93       	push	r23
    1ad4:	8f 93       	push	r24
    1ad6:	9f 93       	push	r25
    1ad8:	af 93       	push	r26
    1ada:	bf 93       	push	r27
    1adc:	ef 93       	push	r30
    1ade:	ff 93       	push	r31
    1ae0:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
    1ae4:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <__data_end+0x1>
    1ae8:	ac 01       	movw	r20, r24
    1aea:	09 2e       	mov	r0, r25
    1aec:	00 0c       	add	r0, r0
    1aee:	66 0b       	sbc	r22, r22
    1af0:	77 0b       	sbc	r23, r23
    1af2:	9a 01       	movw	r18, r20
    1af4:	11 27       	eor	r17, r17
    1af6:	00 27       	eor	r16, r16
    1af8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1afc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b00:	60 e0       	ldi	r22, 0x00	; 0
    1b02:	70 e0       	ldi	r23, 0x00	; 0
    1b04:	40 2b       	or	r20, r16
    1b06:	51 2b       	or	r21, r17
    1b08:	62 2b       	or	r22, r18
    1b0a:	73 2b       	or	r23, r19
    1b0c:	40 93 38 01 	sts	0x0138, r20	; 0x800138 <timestamp>
    1b10:	50 93 39 01 	sts	0x0139, r21	; 0x800139 <timestamp+0x1>
    1b14:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <timestamp+0x2>
    1b18:	70 93 3b 01 	sts	0x013B, r23	; 0x80013b <timestamp+0x3>
    1b1c:	b0 9b       	sbis	0x16, 0	; 22
    1b1e:	1a c0       	rjmp	.+52     	; 0x1b54 <__vector_22+0x9a>
    1b20:	01 96       	adiw	r24, 0x01	; 1
    1b22:	09 2e       	mov	r0, r25
    1b24:	00 0c       	add	r0, r0
    1b26:	aa 0b       	sbc	r26, r26
    1b28:	bb 0b       	sbc	r27, r27
    1b2a:	bc 01       	movw	r22, r24
    1b2c:	55 27       	eor	r21, r21
    1b2e:	44 27       	eor	r20, r20
    1b30:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b34:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b38:	a0 e0       	ldi	r26, 0x00	; 0
    1b3a:	b0 e0       	ldi	r27, 0x00	; 0
    1b3c:	84 2b       	or	r24, r20
    1b3e:	95 2b       	or	r25, r21
    1b40:	a6 2b       	or	r26, r22
    1b42:	b7 2b       	or	r27, r23
    1b44:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
    1b48:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
    1b4c:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
    1b50:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
    1b54:	e0 91 fa 01 	lds	r30, 0x01FA	; 0x8001fa <mtable+0x22>
    1b58:	f0 91 fb 01 	lds	r31, 0x01FB	; 0x8001fb <mtable+0x23>
    1b5c:	30 97       	sbiw	r30, 0x00	; 0
    1b5e:	39 f0       	breq	.+14     	; 0x1b6e <__vector_22+0xb4>
    1b60:	61 e1       	ldi	r22, 0x11	; 17
    1b62:	70 e0       	ldi	r23, 0x00	; 0
    1b64:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <otable+0x22>
    1b68:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <otable+0x23>
    1b6c:	09 95       	icall
    1b6e:	0e 94 ca 05 	call	0xb94	; 0xb94 <schedule>
    1b72:	ff 91       	pop	r31
    1b74:	ef 91       	pop	r30
    1b76:	bf 91       	pop	r27
    1b78:	af 91       	pop	r26
    1b7a:	9f 91       	pop	r25
    1b7c:	8f 91       	pop	r24
    1b7e:	7f 91       	pop	r23
    1b80:	6f 91       	pop	r22
    1b82:	5f 91       	pop	r21
    1b84:	4f 91       	pop	r20
    1b86:	3f 91       	pop	r19
    1b88:	2f 91       	pop	r18
    1b8a:	1f 91       	pop	r17
    1b8c:	0f 91       	pop	r16
    1b8e:	0f 90       	pop	r0
    1b90:	0f be       	out	0x3f, r0	; 63
    1b92:	0f 90       	pop	r0
    1b94:	1f 90       	pop	r1
    1b96:	18 95       	reti

00001b98 <idle>:
    1b98:	0e 94 ca 05 	call	0xb94	; 0xb94 <schedule>
    1b9c:	78 94       	sei
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	83 bf       	out	0x33, r24	; 51
    1ba2:	88 95       	sleep
    1ba4:	fc cf       	rjmp	.-8      	; 0x1b9e <idle+0x6>

00001ba6 <__vector_9>:
    1ba6:	1f 92       	push	r1
    1ba8:	0f 92       	push	r0
    1baa:	0f b6       	in	r0, 0x3f	; 63
    1bac:	0f 92       	push	r0
    1bae:	11 24       	eor	r1, r1
    1bb0:	2f 93       	push	r18
    1bb2:	3f 93       	push	r19
    1bb4:	4f 93       	push	r20
    1bb6:	5f 93       	push	r21
    1bb8:	6f 93       	push	r22
    1bba:	7f 93       	push	r23
    1bbc:	8f 93       	push	r24
    1bbe:	9f 93       	push	r25
    1bc0:	ef 93       	push	r30
    1bc2:	ff 93       	push	r31
    1bc4:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
    1bc8:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <__data_end+0x1>
    1bcc:	01 96       	adiw	r24, 0x01	; 1
    1bce:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <__data_end+0x1>
    1bd2:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end>
    1bd6:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <timerQ>
    1bda:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <timerQ+0x1>
    1bde:	30 97       	sbiw	r30, 0x00	; 0
    1be0:	01 f1       	breq	.+64     	; 0x1c22 <__vector_9+0x7c>
    1be2:	42 81       	ldd	r20, Z+2	; 0x02
    1be4:	53 81       	ldd	r21, Z+3	; 0x03
    1be6:	64 81       	ldd	r22, Z+4	; 0x04
    1be8:	75 81       	ldd	r23, Z+5	; 0x05
    1bea:	86 17       	cp	r24, r22
    1bec:	97 07       	cpc	r25, r23
    1bee:	c9 f4       	brne	.+50     	; 0x1c22 <__vector_9+0x7c>
    1bf0:	ca 01       	movw	r24, r20
    1bf2:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1bf6:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1bfa:	42 1b       	sub	r20, r18
    1bfc:	53 0b       	sbc	r21, r19
    1bfe:	41 30       	cpi	r20, 0x01	; 1
    1c00:	51 05       	cpc	r21, r1
    1c02:	29 f4       	brne	.+10     	; 0x1c0e <__vector_9+0x68>
    1c04:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c08:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c0c:	01 96       	adiw	r24, 0x01	; 1
    1c0e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1c12:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1c16:	ef e6       	ldi	r30, 0x6F	; 111
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	82 60       	ori	r24, 0x02	; 2
    1c1e:	80 83       	st	Z, r24
    1c20:	05 c0       	rjmp	.+10     	; 0x1c2c <__vector_9+0x86>
    1c22:	ef e6       	ldi	r30, 0x6F	; 111
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	80 81       	ld	r24, Z
    1c28:	8d 7f       	andi	r24, 0xFD	; 253
    1c2a:	80 83       	st	Z, r24
    1c2c:	ff 91       	pop	r31
    1c2e:	ef 91       	pop	r30
    1c30:	9f 91       	pop	r25
    1c32:	8f 91       	pop	r24
    1c34:	7f 91       	pop	r23
    1c36:	6f 91       	pop	r22
    1c38:	5f 91       	pop	r21
    1c3a:	4f 91       	pop	r20
    1c3c:	3f 91       	pop	r19
    1c3e:	2f 91       	pop	r18
    1c40:	0f 90       	pop	r0
    1c42:	0f be       	out	0x3f, r0	; 63
    1c44:	0f 90       	pop	r0
    1c46:	1f 90       	pop	r1
    1c48:	18 95       	reti

00001c4a <__vector_7>:
    1c4a:	1f 92       	push	r1
    1c4c:	0f 92       	push	r0
    1c4e:	0f b6       	in	r0, 0x3f	; 63
    1c50:	0f 92       	push	r0
    1c52:	11 24       	eor	r1, r1
    1c54:	cf 92       	push	r12
    1c56:	df 92       	push	r13
    1c58:	ef 92       	push	r14
    1c5a:	ff 92       	push	r15
    1c5c:	2f 93       	push	r18
    1c5e:	3f 93       	push	r19
    1c60:	4f 93       	push	r20
    1c62:	5f 93       	push	r21
    1c64:	6f 93       	push	r22
    1c66:	7f 93       	push	r23
    1c68:	8f 93       	push	r24
    1c6a:	9f 93       	push	r25
    1c6c:	af 93       	push	r26
    1c6e:	bf 93       	push	r27
    1c70:	ef 93       	push	r30
    1c72:	ff 93       	push	r31
    1c74:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
    1c78:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <__data_end+0x1>
    1c7c:	6c 01       	movw	r12, r24
    1c7e:	09 2e       	mov	r0, r25
    1c80:	00 0c       	add	r0, r0
    1c82:	ee 08       	sbc	r14, r14
    1c84:	ff 08       	sbc	r15, r15
    1c86:	76 01       	movw	r14, r12
    1c88:	dd 24       	eor	r13, r13
    1c8a:	cc 24       	eor	r12, r12
    1c8c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c90:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c94:	60 e0       	ldi	r22, 0x00	; 0
    1c96:	70 e0       	ldi	r23, 0x00	; 0
    1c98:	c4 2a       	or	r12, r20
    1c9a:	d5 2a       	or	r13, r21
    1c9c:	e6 2a       	or	r14, r22
    1c9e:	f7 2a       	or	r15, r23
    1ca0:	b0 9b       	sbis	0x16, 0	; 22
    1ca2:	1e c0       	rjmp	.+60     	; 0x1ce0 <__vector_7+0x96>
    1ca4:	6c 01       	movw	r12, r24
    1ca6:	2f ef       	ldi	r18, 0xFF	; 255
    1ca8:	c2 1a       	sub	r12, r18
    1caa:	d2 0a       	sbc	r13, r18
    1cac:	0d 2c       	mov	r0, r13
    1cae:	00 0c       	add	r0, r0
    1cb0:	ee 08       	sbc	r14, r14
    1cb2:	ff 08       	sbc	r15, r15
    1cb4:	d6 01       	movw	r26, r12
    1cb6:	99 27       	eor	r25, r25
    1cb8:	88 27       	eor	r24, r24
    1cba:	c0 90 84 00 	lds	r12, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1cbe:	d0 90 85 00 	lds	r13, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1cc2:	e1 2c       	mov	r14, r1
    1cc4:	f1 2c       	mov	r15, r1
    1cc6:	c8 2a       	or	r12, r24
    1cc8:	d9 2a       	or	r13, r25
    1cca:	ea 2a       	or	r14, r26
    1ccc:	fb 2a       	or	r15, r27
    1cce:	08 c0       	rjmp	.+16     	; 0x1ce0 <__vector_7+0x96>
    1cd0:	8c e3       	ldi	r24, 0x3C	; 60
    1cd2:	91 e0       	ldi	r25, 0x01	; 1
    1cd4:	0e 94 95 05 	call	0xb2a	; 0xb2a <dequeue>
    1cd8:	6e e3       	ldi	r22, 0x3E	; 62
    1cda:	71 e0       	ldi	r23, 0x01	; 1
    1cdc:	0e 94 33 05 	call	0xa66	; 0xa66 <enqueueByDeadline>
    1ce0:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <timerQ>
    1ce4:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <timerQ+0x1>
    1ce8:	30 97       	sbiw	r30, 0x00	; 0
    1cea:	69 f0       	breq	.+26     	; 0x1d06 <__vector_7+0xbc>
    1cec:	82 81       	ldd	r24, Z+2	; 0x02
    1cee:	93 81       	ldd	r25, Z+3	; 0x03
    1cf0:	a4 81       	ldd	r26, Z+4	; 0x04
    1cf2:	b5 81       	ldd	r27, Z+5	; 0x05
    1cf4:	8c 19       	sub	r24, r12
    1cf6:	9d 09       	sbc	r25, r13
    1cf8:	ae 09       	sbc	r26, r14
    1cfa:	bf 09       	sbc	r27, r15
    1cfc:	18 16       	cp	r1, r24
    1cfe:	19 06       	cpc	r1, r25
    1d00:	1a 06       	cpc	r1, r26
    1d02:	1b 06       	cpc	r1, r27
    1d04:	2c f7       	brge	.-54     	; 0x1cd0 <__vector_7+0x86>
    1d06:	30 97       	sbiw	r30, 0x00	; 0
    1d08:	21 f1       	breq	.+72     	; 0x1d52 <__vector_7+0x108>
    1d0a:	82 81       	ldd	r24, Z+2	; 0x02
    1d0c:	93 81       	ldd	r25, Z+3	; 0x03
    1d0e:	a4 81       	ldd	r26, Z+4	; 0x04
    1d10:	b5 81       	ldd	r27, Z+5	; 0x05
    1d12:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <__data_end>
    1d16:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <__data_end+0x1>
    1d1a:	2a 17       	cp	r18, r26
    1d1c:	3b 07       	cpc	r19, r27
    1d1e:	c9 f4       	brne	.+50     	; 0x1d52 <__vector_7+0x108>
    1d20:	9c 01       	movw	r18, r24
    1d22:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d26:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d2a:	84 1b       	sub	r24, r20
    1d2c:	95 0b       	sbc	r25, r21
    1d2e:	01 97       	sbiw	r24, 0x01	; 1
    1d30:	31 f4       	brne	.+12     	; 0x1d3e <__vector_7+0xf4>
    1d32:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d36:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d3a:	2f 5f       	subi	r18, 0xFF	; 255
    1d3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d3e:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1d42:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1d46:	ef e6       	ldi	r30, 0x6F	; 111
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	80 81       	ld	r24, Z
    1d4c:	82 60       	ori	r24, 0x02	; 2
    1d4e:	80 83       	st	Z, r24
    1d50:	05 c0       	rjmp	.+10     	; 0x1d5c <__vector_7+0x112>
    1d52:	ef e6       	ldi	r30, 0x6F	; 111
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	8d 7f       	andi	r24, 0xFD	; 253
    1d5a:	80 83       	st	Z, r24
    1d5c:	0e 94 ca 05 	call	0xb94	; 0xb94 <schedule>
    1d60:	ff 91       	pop	r31
    1d62:	ef 91       	pop	r30
    1d64:	bf 91       	pop	r27
    1d66:	af 91       	pop	r26
    1d68:	9f 91       	pop	r25
    1d6a:	8f 91       	pop	r24
    1d6c:	7f 91       	pop	r23
    1d6e:	6f 91       	pop	r22
    1d70:	5f 91       	pop	r21
    1d72:	4f 91       	pop	r20
    1d74:	3f 91       	pop	r19
    1d76:	2f 91       	pop	r18
    1d78:	ff 90       	pop	r15
    1d7a:	ef 90       	pop	r14
    1d7c:	df 90       	pop	r13
    1d7e:	cf 90       	pop	r12
    1d80:	0f 90       	pop	r0
    1d82:	0f be       	out	0x3f, r0	; 63
    1d84:	0f 90       	pop	r0
    1d86:	1f 90       	pop	r1
    1d88:	18 95       	reti

00001d8a <async>:
    1d8a:	3f 92       	push	r3
    1d8c:	4f 92       	push	r4
    1d8e:	5f 92       	push	r5
    1d90:	6f 92       	push	r6
    1d92:	7f 92       	push	r7
    1d94:	8f 92       	push	r8
    1d96:	9f 92       	push	r9
    1d98:	af 92       	push	r10
    1d9a:	bf 92       	push	r11
    1d9c:	cf 92       	push	r12
    1d9e:	df 92       	push	r13
    1da0:	ef 92       	push	r14
    1da2:	ff 92       	push	r15
    1da4:	0f 93       	push	r16
    1da6:	1f 93       	push	r17
    1da8:	cf 93       	push	r28
    1daa:	df 93       	push	r29
    1dac:	2b 01       	movw	r4, r22
    1dae:	3c 01       	movw	r6, r24
    1db0:	49 01       	movw	r8, r18
    1db2:	5a 01       	movw	r10, r20
    1db4:	8f b7       	in	r24, 0x3f	; 63
    1db6:	80 78       	andi	r24, 0x80	; 128
    1db8:	38 2e       	mov	r3, r24
    1dba:	f8 94       	cli
    1dbc:	88 e0       	ldi	r24, 0x08	; 8
    1dbe:	91 e0       	ldi	r25, 0x01	; 1
    1dc0:	0e 94 95 05 	call	0xb2a	; 0xb2a <dequeue>
    1dc4:	ec 01       	movw	r28, r24
    1dc6:	1b 87       	std	Y+11, r17	; 0x0b
    1dc8:	0a 87       	std	Y+10, r16	; 0x0a
    1dca:	fd 86       	std	Y+13, r15	; 0x0d
    1dcc:	ec 86       	std	Y+12, r14	; 0x0c
    1dce:	df 86       	std	Y+15, r13	; 0x0f
    1dd0:	ce 86       	std	Y+14, r12	; 0x0e
    1dd2:	33 20       	and	r3, r3
    1dd4:	61 f0       	breq	.+24     	; 0x1dee <async+0x64>
    1dd6:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <current>
    1dda:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <current+0x1>
    1dde:	02 80       	ldd	r0, Z+2	; 0x02
    1de0:	f3 81       	ldd	r31, Z+3	; 0x03
    1de2:	e0 2d       	mov	r30, r0
    1de4:	82 81       	ldd	r24, Z+2	; 0x02
    1de6:	93 81       	ldd	r25, Z+3	; 0x03
    1de8:	a4 81       	ldd	r26, Z+4	; 0x04
    1dea:	b5 81       	ldd	r27, Z+5	; 0x05
    1dec:	08 c0       	rjmp	.+16     	; 0x1dfe <async+0x74>
    1dee:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <timestamp>
    1df2:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <timestamp+0x1>
    1df6:	a0 91 3a 01 	lds	r26, 0x013A	; 0x80013a <timestamp+0x2>
    1dfa:	b0 91 3b 01 	lds	r27, 0x013B	; 0x80013b <timestamp+0x3>
    1dfe:	48 0e       	add	r4, r24
    1e00:	59 1e       	adc	r5, r25
    1e02:	6a 1e       	adc	r6, r26
    1e04:	7b 1e       	adc	r7, r27
    1e06:	4a 82       	std	Y+2, r4	; 0x02
    1e08:	5b 82       	std	Y+3, r5	; 0x03
    1e0a:	6c 82       	std	Y+4, r6	; 0x04
    1e0c:	7d 82       	std	Y+5, r7	; 0x05
    1e0e:	18 14       	cp	r1, r8
    1e10:	19 04       	cpc	r1, r9
    1e12:	1a 04       	cpc	r1, r10
    1e14:	1b 04       	cpc	r1, r11
    1e16:	44 f0       	brlt	.+16     	; 0x1e28 <async+0x9e>
    1e18:	0f 2e       	mov	r0, r31
    1e1a:	88 24       	eor	r8, r8
    1e1c:	8a 94       	dec	r8
    1e1e:	98 2c       	mov	r9, r8
    1e20:	a8 2c       	mov	r10, r8
    1e22:	ff e7       	ldi	r31, 0x7F	; 127
    1e24:	bf 2e       	mov	r11, r31
    1e26:	f0 2d       	mov	r31, r0
    1e28:	84 0c       	add	r8, r4
    1e2a:	95 1c       	adc	r9, r5
    1e2c:	a6 1c       	adc	r10, r6
    1e2e:	b7 1c       	adc	r11, r7
    1e30:	8e 82       	std	Y+6, r8	; 0x06
    1e32:	9f 82       	std	Y+7, r9	; 0x07
    1e34:	a8 86       	std	Y+8, r10	; 0x08
    1e36:	b9 86       	std	Y+9, r11	; 0x09
    1e38:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <__data_end>
    1e3c:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <__data_end+0x1>
    1e40:	c9 01       	movw	r24, r18
    1e42:	03 2e       	mov	r0, r19
    1e44:	00 0c       	add	r0, r0
    1e46:	aa 0b       	sbc	r26, r26
    1e48:	bb 0b       	sbc	r27, r27
    1e4a:	dc 01       	movw	r26, r24
    1e4c:	99 27       	eor	r25, r25
    1e4e:	88 27       	eor	r24, r24
    1e50:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1e54:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e58:	60 e0       	ldi	r22, 0x00	; 0
    1e5a:	70 e0       	ldi	r23, 0x00	; 0
    1e5c:	84 2b       	or	r24, r20
    1e5e:	95 2b       	or	r25, r21
    1e60:	a6 2b       	or	r26, r22
    1e62:	b7 2b       	or	r27, r23
    1e64:	b0 9b       	sbis	0x16, 0	; 22
    1e66:	13 c0       	rjmp	.+38     	; 0x1e8e <async+0x104>
    1e68:	c9 01       	movw	r24, r18
    1e6a:	01 96       	adiw	r24, 0x01	; 1
    1e6c:	09 2e       	mov	r0, r25
    1e6e:	00 0c       	add	r0, r0
    1e70:	aa 0b       	sbc	r26, r26
    1e72:	bb 0b       	sbc	r27, r27
    1e74:	dc 01       	movw	r26, r24
    1e76:	99 27       	eor	r25, r25
    1e78:	88 27       	eor	r24, r24
    1e7a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1e7e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e82:	60 e0       	ldi	r22, 0x00	; 0
    1e84:	70 e0       	ldi	r23, 0x00	; 0
    1e86:	84 2b       	or	r24, r20
    1e88:	95 2b       	or	r25, r21
    1e8a:	a6 2b       	or	r26, r22
    1e8c:	b7 2b       	or	r27, r23
    1e8e:	48 1a       	sub	r4, r24
    1e90:	59 0a       	sbc	r5, r25
    1e92:	6a 0a       	sbc	r6, r26
    1e94:	7b 0a       	sbc	r7, r27
    1e96:	14 14       	cp	r1, r4
    1e98:	15 04       	cpc	r1, r5
    1e9a:	16 04       	cpc	r1, r6
    1e9c:	17 04       	cpc	r1, r7
    1e9e:	ac f5       	brge	.+106    	; 0x1f0a <async+0x180>
    1ea0:	6c e3       	ldi	r22, 0x3C	; 60
    1ea2:	71 e0       	ldi	r23, 0x01	; 1
    1ea4:	ce 01       	movw	r24, r28
    1ea6:	0e 94 64 05 	call	0xac8	; 0xac8 <enqueueByBaseline>
    1eaa:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <timerQ>
    1eae:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <timerQ+0x1>
    1eb2:	30 97       	sbiw	r30, 0x00	; 0
    1eb4:	21 f1       	breq	.+72     	; 0x1efe <async+0x174>
    1eb6:	82 81       	ldd	r24, Z+2	; 0x02
    1eb8:	93 81       	ldd	r25, Z+3	; 0x03
    1eba:	a4 81       	ldd	r26, Z+4	; 0x04
    1ebc:	b5 81       	ldd	r27, Z+5	; 0x05
    1ebe:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <__data_end>
    1ec2:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <__data_end+0x1>
    1ec6:	2a 17       	cp	r18, r26
    1ec8:	3b 07       	cpc	r19, r27
    1eca:	c9 f4       	brne	.+50     	; 0x1efe <async+0x174>
    1ecc:	9c 01       	movw	r18, r24
    1ece:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ed2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ed6:	84 1b       	sub	r24, r20
    1ed8:	95 0b       	sbc	r25, r21
    1eda:	01 97       	sbiw	r24, 0x01	; 1
    1edc:	31 f4       	brne	.+12     	; 0x1eea <async+0x160>
    1ede:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ee2:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ee6:	2f 5f       	subi	r18, 0xFF	; 255
    1ee8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eea:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1eee:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1ef2:	ef e6       	ldi	r30, 0x6F	; 111
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	80 81       	ld	r24, Z
    1ef8:	82 60       	ori	r24, 0x02	; 2
    1efa:	80 83       	st	Z, r24
    1efc:	39 c0       	rjmp	.+114    	; 0x1f70 <async+0x1e6>
    1efe:	ef e6       	ldi	r30, 0x6F	; 111
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	80 81       	ld	r24, Z
    1f04:	8d 7f       	andi	r24, 0xFD	; 253
    1f06:	80 83       	st	Z, r24
    1f08:	33 c0       	rjmp	.+102    	; 0x1f70 <async+0x1e6>
    1f0a:	6e e3       	ldi	r22, 0x3E	; 62
    1f0c:	71 e0       	ldi	r23, 0x01	; 1
    1f0e:	ce 01       	movw	r24, r28
    1f10:	0e 94 33 05 	call	0xa66	; 0xa66 <enqueueByDeadline>
    1f14:	33 20       	and	r3, r3
    1f16:	61 f1       	breq	.+88     	; 0x1f70 <async+0x1e6>
    1f18:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <threadPool>
    1f1c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <threadPool+0x1>
    1f20:	89 2b       	or	r24, r25
    1f22:	31 f1       	breq	.+76     	; 0x1f70 <async+0x1e6>
    1f24:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <msgQ>
    1f28:	f0 91 3f 01 	lds	r31, 0x013F	; 0x80013f <msgQ+0x1>
    1f2c:	86 81       	ldd	r24, Z+6	; 0x06
    1f2e:	97 81       	ldd	r25, Z+7	; 0x07
    1f30:	a0 85       	ldd	r26, Z+8	; 0x08
    1f32:	b1 85       	ldd	r27, Z+9	; 0x09
    1f34:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <activeStack>
    1f38:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <activeStack+0x1>
    1f3c:	02 80       	ldd	r0, Z+2	; 0x02
    1f3e:	f3 81       	ldd	r31, Z+3	; 0x03
    1f40:	e0 2d       	mov	r30, r0
    1f42:	46 81       	ldd	r20, Z+6	; 0x06
    1f44:	57 81       	ldd	r21, Z+7	; 0x07
    1f46:	60 85       	ldd	r22, Z+8	; 0x08
    1f48:	71 85       	ldd	r23, Z+9	; 0x09
    1f4a:	84 1b       	sub	r24, r20
    1f4c:	95 0b       	sbc	r25, r21
    1f4e:	a6 0b       	sbc	r26, r22
    1f50:	b7 0b       	sbc	r27, r23
    1f52:	72 f4       	brpl	.+28     	; 0x1f70 <async+0x1e6>
    1f54:	86 e0       	ldi	r24, 0x06	; 6
    1f56:	91 e0       	ldi	r25, 0x01	; 1
    1f58:	0e 94 c0 05 	call	0xb80	; 0xb80 <pop>
    1f5c:	64 e0       	ldi	r22, 0x04	; 4
    1f5e:	71 e0       	ldi	r23, 0x01	; 1
    1f60:	0e 94 b6 05 	call	0xb6c	; 0xb6c <push>
    1f64:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <activeStack>
    1f68:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <activeStack+0x1>
    1f6c:	0e 94 13 05 	call	0xa26	; 0xa26 <dispatch>
    1f70:	33 20       	and	r3, r3
    1f72:	09 f0       	breq	.+2      	; 0x1f76 <async+0x1ec>
    1f74:	78 94       	sei
    1f76:	ce 01       	movw	r24, r28
    1f78:	df 91       	pop	r29
    1f7a:	cf 91       	pop	r28
    1f7c:	1f 91       	pop	r17
    1f7e:	0f 91       	pop	r16
    1f80:	ff 90       	pop	r15
    1f82:	ef 90       	pop	r14
    1f84:	df 90       	pop	r13
    1f86:	cf 90       	pop	r12
    1f88:	bf 90       	pop	r11
    1f8a:	af 90       	pop	r10
    1f8c:	9f 90       	pop	r9
    1f8e:	8f 90       	pop	r8
    1f90:	7f 90       	pop	r7
    1f92:	6f 90       	pop	r6
    1f94:	5f 90       	pop	r5
    1f96:	4f 90       	pop	r4
    1f98:	3f 90       	pop	r3
    1f9a:	08 95       	ret

00001f9c <sync>:
    1f9c:	cf 92       	push	r12
    1f9e:	df 92       	push	r13
    1fa0:	ef 92       	push	r14
    1fa2:	ff 92       	push	r15
    1fa4:	0f 93       	push	r16
    1fa6:	1f 93       	push	r17
    1fa8:	cf 93       	push	r28
    1faa:	df 93       	push	r29
    1fac:	ec 01       	movw	r28, r24
    1fae:	7b 01       	movw	r14, r22
    1fb0:	6a 01       	movw	r12, r20
    1fb2:	1f b7       	in	r17, 0x3f	; 63
    1fb4:	10 78       	andi	r17, 0x80	; 128
    1fb6:	f8 94       	cli
    1fb8:	a8 81       	ld	r26, Y
    1fba:	b9 81       	ldd	r27, Y+1	; 0x01
    1fbc:	10 97       	sbiw	r26, 0x00	; 0
    1fbe:	19 f4       	brne	.+6      	; 0x1fc6 <sync+0x2a>
    1fc0:	35 c0       	rjmp	.+106    	; 0x202c <sync+0x90>
    1fc2:	a0 81       	ld	r26, Z
    1fc4:	b1 81       	ldd	r27, Z+1	; 0x01
    1fc6:	14 96       	adiw	r26, 0x04	; 4
    1fc8:	ed 91       	ld	r30, X+
    1fca:	fc 91       	ld	r31, X
    1fcc:	15 97       	sbiw	r26, 0x05	; 5
    1fce:	30 97       	sbiw	r30, 0x00	; 0
    1fd0:	c1 f7       	brne	.-16     	; 0x1fc2 <sync+0x26>
    1fd2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <current>
    1fd6:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <current+0x1>
    1fda:	a2 17       	cp	r26, r18
    1fdc:	b3 07       	cpc	r27, r19
    1fde:	11 f0       	breq	.+4      	; 0x1fe4 <sync+0x48>
    1fe0:	11 11       	cpse	r17, r1
    1fe2:	07 c0       	rjmp	.+14     	; 0x1ff2 <sync+0x56>
    1fe4:	11 23       	and	r17, r17
    1fe6:	09 f4       	brne	.+2      	; 0x1fea <sync+0x4e>
    1fe8:	4a c0       	rjmp	.+148    	; 0x207e <sync+0xe2>
    1fea:	78 94       	sei
    1fec:	8f ef       	ldi	r24, 0xFF	; 255
    1fee:	9f ef       	ldi	r25, 0xFF	; 255
    1ff0:	4e c0       	rjmp	.+156    	; 0x208e <sync+0xf2>
    1ff2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ff6:	00 97       	sbiw	r24, 0x00	; 0
    1ff8:	19 f0       	breq	.+6      	; 0x2000 <sync+0x64>
    1ffa:	fc 01       	movw	r30, r24
    1ffc:	15 82       	std	Z+5, r1	; 0x05
    1ffe:	14 82       	std	Z+4, r1	; 0x04
    2000:	3b 83       	std	Y+3, r19	; 0x03
    2002:	2a 83       	std	Y+2, r18	; 0x02
    2004:	f9 01       	movw	r30, r18
    2006:	d5 83       	std	Z+5, r29	; 0x05
    2008:	c4 83       	std	Z+4, r28	; 0x04
    200a:	cd 01       	movw	r24, r26
    200c:	0e 94 13 05 	call	0xa26	; 0xa26 <dispatch>
    2010:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <current>
    2014:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <current+0x1>
    2018:	82 81       	ldd	r24, Z+2	; 0x02
    201a:	93 81       	ldd	r25, Z+3	; 0x03
    201c:	89 2b       	or	r24, r25
    201e:	31 f4       	brne	.+12     	; 0x202c <sync+0x90>
    2020:	11 23       	and	r17, r17
    2022:	81 f1       	breq	.+96     	; 0x2084 <sync+0xe8>
    2024:	78 94       	sei
    2026:	80 e0       	ldi	r24, 0x00	; 0
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	31 c0       	rjmp	.+98     	; 0x208e <sync+0xf2>
    202c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <current>
    2030:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <current+0x1>
    2034:	99 83       	std	Y+1, r25	; 0x01
    2036:	88 83       	st	Y, r24
    2038:	11 23       	and	r17, r17
    203a:	29 f0       	breq	.+10     	; 0x2046 <sync+0xaa>
    203c:	8a 81       	ldd	r24, Y+2	; 0x02
    203e:	9b 81       	ldd	r25, Y+3	; 0x03
    2040:	01 97       	sbiw	r24, 0x01	; 1
    2042:	09 f0       	breq	.+2      	; 0x2046 <sync+0xaa>
    2044:	78 94       	sei
    2046:	b6 01       	movw	r22, r12
    2048:	ce 01       	movw	r24, r28
    204a:	f7 01       	movw	r30, r14
    204c:	09 95       	icall
    204e:	f8 2e       	mov	r15, r24
    2050:	09 2f       	mov	r16, r25
    2052:	8f b7       	in	r24, 0x3f	; 63
    2054:	f8 94       	cli
    2056:	19 82       	std	Y+1, r1	; 0x01
    2058:	18 82       	st	Y, r1
    205a:	8a 81       	ldd	r24, Y+2	; 0x02
    205c:	9b 81       	ldd	r25, Y+3	; 0x03
    205e:	82 30       	cpi	r24, 0x02	; 2
    2060:	91 05       	cpc	r25, r1
    2062:	38 f0       	brcs	.+14     	; 0x2072 <sync+0xd6>
    2064:	1b 82       	std	Y+3, r1	; 0x03
    2066:	1a 82       	std	Y+2, r1	; 0x02
    2068:	fc 01       	movw	r30, r24
    206a:	15 82       	std	Z+5, r1	; 0x05
    206c:	14 82       	std	Z+4, r1	; 0x04
    206e:	0e 94 13 05 	call	0xa26	; 0xa26 <dispatch>
    2072:	11 23       	and	r17, r17
    2074:	51 f0       	breq	.+20     	; 0x208a <sync+0xee>
    2076:	78 94       	sei
    2078:	8f 2d       	mov	r24, r15
    207a:	90 2f       	mov	r25, r16
    207c:	08 c0       	rjmp	.+16     	; 0x208e <sync+0xf2>
    207e:	8f ef       	ldi	r24, 0xFF	; 255
    2080:	9f ef       	ldi	r25, 0xFF	; 255
    2082:	05 c0       	rjmp	.+10     	; 0x208e <sync+0xf2>
    2084:	80 e0       	ldi	r24, 0x00	; 0
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	02 c0       	rjmp	.+4      	; 0x208e <sync+0xf2>
    208a:	8f 2d       	mov	r24, r15
    208c:	90 2f       	mov	r25, r16
    208e:	df 91       	pop	r29
    2090:	cf 91       	pop	r28
    2092:	1f 91       	pop	r17
    2094:	0f 91       	pop	r16
    2096:	ff 90       	pop	r15
    2098:	ef 90       	pop	r14
    209a:	df 90       	pop	r13
    209c:	cf 90       	pop	r12
    209e:	08 95       	ret

000020a0 <run>:
    20a0:	00 91 02 01 	lds	r16, 0x0102	; 0x800102 <current>
    20a4:	10 91 03 01 	lds	r17, 0x0103	; 0x800103 <current+0x1>
    20a8:	8e e3       	ldi	r24, 0x3E	; 62
    20aa:	91 e0       	ldi	r25, 0x01	; 1
    20ac:	0e 94 95 05 	call	0xb2a	; 0xb2a <dequeue>
    20b0:	ec 01       	movw	r28, r24
    20b2:	f8 01       	movw	r30, r16
    20b4:	93 83       	std	Z+3, r25	; 0x03
    20b6:	82 83       	std	Z+2, r24	; 0x02
    20b8:	78 94       	sei
    20ba:	6c 85       	ldd	r22, Y+12	; 0x0c
    20bc:	7d 85       	ldd	r23, Y+13	; 0x0d
    20be:	4e 85       	ldd	r20, Y+14	; 0x0e
    20c0:	5f 85       	ldd	r21, Y+15	; 0x0f
    20c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    20c4:	9b 85       	ldd	r25, Y+11	; 0x0b
    20c6:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <sync>
    20ca:	8f b7       	in	r24, 0x3f	; 63
    20cc:	f8 94       	cli
    20ce:	68 e0       	ldi	r22, 0x08	; 8
    20d0:	71 e0       	ldi	r23, 0x01	; 1
    20d2:	ce 01       	movw	r24, r28
    20d4:	0e 94 ac 05 	call	0xb58	; 0xb58 <insert>
    20d8:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <activeStack>
    20dc:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <activeStack+0x1>
    20e0:	01 90       	ld	r0, Z+
    20e2:	f0 81       	ld	r31, Z
    20e4:	e0 2d       	mov	r30, r0
    20e6:	c2 81       	ldd	r28, Z+2	; 0x02
    20e8:	d3 81       	ldd	r29, Z+3	; 0x03
    20ea:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <msgQ>
    20ee:	f0 91 3f 01 	lds	r31, 0x013F	; 0x80013f <msgQ+0x1>
    20f2:	30 97       	sbiw	r30, 0x00	; 0
    20f4:	a1 f0       	breq	.+40     	; 0x211e <run+0x7e>
    20f6:	20 97       	sbiw	r28, 0x00	; 0
    20f8:	99 f2       	breq	.-90     	; 0x20a0 <run>
    20fa:	86 81       	ldd	r24, Z+6	; 0x06
    20fc:	97 81       	ldd	r25, Z+7	; 0x07
    20fe:	a0 85       	ldd	r26, Z+8	; 0x08
    2100:	b1 85       	ldd	r27, Z+9	; 0x09
    2102:	4e 81       	ldd	r20, Y+6	; 0x06
    2104:	5f 81       	ldd	r21, Y+7	; 0x07
    2106:	68 85       	ldd	r22, Y+8	; 0x08
    2108:	79 85       	ldd	r23, Y+9	; 0x09
    210a:	84 1b       	sub	r24, r20
    210c:	95 0b       	sbc	r25, r21
    210e:	a6 0b       	sbc	r26, r22
    2110:	b7 0b       	sbc	r27, r23
    2112:	18 16       	cp	r1, r24
    2114:	19 06       	cpc	r1, r25
    2116:	1a 06       	cpc	r1, r26
    2118:	1b 06       	cpc	r1, r27
    211a:	0c f0       	brlt	.+2      	; 0x211e <run+0x7e>
    211c:	c1 cf       	rjmp	.-126    	; 0x20a0 <run>
    211e:	84 e0       	ldi	r24, 0x04	; 4
    2120:	91 e0       	ldi	r25, 0x01	; 1
    2122:	0e 94 c0 05 	call	0xb80	; 0xb80 <pop>
    2126:	66 e0       	ldi	r22, 0x06	; 6
    2128:	71 e0       	ldi	r23, 0x01	; 1
    212a:	0e 94 b6 05 	call	0xb6c	; 0xb6c <push>
    212e:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <activeStack>
    2132:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <activeStack+0x1>
    2136:	02 c0       	rjmp	.+4      	; 0x213c <run+0x9c>
    2138:	a0 81       	ld	r26, Z
    213a:	b1 81       	ldd	r27, Z+1	; 0x01
    213c:	14 96       	adiw	r26, 0x04	; 4
    213e:	ed 91       	ld	r30, X+
    2140:	fc 91       	ld	r31, X
    2142:	15 97       	sbiw	r26, 0x05	; 5
    2144:	30 97       	sbiw	r30, 0x00	; 0
    2146:	c1 f7       	brne	.-16     	; 0x2138 <run+0x98>
    2148:	cd 01       	movw	r24, r26
    214a:	0e 94 13 05 	call	0xa26	; 0xa26 <dispatch>
    214e:	a8 cf       	rjmp	.-176    	; 0x20a0 <run>

00002150 <install>:
    thread0.msg = NULL;
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    2150:	fc 01       	movw	r30, r24
    if (i >= 0 && i < N_VECTORS) {
    2152:	42 31       	cpi	r20, 0x12	; 18
    2154:	b8 f4       	brcc	.+46     	; 0x2184 <install+0x34>
        char status;
        DISABLE(status);
    2156:	9f b7       	in	r25, 0x3f	; 63
    2158:	90 78       	andi	r25, 0x80	; 128
    215a:	f8 94       	cli
        otable[i] = obj;
    215c:	50 e0       	ldi	r21, 0x00	; 0
    215e:	44 0f       	add	r20, r20
    2160:	55 1f       	adc	r21, r21
    2162:	da 01       	movw	r26, r20
    2164:	a0 5c       	subi	r26, 0xC0	; 192
    2166:	be 4f       	sbci	r27, 0xFE	; 254
    2168:	ed 93       	st	X+, r30
    216a:	fc 93       	st	X, r31
        mtable[i] = m;
    216c:	da 01       	movw	r26, r20
    216e:	a8 52       	subi	r26, 0x28	; 40
    2170:	be 4f       	sbci	r27, 0xFE	; 254
    2172:	6d 93       	st	X+, r22
    2174:	7c 93       	st	X, r23
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    2176:	21 e0       	ldi	r18, 0x01	; 1
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	33 83       	std	Z+3, r19	; 0x03
    217c:	22 83       	std	Z+2, r18	; 0x02
        ENABLE(status);
    217e:	99 23       	and	r25, r25
    2180:	09 f0       	breq	.+2      	; 0x2184 <install+0x34>
    2182:	78 94       	sei
    2184:	08 95       	ret

00002186 <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    2186:	8c 01       	movw	r16, r24
    2188:	7b 01       	movw	r14, r22
    218a:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    218c:	8f b7       	in	r24, 0x3f	; 63
    218e:	f8 94       	cli
    initialize();
    2190:	0e 94 74 04 	call	0x8e8	; 0x8e8 <initialize>
    ENABLE(1);
    2194:	78 94       	sei
    if (m != NULL)
    2196:	e1 14       	cp	r14, r1
    2198:	f1 04       	cpc	r15, r1
    219a:	41 f0       	breq	.+16     	; 0x21ac <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	a9 01       	movw	r20, r18
    21a2:	60 e0       	ldi	r22, 0x00	; 0
    21a4:	70 e0       	ldi	r23, 0x00	; 0
    21a6:	cb 01       	movw	r24, r22
    21a8:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <async>
    DISABLE(status);
    21ac:	8f b7       	in	r24, 0x3f	; 63
    21ae:	f8 94       	cli
    idle();
    21b0:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <idle>

000021b4 <__divmodhi4>:
    21b4:	97 fb       	bst	r25, 7
    21b6:	07 2e       	mov	r0, r23
    21b8:	16 f4       	brtc	.+4      	; 0x21be <__divmodhi4+0xa>
    21ba:	00 94       	com	r0
    21bc:	07 d0       	rcall	.+14     	; 0x21cc <__divmodhi4_neg1>
    21be:	77 fd       	sbrc	r23, 7
    21c0:	09 d0       	rcall	.+18     	; 0x21d4 <__divmodhi4_neg2>
    21c2:	0e 94 ee 10 	call	0x21dc	; 0x21dc <__udivmodhi4>
    21c6:	07 fc       	sbrc	r0, 7
    21c8:	05 d0       	rcall	.+10     	; 0x21d4 <__divmodhi4_neg2>
    21ca:	3e f4       	brtc	.+14     	; 0x21da <__divmodhi4_exit>

000021cc <__divmodhi4_neg1>:
    21cc:	90 95       	com	r25
    21ce:	81 95       	neg	r24
    21d0:	9f 4f       	sbci	r25, 0xFF	; 255
    21d2:	08 95       	ret

000021d4 <__divmodhi4_neg2>:
    21d4:	70 95       	com	r23
    21d6:	61 95       	neg	r22
    21d8:	7f 4f       	sbci	r23, 0xFF	; 255

000021da <__divmodhi4_exit>:
    21da:	08 95       	ret

000021dc <__udivmodhi4>:
    21dc:	aa 1b       	sub	r26, r26
    21de:	bb 1b       	sub	r27, r27
    21e0:	51 e1       	ldi	r21, 0x11	; 17
    21e2:	07 c0       	rjmp	.+14     	; 0x21f2 <__udivmodhi4_ep>

000021e4 <__udivmodhi4_loop>:
    21e4:	aa 1f       	adc	r26, r26
    21e6:	bb 1f       	adc	r27, r27
    21e8:	a6 17       	cp	r26, r22
    21ea:	b7 07       	cpc	r27, r23
    21ec:	10 f0       	brcs	.+4      	; 0x21f2 <__udivmodhi4_ep>
    21ee:	a6 1b       	sub	r26, r22
    21f0:	b7 0b       	sbc	r27, r23

000021f2 <__udivmodhi4_ep>:
    21f2:	88 1f       	adc	r24, r24
    21f4:	99 1f       	adc	r25, r25
    21f6:	5a 95       	dec	r21
    21f8:	a9 f7       	brne	.-22     	; 0x21e4 <__udivmodhi4_loop>
    21fa:	80 95       	com	r24
    21fc:	90 95       	com	r25
    21fe:	bc 01       	movw	r22, r24
    2200:	cd 01       	movw	r24, r26
    2202:	08 95       	ret

00002204 <setjmp>:
    2204:	dc 01       	movw	r26, r24
    2206:	2d 92       	st	X+, r2
    2208:	3d 92       	st	X+, r3
    220a:	4d 92       	st	X+, r4
    220c:	5d 92       	st	X+, r5
    220e:	6d 92       	st	X+, r6
    2210:	7d 92       	st	X+, r7
    2212:	8d 92       	st	X+, r8
    2214:	9d 92       	st	X+, r9
    2216:	ad 92       	st	X+, r10
    2218:	bd 92       	st	X+, r11
    221a:	cd 92       	st	X+, r12
    221c:	dd 92       	st	X+, r13
    221e:	ed 92       	st	X+, r14
    2220:	fd 92       	st	X+, r15
    2222:	0d 93       	st	X+, r16
    2224:	1d 93       	st	X+, r17
    2226:	cd 93       	st	X+, r28
    2228:	dd 93       	st	X+, r29
    222a:	ff 91       	pop	r31
    222c:	ef 91       	pop	r30
    222e:	8d b7       	in	r24, 0x3d	; 61
    2230:	8d 93       	st	X+, r24
    2232:	8e b7       	in	r24, 0x3e	; 62
    2234:	8d 93       	st	X+, r24
    2236:	8f b7       	in	r24, 0x3f	; 63
    2238:	8d 93       	st	X+, r24
    223a:	ed 93       	st	X+, r30
    223c:	fd 93       	st	X+, r31
    223e:	88 27       	eor	r24, r24
    2240:	99 27       	eor	r25, r25
    2242:	09 94       	ijmp

00002244 <longjmp>:
    2244:	dc 01       	movw	r26, r24
    2246:	cb 01       	movw	r24, r22
    2248:	81 30       	cpi	r24, 0x01	; 1
    224a:	91 05       	cpc	r25, r1
    224c:	81 1d       	adc	r24, r1
    224e:	2d 90       	ld	r2, X+
    2250:	3d 90       	ld	r3, X+
    2252:	4d 90       	ld	r4, X+
    2254:	5d 90       	ld	r5, X+
    2256:	6d 90       	ld	r6, X+
    2258:	7d 90       	ld	r7, X+
    225a:	8d 90       	ld	r8, X+
    225c:	9d 90       	ld	r9, X+
    225e:	ad 90       	ld	r10, X+
    2260:	bd 90       	ld	r11, X+
    2262:	cd 90       	ld	r12, X+
    2264:	dd 90       	ld	r13, X+
    2266:	ed 90       	ld	r14, X+
    2268:	fd 90       	ld	r15, X+
    226a:	0d 91       	ld	r16, X+
    226c:	1d 91       	ld	r17, X+
    226e:	cd 91       	ld	r28, X+
    2270:	dd 91       	ld	r29, X+
    2272:	ed 91       	ld	r30, X+
    2274:	fd 91       	ld	r31, X+
    2276:	0d 90       	ld	r0, X+
    2278:	f8 94       	cli
    227a:	fe bf       	out	0x3e, r31	; 62
    227c:	0f be       	out	0x3f, r0	; 63
    227e:	ed bf       	out	0x3d, r30	; 61
    2280:	ed 91       	ld	r30, X+
    2282:	fd 91       	ld	r31, X+
    2284:	09 94       	ijmp

00002286 <_exit>:
    2286:	f8 94       	cli

00002288 <__stop_program>:
    2288:	ff cf       	rjmp	.-2      	; 0x2288 <__stop_program>
