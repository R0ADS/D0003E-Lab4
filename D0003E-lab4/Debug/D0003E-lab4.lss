
D0003E-lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  00002560  000025f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002560  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000353  00800134  00800134  00002628  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002628  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002658  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c8  00000000  00000000  00002698  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003643  00000000  00000000  00002960  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001292  00000000  00000000  00005fa3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001852  00000000  00000000  00007235  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e1c  00000000  00000000  00008a88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a84  00000000  00000000  000098a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002c54  00000000  00000000  0000a328  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000268  00000000  00000000  0000cf7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 0d 07 	jmp	0xe1a	; 0xe1a <__vector_1>
       8:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <__vector_2>
       c:	0c 94 eb 07 	jmp	0xfd6	; 0xfd6 <__vector_3>
      10:	0c 94 5a 08 	jmp	0x10b4	; 0x10b4 <__vector_4>
      14:	0c 94 c9 08 	jmp	0x1192	; 0x1192 <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 34 0f 	jmp	0x1e68	; 0x1e68 <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 e2 0e 	jmp	0x1dc4	; 0x1dc4 <__vector_9>
      28:	0c 94 38 09 	jmp	0x1270	; 0x1270 <__vector_10>
      2c:	0c 94 a7 09 	jmp	0x134e	; 0x134e <__vector_11>
      30:	0c 94 16 0a 	jmp	0x142c	; 0x142c <__vector_12>
      34:	0c 94 85 0a 	jmp	0x150a	; 0x150a <__vector_13>
      38:	0c 94 f4 0a 	jmp	0x15e8	; 0x15e8 <__vector_14>
      3c:	0c 94 63 0b 	jmp	0x16c6	; 0x16c6 <__vector_15>
      40:	0c 94 d2 0b 	jmp	0x17a4	; 0x17a4 <__vector_16>
      44:	0c 94 41 0c 	jmp	0x1882	; 0x1882 <__vector_17>
      48:	0c 94 b0 0c 	jmp	0x1960	; 0x1960 <__vector_18>
      4c:	0c 94 1f 0d 	jmp	0x1a3e	; 0x1a3e <__vector_19>
      50:	0c 94 8e 0d 	jmp	0x1b1c	; 0x1b1c <__vector_20>
      54:	0c 94 fd 0d 	jmp	0x1bfa	; 0x1bfa <__vector_21>
      58:	0c 94 6c 0e 	jmp	0x1cd8	; 0x1cd8 <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	e0 e6       	ldi	r30, 0x60	; 96
      70:	f5 e2       	ldi	r31, 0x25	; 37
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	a4 33       	cpi	r26, 0x34	; 52
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	24 e0       	ldi	r18, 0x04	; 4
      80:	a4 e3       	ldi	r26, 0x34	; 52
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	a7 38       	cpi	r26, 0x87	; 135
      8a:	b2 07       	cpc	r27, r18
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 c7 04 	call	0x98e	; 0x98e <main>
      92:	0c 94 ae 12 	jmp	0x255c	; 0x255c <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <writeBit>:

#include <avr/io.h>
#include "bitOp.h"

void writeBit(BitOp *self){                                 // Stops recursion if freq hits 0
	if (self->isRight) {
      9a:	fc 01       	movw	r30, r24
      9c:	84 81       	ldd	r24, Z+4	; 0x04
      9e:	95 81       	ldd	r25, Z+5	; 0x05
      a0:	89 2b       	or	r24, r25
      a2:	29 f0       	breq	.+10     	; 0xae <writeBit+0x14>
		PORTE ^= (1 << PE6);                    // This and the one below generates actual pulse
      a4:	9e b1       	in	r25, 0x0e	; 14
      a6:	80 e4       	ldi	r24, 0x40	; 64
      a8:	89 27       	eor	r24, r25
      aa:	8e b9       	out	0x0e, r24	; 14
      ac:	08 95       	ret
	}
	else {
		PORTE ^= (1 << PE4);
      ae:	9e b1       	in	r25, 0x0e	; 14
      b0:	80 e1       	ldi	r24, 0x10	; 16
      b2:	89 27       	eor	r24, r25
      b4:	8e b9       	out	0x0e, r24	; 14
      b6:	08 95       	ret

000000b8 <updateDisplay>:
#include "bitOp.h"
#include <avr/io.h>


// Updates dispaly
void updateDisplay(Generators *self) {
      b8:	cf 92       	push	r12
      ba:	df 92       	push	r13
      bc:	ef 92       	push	r14
      be:	ff 92       	push	r15
      c0:	0f 93       	push	r16
      c2:	1f 93       	push	r17
      c4:	fc 01       	movw	r30, r24
	if (self->isRight) {
      c6:	82 85       	ldd	r24, Z+10	; 0x0a
      c8:	93 85       	ldd	r25, Z+11	; 0x0b
      ca:	89 2b       	or	r24, r25
      cc:	09 f1       	breq	.+66     	; 0x110 <updateDisplay+0x58>
		ASYNC(self->lcd, printAt, self->currentFreq*10 + 4);
      ce:	84 81       	ldd	r24, Z+4	; 0x04
      d0:	95 81       	ldd	r25, Z+5	; 0x05
      d2:	6c 01       	movw	r12, r24
      d4:	cc 0c       	add	r12, r12
      d6:	dd 1c       	adc	r13, r13
      d8:	88 0f       	add	r24, r24
      da:	99 1f       	adc	r25, r25
      dc:	88 0f       	add	r24, r24
      de:	99 1f       	adc	r25, r25
      e0:	88 0f       	add	r24, r24
      e2:	99 1f       	adc	r25, r25
      e4:	c8 0e       	add	r12, r24
      e6:	d9 1e       	adc	r13, r25
      e8:	04 85       	ldd	r16, Z+12	; 0x0c
      ea:	15 85       	ldd	r17, Z+13	; 0x0d
      ec:	84 e0       	ldi	r24, 0x04	; 4
      ee:	c8 0e       	add	r12, r24
      f0:	d1 1c       	adc	r13, r1
      f2:	0f 2e       	mov	r0, r31
      f4:	fa e9       	ldi	r31, 0x9A	; 154
      f6:	ef 2e       	mov	r14, r31
      f8:	f4 e0       	ldi	r31, 0x04	; 4
      fa:	ff 2e       	mov	r15, r31
      fc:	f0 2d       	mov	r31, r0
      fe:	20 e0       	ldi	r18, 0x00	; 0
     100:	30 e0       	ldi	r19, 0x00	; 0
     102:	a9 01       	movw	r20, r18
     104:	60 e0       	ldi	r22, 0x00	; 0
     106:	70 e0       	ldi	r23, 0x00	; 0
     108:	cb 01       	movw	r24, r22
     10a:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <async>
     10e:	1d c0       	rjmp	.+58     	; 0x14a <updateDisplay+0x92>
	}
	else {
		ASYNC(self->lcd, printAt, self->currentFreq*10);
     110:	24 81       	ldd	r18, Z+4	; 0x04
     112:	35 81       	ldd	r19, Z+5	; 0x05
     114:	04 85       	ldd	r16, Z+12	; 0x0c
     116:	15 85       	ldd	r17, Z+13	; 0x0d
     118:	69 01       	movw	r12, r18
     11a:	cc 0c       	add	r12, r12
     11c:	dd 1c       	adc	r13, r13
     11e:	22 0f       	add	r18, r18
     120:	33 1f       	adc	r19, r19
     122:	22 0f       	add	r18, r18
     124:	33 1f       	adc	r19, r19
     126:	22 0f       	add	r18, r18
     128:	33 1f       	adc	r19, r19
     12a:	c2 0e       	add	r12, r18
     12c:	d3 1e       	adc	r13, r19
     12e:	0f 2e       	mov	r0, r31
     130:	fa e9       	ldi	r31, 0x9A	; 154
     132:	ef 2e       	mov	r14, r31
     134:	f4 e0       	ldi	r31, 0x04	; 4
     136:	ff 2e       	mov	r15, r31
     138:	f0 2d       	mov	r31, r0
     13a:	20 e0       	ldi	r18, 0x00	; 0
     13c:	30 e0       	ldi	r19, 0x00	; 0
     13e:	a9 01       	movw	r20, r18
     140:	60 e0       	ldi	r22, 0x00	; 0
     142:	70 e0       	ldi	r23, 0x00	; 0
     144:	cb 01       	movw	r24, r22
     146:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <async>
    }
}
     14a:	1f 91       	pop	r17
     14c:	0f 91       	pop	r16
     14e:	ff 90       	pop	r15
     150:	ef 90       	pop	r14
     152:	df 90       	pop	r13
     154:	cf 90       	pop	r12
     156:	08 95       	ret

00000158 <generatePulse>:
        self->currentFreq = self->storedFreq;
		ASYNC(self, updateDisplay, NULL);
    }
}

void generatePulse(Generators *self){
     158:	cf 92       	push	r12
     15a:	df 92       	push	r13
     15c:	ef 92       	push	r14
     15e:	ff 92       	push	r15
     160:	0f 93       	push	r16
     162:	1f 93       	push	r17
     164:	cf 93       	push	r28
     166:	df 93       	push	r29
     168:	ec 01       	movw	r28, r24
    if (self->currentFreq != 0 || self->risingEdge){
     16a:	8c 81       	ldd	r24, Y+4	; 0x04
     16c:	9d 81       	ldd	r25, Y+5	; 0x05
     16e:	89 2b       	or	r24, r25
     170:	29 f4       	brne	.+10     	; 0x17c <generatePulse+0x24>
     172:	88 85       	ldd	r24, Y+8	; 0x08
     174:	99 85       	ldd	r25, Y+9	; 0x09
     176:	89 2b       	or	r24, r25
     178:	09 f4       	brne	.+2      	; 0x17c <generatePulse+0x24>
     17a:	40 c0       	rjmp	.+128    	; 0x1fc <generatePulse+0xa4>
        ASYNC(self->bitOp, writeBit, NULL);
     17c:	0e 85       	ldd	r16, Y+14	; 0x0e
     17e:	1f 85       	ldd	r17, Y+15	; 0x0f
     180:	c1 2c       	mov	r12, r1
     182:	d1 2c       	mov	r13, r1
     184:	0f 2e       	mov	r0, r31
     186:	fd e4       	ldi	r31, 0x4D	; 77
     188:	ef 2e       	mov	r14, r31
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	ff 2e       	mov	r15, r31
     18e:	f0 2d       	mov	r31, r0
     190:	20 e0       	ldi	r18, 0x00	; 0
     192:	30 e0       	ldi	r19, 0x00	; 0
     194:	a9 01       	movw	r20, r18
     196:	60 e0       	ldi	r22, 0x00	; 0
     198:	70 e0       	ldi	r23, 0x00	; 0
     19a:	cb 01       	movw	r24, r22
     19c:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <async>
		self->risingEdge ^= (self->risingEdge);
     1a0:	19 86       	std	Y+9, r1	; 0x09
     1a2:	18 86       	std	Y+8, r1	; 0x08
		AFTER(MSEC(500/self->currentFreq), self, generatePulse, NULL);
     1a4:	6c 81       	ldd	r22, Y+4	; 0x04
     1a6:	7d 81       	ldd	r23, Y+5	; 0x05
     1a8:	84 ef       	ldi	r24, 0xF4	; 244
     1aa:	91 e0       	ldi	r25, 0x01	; 1
     1ac:	0e 94 2f 12 	call	0x245e	; 0x245e <__divmodhi4>
     1b0:	2d e7       	ldi	r18, 0x7D	; 125
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	db 01       	movw	r26, r22
     1b6:	0e 94 43 12 	call	0x2486	; 0x2486 <__usmulhisi3>
     1ba:	8b 01       	movw	r16, r22
     1bc:	9c 01       	movw	r18, r24
     1be:	99 23       	and	r25, r25
     1c0:	24 f4       	brge	.+8      	; 0x1ca <generatePulse+0x72>
     1c2:	0d 5f       	subi	r16, 0xFD	; 253
     1c4:	1f 4f       	sbci	r17, 0xFF	; 255
     1c6:	2f 4f       	sbci	r18, 0xFF	; 255
     1c8:	3f 4f       	sbci	r19, 0xFF	; 255
     1ca:	c9 01       	movw	r24, r18
     1cc:	b8 01       	movw	r22, r16
     1ce:	95 95       	asr	r25
     1d0:	87 95       	ror	r24
     1d2:	77 95       	ror	r23
     1d4:	67 95       	ror	r22
     1d6:	95 95       	asr	r25
     1d8:	87 95       	ror	r24
     1da:	77 95       	ror	r23
     1dc:	67 95       	ror	r22
     1de:	c1 2c       	mov	r12, r1
     1e0:	d1 2c       	mov	r13, r1
     1e2:	0f 2e       	mov	r0, r31
     1e4:	fc ea       	ldi	r31, 0xAC	; 172
     1e6:	ef 2e       	mov	r14, r31
     1e8:	f0 e0       	ldi	r31, 0x00	; 0
     1ea:	ff 2e       	mov	r15, r31
     1ec:	f0 2d       	mov	r31, r0
     1ee:	8e 01       	movw	r16, r28
     1f0:	20 e0       	ldi	r18, 0x00	; 0
     1f2:	30 e0       	ldi	r19, 0x00	; 0
     1f4:	a9 01       	movw	r20, r18
     1f6:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <async>
     1fa:	14 c0       	rjmp	.+40     	; 0x224 <__EEPROM_REGION_LENGTH__+0x24>
    }
	else{
    self->risingEdge ^= (self->risingEdge);
     1fc:	19 86       	std	Y+9, r1	; 0x09
     1fe:	18 86       	std	Y+8, r1	; 0x08
    AFTER(MSEC(500), self, generatePulse, NULL);
     200:	c1 2c       	mov	r12, r1
     202:	d1 2c       	mov	r13, r1
     204:	0f 2e       	mov	r0, r31
     206:	fc ea       	ldi	r31, 0xAC	; 172
     208:	ef 2e       	mov	r14, r31
     20a:	f0 e0       	ldi	r31, 0x00	; 0
     20c:	ff 2e       	mov	r15, r31
     20e:	f0 2d       	mov	r31, r0
     210:	8e 01       	movw	r16, r28
     212:	20 e0       	ldi	r18, 0x00	; 0
     214:	30 e0       	ldi	r19, 0x00	; 0
     216:	a9 01       	movw	r20, r18
     218:	69 e0       	ldi	r22, 0x09	; 9
     21a:	7d e3       	ldi	r23, 0x3D	; 61
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <async>
	
	
	
	
	
     224:	df 91       	pop	r29
     226:	cf 91       	pop	r28
     228:	1f 91       	pop	r17
     22a:	0f 91       	pop	r16
     22c:	ff 90       	pop	r15
     22e:	ef 90       	pop	r14
     230:	df 90       	pop	r13
     232:	cf 90       	pop	r12
     234:	08 95       	ret

00000236 <increase>:
		ASYNC(self->lcd, printAt, self->currentFreq*10);
    }
}

// Increases frequency
void increase(Generators *self) {
     236:	cf 92       	push	r12
     238:	df 92       	push	r13
     23a:	ef 92       	push	r14
     23c:	ff 92       	push	r15
     23e:	0f 93       	push	r16
     240:	1f 93       	push	r17
	if (self->currentFreq != 99){
     242:	fc 01       	movw	r30, r24
     244:	24 81       	ldd	r18, Z+4	; 0x04
     246:	35 81       	ldd	r19, Z+5	; 0x05
     248:	23 36       	cpi	r18, 0x63	; 99
     24a:	31 05       	cpc	r19, r1
     24c:	a9 f0       	breq	.+42     	; 0x278 <increase+0x42>
     24e:	8c 01       	movw	r16, r24
		self->currentFreq++;
     250:	2f 5f       	subi	r18, 0xFF	; 255
     252:	3f 4f       	sbci	r19, 0xFF	; 255
     254:	35 83       	std	Z+5, r19	; 0x05
     256:	24 83       	std	Z+4, r18	; 0x04
		ASYNC(self, updateDisplay, NULL);
     258:	c1 2c       	mov	r12, r1
     25a:	d1 2c       	mov	r13, r1
     25c:	0f 2e       	mov	r0, r31
     25e:	fc e5       	ldi	r31, 0x5C	; 92
     260:	ef 2e       	mov	r14, r31
     262:	f0 e0       	ldi	r31, 0x00	; 0
     264:	ff 2e       	mov	r15, r31
     266:	f0 2d       	mov	r31, r0
     268:	20 e0       	ldi	r18, 0x00	; 0
     26a:	30 e0       	ldi	r19, 0x00	; 0
     26c:	a9 01       	movw	r20, r18
     26e:	60 e0       	ldi	r22, 0x00	; 0
     270:	70 e0       	ldi	r23, 0x00	; 0
     272:	cb 01       	movw	r24, r22
     274:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <async>
	}   
}
     278:	1f 91       	pop	r17
     27a:	0f 91       	pop	r16
     27c:	ff 90       	pop	r15
     27e:	ef 90       	pop	r14
     280:	df 90       	pop	r13
     282:	cf 90       	pop	r12
     284:	08 95       	ret

00000286 <decrease>:

// The thing that happens when pulling joystick down
void decrease(Generators *self) {
     286:	cf 92       	push	r12
     288:	df 92       	push	r13
     28a:	ef 92       	push	r14
     28c:	ff 92       	push	r15
     28e:	0f 93       	push	r16
     290:	1f 93       	push	r17
    if (self->currentFreq > 0) {
     292:	fc 01       	movw	r30, r24
     294:	24 81       	ldd	r18, Z+4	; 0x04
     296:	35 81       	ldd	r19, Z+5	; 0x05
     298:	12 16       	cp	r1, r18
     29a:	13 06       	cpc	r1, r19
     29c:	ac f4       	brge	.+42     	; 0x2c8 <decrease+0x42>
     29e:	8c 01       	movw	r16, r24
        self->currentFreq--;
     2a0:	21 50       	subi	r18, 0x01	; 1
     2a2:	31 09       	sbc	r19, r1
     2a4:	35 83       	std	Z+5, r19	; 0x05
     2a6:	24 83       	std	Z+4, r18	; 0x04
        ASYNC(self, updateDisplay, NULL);
     2a8:	c1 2c       	mov	r12, r1
     2aa:	d1 2c       	mov	r13, r1
     2ac:	0f 2e       	mov	r0, r31
     2ae:	fc e5       	ldi	r31, 0x5C	; 92
     2b0:	ef 2e       	mov	r14, r31
     2b2:	f0 e0       	ldi	r31, 0x00	; 0
     2b4:	ff 2e       	mov	r15, r31
     2b6:	f0 2d       	mov	r31, r0
     2b8:	20 e0       	ldi	r18, 0x00	; 0
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	a9 01       	movw	r20, r18
     2be:	60 e0       	ldi	r22, 0x00	; 0
     2c0:	70 e0       	ldi	r23, 0x00	; 0
     2c2:	cb 01       	movw	r24, r22
     2c4:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <async>
        // Uppdatara frekvens (osäker om man ska calla SYNC eller ASYNC)
    }
}
     2c8:	1f 91       	pop	r17
     2ca:	0f 91       	pop	r16
     2cc:	ff 90       	pop	r15
     2ce:	ef 90       	pop	r14
     2d0:	df 90       	pop	r13
     2d2:	cf 90       	pop	r12
     2d4:	08 95       	ret

000002d6 <press>:

// The thing that happens when pressing the joystick
void press(Generators *self) {
     2d6:	cf 92       	push	r12
     2d8:	df 92       	push	r13
     2da:	ef 92       	push	r14
     2dc:	ff 92       	push	r15
     2de:	0f 93       	push	r16
     2e0:	1f 93       	push	r17
     2e2:	fc 01       	movw	r30, r24
    if (self->currentFreq != 0) { // Maybe fix call later
     2e4:	84 81       	ldd	r24, Z+4	; 0x04
     2e6:	95 81       	ldd	r25, Z+5	; 0x05
     2e8:	00 97       	sbiw	r24, 0x00	; 0
     2ea:	b1 f0       	breq	.+44     	; 0x318 <press+0x42>
        self->storedFreq = self->currentFreq;
     2ec:	97 83       	std	Z+7, r25	; 0x07
     2ee:	86 83       	std	Z+6, r24	; 0x06
        self->currentFreq = 0;
     2f0:	15 82       	std	Z+5, r1	; 0x05
     2f2:	14 82       	std	Z+4, r1	; 0x04
		ASYNC(self, updateDisplay, NULL);
     2f4:	c1 2c       	mov	r12, r1
     2f6:	d1 2c       	mov	r13, r1
     2f8:	0f 2e       	mov	r0, r31
     2fa:	fc e5       	ldi	r31, 0x5C	; 92
     2fc:	ef 2e       	mov	r14, r31
     2fe:	f0 e0       	ldi	r31, 0x00	; 0
     300:	ff 2e       	mov	r15, r31
     302:	f0 2d       	mov	r31, r0
     304:	8f 01       	movw	r16, r30
     306:	20 e0       	ldi	r18, 0x00	; 0
     308:	30 e0       	ldi	r19, 0x00	; 0
     30a:	a9 01       	movw	r20, r18
     30c:	60 e0       	ldi	r22, 0x00	; 0
     30e:	70 e0       	ldi	r23, 0x00	; 0
     310:	cb 01       	movw	r24, r22
     312:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <async>
     316:	15 c0       	rjmp	.+42     	; 0x342 <press+0x6c>
    }
    else {
        self->currentFreq = self->storedFreq;
     318:	86 81       	ldd	r24, Z+6	; 0x06
     31a:	97 81       	ldd	r25, Z+7	; 0x07
     31c:	95 83       	std	Z+5, r25	; 0x05
     31e:	84 83       	std	Z+4, r24	; 0x04
		ASYNC(self, updateDisplay, NULL);
     320:	c1 2c       	mov	r12, r1
     322:	d1 2c       	mov	r13, r1
     324:	0f 2e       	mov	r0, r31
     326:	fc e5       	ldi	r31, 0x5C	; 92
     328:	ef 2e       	mov	r14, r31
     32a:	f0 e0       	ldi	r31, 0x00	; 0
     32c:	ff 2e       	mov	r15, r31
     32e:	f0 2d       	mov	r31, r0
     330:	8f 01       	movw	r16, r30
     332:	20 e0       	ldi	r18, 0x00	; 0
     334:	30 e0       	ldi	r19, 0x00	; 0
     336:	a9 01       	movw	r20, r18
     338:	60 e0       	ldi	r22, 0x00	; 0
     33a:	70 e0       	ldi	r23, 0x00	; 0
     33c:	cb 01       	movw	r24, r22
     33e:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <async>
    }
}
     342:	1f 91       	pop	r17
     344:	0f 91       	pop	r16
     346:	ff 90       	pop	r15
     348:	ef 90       	pop	r14
     34a:	df 90       	pop	r13
     34c:	cf 90       	pop	r12
     34e:	08 95       	ret

00000350 <increaseGui>:
#include <stdbool.h>
#include "Gui.h"


// NOTE: The main purpose of this object is to distinguish current display segment and call methods accordingly
void increaseGui(Gui *self) {
     350:	cf 92       	push	r12
     352:	df 92       	push	r13
     354:	ef 92       	push	r14
     356:	ff 92       	push	r15
     358:	0f 93       	push	r16
     35a:	1f 93       	push	r17
    if (self->isRight) {
     35c:	fc 01       	movw	r30, r24
     35e:	24 81       	ldd	r18, Z+4	; 0x04
     360:	35 81       	ldd	r19, Z+5	; 0x05
     362:	23 2b       	or	r18, r19
     364:	99 f0       	breq	.+38     	; 0x38c <increaseGui+0x3c>
        ASYNC(self->genR, increase, NULL);
     366:	00 85       	ldd	r16, Z+8	; 0x08
     368:	11 85       	ldd	r17, Z+9	; 0x09
     36a:	c1 2c       	mov	r12, r1
     36c:	d1 2c       	mov	r13, r1
     36e:	0f 2e       	mov	r0, r31
     370:	fb e1       	ldi	r31, 0x1B	; 27
     372:	ef 2e       	mov	r14, r31
     374:	f1 e0       	ldi	r31, 0x01	; 1
     376:	ff 2e       	mov	r15, r31
     378:	f0 2d       	mov	r31, r0
     37a:	20 e0       	ldi	r18, 0x00	; 0
     37c:	30 e0       	ldi	r19, 0x00	; 0
     37e:	a9 01       	movw	r20, r18
     380:	60 e0       	ldi	r22, 0x00	; 0
     382:	70 e0       	ldi	r23, 0x00	; 0
     384:	cb 01       	movw	r24, r22
     386:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <async>
     38a:	13 c0       	rjmp	.+38     	; 0x3b2 <increaseGui+0x62>
    }
    else {
        ASYNC(self->genL, increase, NULL);
     38c:	fc 01       	movw	r30, r24
     38e:	06 81       	ldd	r16, Z+6	; 0x06
     390:	17 81       	ldd	r17, Z+7	; 0x07
     392:	c1 2c       	mov	r12, r1
     394:	d1 2c       	mov	r13, r1
     396:	0f 2e       	mov	r0, r31
     398:	fb e1       	ldi	r31, 0x1B	; 27
     39a:	ef 2e       	mov	r14, r31
     39c:	f1 e0       	ldi	r31, 0x01	; 1
     39e:	ff 2e       	mov	r15, r31
     3a0:	f0 2d       	mov	r31, r0
     3a2:	20 e0       	ldi	r18, 0x00	; 0
     3a4:	30 e0       	ldi	r19, 0x00	; 0
     3a6:	a9 01       	movw	r20, r18
     3a8:	60 e0       	ldi	r22, 0x00	; 0
     3aa:	70 e0       	ldi	r23, 0x00	; 0
     3ac:	cb 01       	movw	r24, r22
     3ae:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <async>
    }
}
     3b2:	1f 91       	pop	r17
     3b4:	0f 91       	pop	r16
     3b6:	ff 90       	pop	r15
     3b8:	ef 90       	pop	r14
     3ba:	df 90       	pop	r13
     3bc:	cf 90       	pop	r12
     3be:	08 95       	ret

000003c0 <decreaseGui>:

void decreaseGui(Gui *self) {
     3c0:	cf 92       	push	r12
     3c2:	df 92       	push	r13
     3c4:	ef 92       	push	r14
     3c6:	ff 92       	push	r15
     3c8:	0f 93       	push	r16
     3ca:	1f 93       	push	r17
    if (self->isRight) {
     3cc:	fc 01       	movw	r30, r24
     3ce:	24 81       	ldd	r18, Z+4	; 0x04
     3d0:	35 81       	ldd	r19, Z+5	; 0x05
     3d2:	23 2b       	or	r18, r19
     3d4:	99 f0       	breq	.+38     	; 0x3fc <decreaseGui+0x3c>
        ASYNC(self->genR, decrease, NULL);
     3d6:	00 85       	ldd	r16, Z+8	; 0x08
     3d8:	11 85       	ldd	r17, Z+9	; 0x09
     3da:	c1 2c       	mov	r12, r1
     3dc:	d1 2c       	mov	r13, r1
     3de:	0f 2e       	mov	r0, r31
     3e0:	f3 e4       	ldi	r31, 0x43	; 67
     3e2:	ef 2e       	mov	r14, r31
     3e4:	f1 e0       	ldi	r31, 0x01	; 1
     3e6:	ff 2e       	mov	r15, r31
     3e8:	f0 2d       	mov	r31, r0
     3ea:	20 e0       	ldi	r18, 0x00	; 0
     3ec:	30 e0       	ldi	r19, 0x00	; 0
     3ee:	a9 01       	movw	r20, r18
     3f0:	60 e0       	ldi	r22, 0x00	; 0
     3f2:	70 e0       	ldi	r23, 0x00	; 0
     3f4:	cb 01       	movw	r24, r22
     3f6:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <async>
     3fa:	13 c0       	rjmp	.+38     	; 0x422 <__DATA_REGION_LENGTH__+0x22>
    }
    else {
        ASYNC(self->genL, printAt, NULL);
     3fc:	fc 01       	movw	r30, r24
     3fe:	06 81       	ldd	r16, Z+6	; 0x06
     400:	17 81       	ldd	r17, Z+7	; 0x07
     402:	c1 2c       	mov	r12, r1
     404:	d1 2c       	mov	r13, r1
     406:	0f 2e       	mov	r0, r31
     408:	fa e9       	ldi	r31, 0x9A	; 154
     40a:	ef 2e       	mov	r14, r31
     40c:	f4 e0       	ldi	r31, 0x04	; 4
     40e:	ff 2e       	mov	r15, r31
     410:	f0 2d       	mov	r31, r0
     412:	20 e0       	ldi	r18, 0x00	; 0
     414:	30 e0       	ldi	r19, 0x00	; 0
     416:	a9 01       	movw	r20, r18
     418:	60 e0       	ldi	r22, 0x00	; 0
     41a:	70 e0       	ldi	r23, 0x00	; 0
     41c:	cb 01       	movw	r24, r22
     41e:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <async>
    }
}
     422:	1f 91       	pop	r17
     424:	0f 91       	pop	r16
     426:	ff 90       	pop	r15
     428:	ef 90       	pop	r14
     42a:	df 90       	pop	r13
     42c:	cf 90       	pop	r12
     42e:	08 95       	ret

00000430 <switchGeneratorGui>:

void switchGeneratorGui(Gui *self) {
     430:	cf 92       	push	r12
     432:	df 92       	push	r13
     434:	ef 92       	push	r14
     436:	ff 92       	push	r15
     438:	0f 93       	push	r16
     43a:	1f 93       	push	r17
     43c:	cf 93       	push	r28
     43e:	df 93       	push	r29
     440:	ec 01       	movw	r28, r24
    ASYNC(self->lcd, switchSegment, NULL);
     442:	0a 85       	ldd	r16, Y+10	; 0x0a
     444:	1b 85       	ldd	r17, Y+11	; 0x0b
     446:	c1 2c       	mov	r12, r1
     448:	d1 2c       	mov	r13, r1
     44a:	0f 2e       	mov	r0, r31
     44c:	fc e8       	ldi	r31, 0x8C	; 140
     44e:	ef 2e       	mov	r14, r31
     450:	f4 e0       	ldi	r31, 0x04	; 4
     452:	ff 2e       	mov	r15, r31
     454:	f0 2d       	mov	r31, r0
     456:	20 e0       	ldi	r18, 0x00	; 0
     458:	30 e0       	ldi	r19, 0x00	; 0
     45a:	a9 01       	movw	r20, r18
     45c:	60 e0       	ldi	r22, 0x00	; 0
     45e:	70 e0       	ldi	r23, 0x00	; 0
     460:	cb 01       	movw	r24, r22
     462:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <async>
    self->isRight = !(self->isRight);
     466:	2c 81       	ldd	r18, Y+4	; 0x04
     468:	3d 81       	ldd	r19, Y+5	; 0x05
     46a:	81 e0       	ldi	r24, 0x01	; 1
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	23 2b       	or	r18, r19
     470:	11 f0       	breq	.+4      	; 0x476 <switchGeneratorGui+0x46>
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	9d 83       	std	Y+5, r25	; 0x05
     478:	8c 83       	std	Y+4, r24	; 0x04
}
     47a:	df 91       	pop	r29
     47c:	cf 91       	pop	r28
     47e:	1f 91       	pop	r17
     480:	0f 91       	pop	r16
     482:	ff 90       	pop	r15
     484:	ef 90       	pop	r14
     486:	df 90       	pop	r13
     488:	cf 90       	pop	r12
     48a:	08 95       	ret

0000048c <pressGui>:

void pressGui(Gui *self) {
     48c:	cf 92       	push	r12
     48e:	df 92       	push	r13
     490:	ef 92       	push	r14
     492:	ff 92       	push	r15
     494:	0f 93       	push	r16
     496:	1f 93       	push	r17
    if (self->isRight) {
     498:	fc 01       	movw	r30, r24
     49a:	24 81       	ldd	r18, Z+4	; 0x04
     49c:	35 81       	ldd	r19, Z+5	; 0x05
     49e:	23 2b       	or	r18, r19
     4a0:	99 f0       	breq	.+38     	; 0x4c8 <pressGui+0x3c>
        ASYNC(self->genR, press, NULL);
     4a2:	00 85       	ldd	r16, Z+8	; 0x08
     4a4:	11 85       	ldd	r17, Z+9	; 0x09
     4a6:	c1 2c       	mov	r12, r1
     4a8:	d1 2c       	mov	r13, r1
     4aa:	0f 2e       	mov	r0, r31
     4ac:	fb e6       	ldi	r31, 0x6B	; 107
     4ae:	ef 2e       	mov	r14, r31
     4b0:	f1 e0       	ldi	r31, 0x01	; 1
     4b2:	ff 2e       	mov	r15, r31
     4b4:	f0 2d       	mov	r31, r0
     4b6:	20 e0       	ldi	r18, 0x00	; 0
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	a9 01       	movw	r20, r18
     4bc:	60 e0       	ldi	r22, 0x00	; 0
     4be:	70 e0       	ldi	r23, 0x00	; 0
     4c0:	cb 01       	movw	r24, r22
     4c2:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <async>
     4c6:	13 c0       	rjmp	.+38     	; 0x4ee <pressGui+0x62>
    }
    else {
        ASYNC(self->genL, press, NULL);
     4c8:	fc 01       	movw	r30, r24
     4ca:	06 81       	ldd	r16, Z+6	; 0x06
     4cc:	17 81       	ldd	r17, Z+7	; 0x07
     4ce:	c1 2c       	mov	r12, r1
     4d0:	d1 2c       	mov	r13, r1
     4d2:	0f 2e       	mov	r0, r31
     4d4:	fb e6       	ldi	r31, 0x6B	; 107
     4d6:	ef 2e       	mov	r14, r31
     4d8:	f1 e0       	ldi	r31, 0x01	; 1
     4da:	ff 2e       	mov	r15, r31
     4dc:	f0 2d       	mov	r31, r0
     4de:	20 e0       	ldi	r18, 0x00	; 0
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	a9 01       	movw	r20, r18
     4e4:	60 e0       	ldi	r22, 0x00	; 0
     4e6:	70 e0       	ldi	r23, 0x00	; 0
     4e8:	cb 01       	movw	r24, r22
     4ea:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <async>
    }
}
     4ee:	1f 91       	pop	r17
     4f0:	0f 91       	pop	r16
     4f2:	ff 90       	pop	r15
     4f4:	ef 90       	pop	r14
     4f6:	df 90       	pop	r13
     4f8:	cf 90       	pop	r12
     4fa:	08 95       	ret

000004fc <start>:

void start(Gui *self){
     4fc:	cf 92       	push	r12
     4fe:	df 92       	push	r13
     500:	ef 92       	push	r14
     502:	ff 92       	push	r15
     504:	0f 93       	push	r16
     506:	1f 93       	push	r17
     508:	cf 93       	push	r28
     50a:	df 93       	push	r29
     50c:	ec 01       	movw	r28, r24
	ASYNC(self->genL, generatePulse, NULL);
     50e:	0e 81       	ldd	r16, Y+6	; 0x06
     510:	1f 81       	ldd	r17, Y+7	; 0x07
     512:	c1 2c       	mov	r12, r1
     514:	d1 2c       	mov	r13, r1
     516:	0f 2e       	mov	r0, r31
     518:	fc ea       	ldi	r31, 0xAC	; 172
     51a:	ef 2e       	mov	r14, r31
     51c:	f0 e0       	ldi	r31, 0x00	; 0
     51e:	ff 2e       	mov	r15, r31
     520:	f0 2d       	mov	r31, r0
     522:	20 e0       	ldi	r18, 0x00	; 0
     524:	30 e0       	ldi	r19, 0x00	; 0
     526:	a9 01       	movw	r20, r18
     528:	60 e0       	ldi	r22, 0x00	; 0
     52a:	70 e0       	ldi	r23, 0x00	; 0
     52c:	cb 01       	movw	r24, r22
     52e:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <async>
	ASYNC(self->genR, generatePulse, NULL);
     532:	08 85       	ldd	r16, Y+8	; 0x08
     534:	19 85       	ldd	r17, Y+9	; 0x09
     536:	20 e0       	ldi	r18, 0x00	; 0
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	a9 01       	movw	r20, r18
     53c:	60 e0       	ldi	r22, 0x00	; 0
     53e:	70 e0       	ldi	r23, 0x00	; 0
     540:	cb 01       	movw	r24, r22
     542:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <async>
     546:	df 91       	pop	r29
     548:	cf 91       	pop	r28
     54a:	1f 91       	pop	r17
     54c:	0f 91       	pop	r16
     54e:	ff 90       	pop	r15
     550:	ef 90       	pop	r14
     552:	df 90       	pop	r13
     554:	cf 90       	pop	r12
     556:	08 95       	ret

00000558 <Init>:
     558:	e1 e6       	ldi	r30, 0x61	; 97
     55a:	f0 e0       	ldi	r31, 0x00	; 0
     55c:	80 e8       	ldi	r24, 0x80	; 128
     55e:	80 83       	st	Z, r24
     560:	10 82       	st	Z, r1
     562:	9f e0       	ldi	r25, 0x0F	; 15
     564:	90 93 e7 00 	sts	0x00E7, r25	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
     568:	97 eb       	ldi	r25, 0xB7	; 183
     56a:	90 93 e5 00 	sts	0x00E5, r25	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
     56e:	97 e0       	ldi	r25, 0x07	; 7
     570:	90 93 e6 00 	sts	0x00E6, r25	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
     574:	90 ec       	ldi	r25, 0xC0	; 192
     576:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
     57a:	90 ed       	ldi	r25, 0xD0	; 208
     57c:	95 b9       	out	0x05, r25	; 5
     57e:	84 b9       	out	0x04, r24	; 4
     580:	8c e0       	ldi	r24, 0x0C	; 12
     582:	8e b9       	out	0x0e, r24	; 14
     584:	8d b9       	out	0x0d, r24	; 13
     586:	ec e6       	ldi	r30, 0x6C	; 108
     588:	f0 e0       	ldi	r31, 0x00	; 0
     58a:	80 81       	ld	r24, Z
     58c:	80 6d       	ori	r24, 0xD0	; 208
     58e:	80 83       	st	Z, r24
     590:	eb e6       	ldi	r30, 0x6B	; 107
     592:	f0 e0       	ldi	r31, 0x00	; 0
     594:	80 81       	ld	r24, Z
     596:	8c 60       	ori	r24, 0x0C	; 12
     598:	80 83       	st	Z, r24
     59a:	8d b3       	in	r24, 0x1d	; 29
     59c:	80 6c       	ori	r24, 0xC0	; 192
     59e:	8d bb       	out	0x1d, r24	; 29
     5a0:	08 95       	ret

000005a2 <FreqChange>:
#include <avr/io.h>
#include "InteruptHandler.h"
#include "TinyTimber.h"
#include "Joystick.h"

void FreqChange(InteruptHandler *self){
     5a2:	cf 92       	push	r12
     5a4:	df 92       	push	r13
     5a6:	ef 92       	push	r14
     5a8:	ff 92       	push	r15
     5aa:	0f 93       	push	r16
     5ac:	1f 93       	push	r17
    ASYNC(self->Joystick, joystickVert, NULL);
     5ae:	fc 01       	movw	r30, r24
     5b0:	04 81       	ldd	r16, Z+4	; 0x04
     5b2:	15 81       	ldd	r17, Z+5	; 0x05
     5b4:	c1 2c       	mov	r12, r1
     5b6:	d1 2c       	mov	r13, r1
     5b8:	0f 2e       	mov	r0, r31
     5ba:	f1 e1       	ldi	r31, 0x11	; 17
     5bc:	ef 2e       	mov	r14, r31
     5be:	f3 e0       	ldi	r31, 0x03	; 3
     5c0:	ff 2e       	mov	r15, r31
     5c2:	f0 2d       	mov	r31, r0
     5c4:	20 e0       	ldi	r18, 0x00	; 0
     5c6:	30 e0       	ldi	r19, 0x00	; 0
     5c8:	a9 01       	movw	r20, r18
     5ca:	60 e0       	ldi	r22, 0x00	; 0
     5cc:	70 e0       	ldi	r23, 0x00	; 0
     5ce:	cb 01       	movw	r24, r22
     5d0:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <async>
}
     5d4:	1f 91       	pop	r17
     5d6:	0f 91       	pop	r16
     5d8:	ff 90       	pop	r15
     5da:	ef 90       	pop	r14
     5dc:	df 90       	pop	r13
     5de:	cf 90       	pop	r12
     5e0:	08 95       	ret

000005e2 <genSwitch>:

void genSwitch(InteruptHandler *self) {
     5e2:	cf 92       	push	r12
     5e4:	df 92       	push	r13
     5e6:	ef 92       	push	r14
     5e8:	ff 92       	push	r15
     5ea:	0f 93       	push	r16
     5ec:	1f 93       	push	r17
	ASYNC(self->Joystick, joystickHor, NULL);
     5ee:	fc 01       	movw	r30, r24
     5f0:	04 81       	ldd	r16, Z+4	; 0x04
     5f2:	15 81       	ldd	r17, Z+5	; 0x05
     5f4:	c1 2c       	mov	r12, r1
     5f6:	d1 2c       	mov	r13, r1
     5f8:	0f 2e       	mov	r0, r31
     5fa:	fb e9       	ldi	r31, 0x9B	; 155
     5fc:	ef 2e       	mov	r14, r31
     5fe:	f3 e0       	ldi	r31, 0x03	; 3
     600:	ff 2e       	mov	r15, r31
     602:	f0 2d       	mov	r31, r0
     604:	20 e0       	ldi	r18, 0x00	; 0
     606:	30 e0       	ldi	r19, 0x00	; 0
     608:	a9 01       	movw	r20, r18
     60a:	60 e0       	ldi	r22, 0x00	; 0
     60c:	70 e0       	ldi	r23, 0x00	; 0
     60e:	cb 01       	movw	r24, r22
     610:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <async>
}
     614:	1f 91       	pop	r17
     616:	0f 91       	pop	r16
     618:	ff 90       	pop	r15
     61a:	ef 90       	pop	r14
     61c:	df 90       	pop	r13
     61e:	cf 90       	pop	r12
     620:	08 95       	ret

00000622 <joystickVert>:
		ASYNC(self->gui, increaseGui, NULL);
		AFTER(MSEC(100), self, holdStick, NULL);
	}
}*/

int joystickVert(Joystick *self){
     622:	cf 92       	push	r12
     624:	df 92       	push	r13
     626:	ef 92       	push	r14
     628:	ff 92       	push	r15
     62a:	0f 93       	push	r16
     62c:	1f 93       	push	r17
     62e:	cf 93       	push	r28
     630:	df 93       	push	r29
     632:	ec 01       	movw	r28, r24
	if (!(PINB & (1 << PB7))) { //ner klickning
     634:	1f 99       	sbic	0x03, 7	; 3
     636:	2f c0       	rjmp	.+94     	; 0x696 <joystickVert+0x74>
		ASYNC(self->gui, decreaseGui, NULL); // Kalla p� GUI f�r att s�nka frekvensen
     638:	0c 81       	ldd	r16, Y+4	; 0x04
     63a:	1d 81       	ldd	r17, Y+5	; 0x05
     63c:	c1 2c       	mov	r12, r1
     63e:	d1 2c       	mov	r13, r1
     640:	0f 2e       	mov	r0, r31
     642:	f0 ee       	ldi	r31, 0xE0	; 224
     644:	ef 2e       	mov	r14, r31
     646:	f1 e0       	ldi	r31, 0x01	; 1
     648:	ff 2e       	mov	r15, r31
     64a:	f0 2d       	mov	r31, r0
     64c:	20 e0       	ldi	r18, 0x00	; 0
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	a9 01       	movw	r20, r18
     652:	60 e0       	ldi	r22, 0x00	; 0
     654:	70 e0       	ldi	r23, 0x00	; 0
     656:	cb 01       	movw	r24, r22
     658:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <async>
		if (self->msg) {
     65c:	8f 81       	ldd	r24, Y+7	; 0x07
     65e:	98 85       	ldd	r25, Y+8	; 0x08
     660:	00 97       	sbiw	r24, 0x00	; 0
     662:	21 f0       	breq	.+8      	; 0x66c <joystickVert+0x4a>
			ABORT(self->msg);
     664:	0e 94 b7 11 	call	0x236e	; 0x236e <ABORT>
			self->msg = NULL;
     668:	18 86       	std	Y+8, r1	; 0x08
     66a:	1f 82       	std	Y+7, r1	; 0x07
		}
		self->msg = AFTER(MSEC(100), self, joystickVert, NULL);	// Kalla p� sig sj�lv igen (loop)
     66c:	c1 2c       	mov	r12, r1
     66e:	d1 2c       	mov	r13, r1
     670:	0f 2e       	mov	r0, r31
     672:	f1 e1       	ldi	r31, 0x11	; 17
     674:	ef 2e       	mov	r14, r31
     676:	f3 e0       	ldi	r31, 0x03	; 3
     678:	ff 2e       	mov	r15, r31
     67a:	f0 2d       	mov	r31, r0
     67c:	8e 01       	movw	r16, r28
     67e:	20 e0       	ldi	r18, 0x00	; 0
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	a9 01       	movw	r20, r18
     684:	65 e3       	ldi	r22, 0x35	; 53
     686:	7c e0       	ldi	r23, 0x0C	; 12
     688:	80 e0       	ldi	r24, 0x00	; 0
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <async>
     690:	98 87       	std	Y+8, r25	; 0x08
     692:	8f 83       	std	Y+7, r24	; 0x07
     694:	45 c0       	rjmp	.+138    	; 0x720 <joystickVert+0xfe>
	}
	else if (!(PINB & (1 << PB6))) {	// Up
     696:	1e 99       	sbic	0x03, 6	; 3
     698:	2f c0       	rjmp	.+94     	; 0x6f8 <joystickVert+0xd6>
		ASYNC(self->gui, increaseGui, NULL);
     69a:	0c 81       	ldd	r16, Y+4	; 0x04
     69c:	1d 81       	ldd	r17, Y+5	; 0x05
     69e:	c1 2c       	mov	r12, r1
     6a0:	d1 2c       	mov	r13, r1
     6a2:	0f 2e       	mov	r0, r31
     6a4:	f8 ea       	ldi	r31, 0xA8	; 168
     6a6:	ef 2e       	mov	r14, r31
     6a8:	f1 e0       	ldi	r31, 0x01	; 1
     6aa:	ff 2e       	mov	r15, r31
     6ac:	f0 2d       	mov	r31, r0
     6ae:	20 e0       	ldi	r18, 0x00	; 0
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	a9 01       	movw	r20, r18
     6b4:	60 e0       	ldi	r22, 0x00	; 0
     6b6:	70 e0       	ldi	r23, 0x00	; 0
     6b8:	cb 01       	movw	r24, r22
     6ba:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <async>
		if (self->msg) {
     6be:	8f 81       	ldd	r24, Y+7	; 0x07
     6c0:	98 85       	ldd	r25, Y+8	; 0x08
     6c2:	00 97       	sbiw	r24, 0x00	; 0
     6c4:	21 f0       	breq	.+8      	; 0x6ce <joystickVert+0xac>
			ABORT(self->msg);
     6c6:	0e 94 b7 11 	call	0x236e	; 0x236e <ABORT>
			self->msg = NULL;
     6ca:	18 86       	std	Y+8, r1	; 0x08
     6cc:	1f 82       	std	Y+7, r1	; 0x07
		}
		self->msg = AFTER(MSEC(100), self, joystickVert, NULL);
     6ce:	c1 2c       	mov	r12, r1
     6d0:	d1 2c       	mov	r13, r1
     6d2:	0f 2e       	mov	r0, r31
     6d4:	f1 e1       	ldi	r31, 0x11	; 17
     6d6:	ef 2e       	mov	r14, r31
     6d8:	f3 e0       	ldi	r31, 0x03	; 3
     6da:	ff 2e       	mov	r15, r31
     6dc:	f0 2d       	mov	r31, r0
     6de:	8e 01       	movw	r16, r28
     6e0:	20 e0       	ldi	r18, 0x00	; 0
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	a9 01       	movw	r20, r18
     6e6:	65 e3       	ldi	r22, 0x35	; 53
     6e8:	7c e0       	ldi	r23, 0x0C	; 12
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <async>
     6f2:	98 87       	std	Y+8, r25	; 0x08
     6f4:	8f 83       	std	Y+7, r24	; 0x07
     6f6:	14 c0       	rjmp	.+40     	; 0x720 <joystickVert+0xfe>
	}
	else if (!(PINB & (1 << PB4))) { // Press
     6f8:	1c 99       	sbic	0x03, 4	; 3
     6fa:	12 c0       	rjmp	.+36     	; 0x720 <joystickVert+0xfe>
		ASYNC(self->gui, pressGui, NULL);
     6fc:	0c 81       	ldd	r16, Y+4	; 0x04
     6fe:	1d 81       	ldd	r17, Y+5	; 0x05
     700:	c1 2c       	mov	r12, r1
     702:	d1 2c       	mov	r13, r1
     704:	0f 2e       	mov	r0, r31
     706:	f6 e4       	ldi	r31, 0x46	; 70
     708:	ef 2e       	mov	r14, r31
     70a:	f2 e0       	ldi	r31, 0x02	; 2
     70c:	ff 2e       	mov	r15, r31
     70e:	f0 2d       	mov	r31, r0
     710:	20 e0       	ldi	r18, 0x00	; 0
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	a9 01       	movw	r20, r18
     716:	60 e0       	ldi	r22, 0x00	; 0
     718:	70 e0       	ldi	r23, 0x00	; 0
     71a:	cb 01       	movw	r24, r22
     71c:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <async>
	}
	else{
		return 0;
	}
	return 0;
}
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	df 91       	pop	r29
     726:	cf 91       	pop	r28
     728:	1f 91       	pop	r17
     72a:	0f 91       	pop	r16
     72c:	ff 90       	pop	r15
     72e:	ef 90       	pop	r14
     730:	df 90       	pop	r13
     732:	cf 90       	pop	r12
     734:	08 95       	ret

00000736 <joystickHor>:


int joystickHor(Joystick *self) {
     736:	cf 92       	push	r12
     738:	df 92       	push	r13
     73a:	ef 92       	push	r14
     73c:	ff 92       	push	r15
     73e:	0f 93       	push	r16
     740:	1f 93       	push	r17
     742:	cf 93       	push	r28
     744:	df 93       	push	r29
	if (!(PINE & (1 << PE3)) || (!(PINE & (1 << PE2)))) {	// Både och???
     746:	63 9b       	sbis	0x0c, 3	; 12
     748:	02 c0       	rjmp	.+4      	; 0x74e <joystickHor+0x18>
     74a:	62 99       	sbic	0x0c, 2	; 12
     74c:	15 c0       	rjmp	.+42     	; 0x778 <joystickHor+0x42>
     74e:	ec 01       	movw	r28, r24
		self->msg = ASYNC(self->gui, switchGeneratorGui, NULL);
     750:	0c 81       	ldd	r16, Y+4	; 0x04
     752:	1d 81       	ldd	r17, Y+5	; 0x05
     754:	c1 2c       	mov	r12, r1
     756:	d1 2c       	mov	r13, r1
     758:	0f 2e       	mov	r0, r31
     75a:	f8 e1       	ldi	r31, 0x18	; 24
     75c:	ef 2e       	mov	r14, r31
     75e:	f2 e0       	ldi	r31, 0x02	; 2
     760:	ff 2e       	mov	r15, r31
     762:	f0 2d       	mov	r31, r0
     764:	20 e0       	ldi	r18, 0x00	; 0
     766:	30 e0       	ldi	r19, 0x00	; 0
     768:	a9 01       	movw	r20, r18
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	70 e0       	ldi	r23, 0x00	; 0
     76e:	cb 01       	movw	r24, r22
     770:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <async>
     774:	98 87       	std	Y+8, r25	; 0x08
     776:	8f 83       	std	Y+7, r24	; 0x07
	}
}
     778:	df 91       	pop	r29
     77a:	cf 91       	pop	r28
     77c:	1f 91       	pop	r17
     77e:	0f 91       	pop	r16
     780:	ff 90       	pop	r15
     782:	ef 90       	pop	r14
     784:	df 90       	pop	r13
     786:	cf 90       	pop	r12
     788:	08 95       	ret

0000078a <displayChar>:
    [9] = {0b0001, 0b0101, 0b1011, 0b0001},
    [10] = {0b1001, 0b1111, 0b1111, 0b1111},// This spot is for the "invalid" character (also used for reset)
};
 
//Help function for writeChar (fills array with elements that match character)
void displayChar(char c, bool odd, volatile uint8_t *address) {
     78a:	cf 93       	push	r28
     78c:	df 93       	push	r29
     78e:	00 d0       	rcall	.+0      	; 0x790 <displayChar+0x6>
     790:	00 d0       	rcall	.+0      	; 0x792 <displayChar+0x8>
     792:	cd b7       	in	r28, 0x3d	; 61
     794:	de b7       	in	r29, 0x3e	; 62
     796:	da 01       	movw	r26, r20
    uint8_t array[4];
    if (c < '0' || c > '9') {	// Invalid character
     798:	90 ed       	ldi	r25, 0xD0	; 208
     79a:	98 0f       	add	r25, r24
     79c:	9a 30       	cpi	r25, 0x0A	; 10
     79e:	80 f4       	brcc	.+32     	; 0x7c0 <displayChar+0x36>
     7a0:	20 e0       	ldi	r18, 0x00	; 0
     7a2:	30 e0       	ldi	r19, 0x00	; 0
     7a4:	28 c0       	rjmp	.+80     	; 0x7f6 <displayChar+0x6c>
        for (int i = 0; i < 4; i++) {
            array[i] = characters[10][i];
     7a6:	fc 01       	movw	r30, r24
     7a8:	e8 5f       	subi	r30, 0xF8	; 248
     7aa:	fe 4f       	sbci	r31, 0xFE	; 254
     7ac:	20 a5       	ldd	r18, Z+40	; 0x28
     7ae:	e1 e0       	ldi	r30, 0x01	; 1
     7b0:	f0 e0       	ldi	r31, 0x00	; 0
     7b2:	ec 0f       	add	r30, r28
     7b4:	fd 1f       	adc	r31, r29
     7b6:	e8 0f       	add	r30, r24
     7b8:	f9 1f       	adc	r31, r25
     7ba:	20 83       	st	Z, r18
 
//Help function for writeChar (fills array with elements that match character)
void displayChar(char c, bool odd, volatile uint8_t *address) {
    uint8_t array[4];
    if (c < '0' || c > '9') {	// Invalid character
        for (int i = 0; i < 4; i++) {
     7bc:	01 96       	adiw	r24, 0x01	; 1
     7be:	02 c0       	rjmp	.+4      	; 0x7c4 <displayChar+0x3a>
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	84 30       	cpi	r24, 0x04	; 4
     7c6:	91 05       	cpc	r25, r1
     7c8:	74 f3       	brlt	.-36     	; 0x7a6 <displayChar+0x1c>
     7ca:	18 c0       	rjmp	.+48     	; 0x7fc <displayChar+0x72>
            array[i] = characters[10][i];
        }
    }
    else {						// Valid character
        for (int i = 0; i < 4; i++) {
            array[i] = characters[c-48][i];
     7cc:	e8 2f       	mov	r30, r24
     7ce:	f0 e0       	ldi	r31, 0x00	; 0
     7d0:	f0 97       	sbiw	r30, 0x30	; 48
     7d2:	ee 0f       	add	r30, r30
     7d4:	ff 1f       	adc	r31, r31
     7d6:	ee 0f       	add	r30, r30
     7d8:	ff 1f       	adc	r31, r31
     7da:	e8 5f       	subi	r30, 0xF8	; 248
     7dc:	fe 4f       	sbci	r31, 0xFE	; 254
     7de:	e2 0f       	add	r30, r18
     7e0:	f3 1f       	adc	r31, r19
     7e2:	90 81       	ld	r25, Z
     7e4:	e1 e0       	ldi	r30, 0x01	; 1
     7e6:	f0 e0       	ldi	r31, 0x00	; 0
     7e8:	ec 0f       	add	r30, r28
     7ea:	fd 1f       	adc	r31, r29
     7ec:	e2 0f       	add	r30, r18
     7ee:	f3 1f       	adc	r31, r19
     7f0:	90 83       	st	Z, r25
        for (int i = 0; i < 4; i++) {
            array[i] = characters[10][i];
        }
    }
    else {						// Valid character
        for (int i = 0; i < 4; i++) {
     7f2:	2f 5f       	subi	r18, 0xFF	; 255
     7f4:	3f 4f       	sbci	r19, 0xFF	; 255
     7f6:	24 30       	cpi	r18, 0x04	; 4
     7f8:	31 05       	cpc	r19, r1
     7fa:	44 f3       	brlt	.-48     	; 0x7cc <displayChar+0x42>
            array[i] = characters[c-48][i];
        }
    }
    if (odd) {					// If odd digit, shifts in order to set correct digit
     7fc:	61 11       	cpse	r22, r1
     7fe:	0d c0       	rjmp	.+26     	; 0x81a <displayChar+0x90>
     800:	11 c0       	rjmp	.+34     	; 0x824 <displayChar+0x9a>
        for (int i = 0; i < 4; i++) {
            array[i] <<= 4;
     802:	e1 e0       	ldi	r30, 0x01	; 1
     804:	f0 e0       	ldi	r31, 0x00	; 0
     806:	ec 0f       	add	r30, r28
     808:	fd 1f       	adc	r31, r29
     80a:	e8 0f       	add	r30, r24
     80c:	f9 1f       	adc	r31, r25
     80e:	20 81       	ld	r18, Z
     810:	22 95       	swap	r18
     812:	20 7f       	andi	r18, 0xF0	; 240
     814:	20 83       	st	Z, r18
        for (int i = 0; i < 4; i++) {
            array[i] = characters[c-48][i];
        }
    }
    if (odd) {					// If odd digit, shifts in order to set correct digit
        for (int i = 0; i < 4; i++) {
     816:	01 96       	adiw	r24, 0x01	; 1
     818:	02 c0       	rjmp	.+4      	; 0x81e <displayChar+0x94>
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	84 30       	cpi	r24, 0x04	; 4
     820:	91 05       	cpc	r25, r1
     822:	7c f3       	brlt	.-34     	; 0x802 <displayChar+0x78>
            array[i] <<= 4;
        }
    }							// This part sets the character in needed registers
    *address |= array[0];		// (K, -, -, A)
     824:	9c 91       	ld	r25, X
     826:	89 81       	ldd	r24, Y+1	; 0x01
     828:	89 2b       	or	r24, r25
     82a:	8c 93       	st	X, r24
    *(address+5) |= array[1];	// (J, F, H, B)
     82c:	15 96       	adiw	r26, 0x05	; 5
     82e:	9c 91       	ld	r25, X
     830:	15 97       	sbiw	r26, 0x05	; 5
     832:	8a 81       	ldd	r24, Y+2	; 0x02
     834:	89 2b       	or	r24, r25
     836:	15 96       	adiw	r26, 0x05	; 5
     838:	8c 93       	st	X, r24
     83a:	15 97       	sbiw	r26, 0x05	; 5
    *(address+10) |= array[2];	// (L, E, G, C)
     83c:	1a 96       	adiw	r26, 0x0a	; 10
     83e:	9c 91       	ld	r25, X
     840:	1a 97       	sbiw	r26, 0x0a	; 10
     842:	8b 81       	ldd	r24, Y+3	; 0x03
     844:	89 2b       	or	r24, r25
     846:	1a 96       	adiw	r26, 0x0a	; 10
     848:	8c 93       	st	X, r24
     84a:	1a 97       	sbiw	r26, 0x0a	; 10
    *(address+15) |= array[3];	// (M, P, N, D)
     84c:	1f 96       	adiw	r26, 0x0f	; 15
     84e:	9c 91       	ld	r25, X
     850:	1f 97       	sbiw	r26, 0x0f	; 15
     852:	8c 81       	ldd	r24, Y+4	; 0x04
     854:	89 2b       	or	r24, r25
     856:	1f 96       	adiw	r26, 0x0f	; 15
     858:	8c 93       	st	X, r24
}
     85a:	0f 90       	pop	r0
     85c:	0f 90       	pop	r0
     85e:	0f 90       	pop	r0
     860:	0f 90       	pop	r0
     862:	df 91       	pop	r29
     864:	cf 91       	pop	r28
     866:	08 95       	ret

00000868 <removeOldChar>:
 
 
// Removes previous character at given location
void removeOldChar(bool odd, volatile uint8_t *address) {
    // AND:s 0 on the parts that need to be reset
    if (odd) {
     868:	88 23       	and	r24, r24
     86a:	91 f0       	breq	.+36     	; 0x890 <removeOldChar+0x28>
        *address &= 0b00001001;
     86c:	fb 01       	movw	r30, r22
     86e:	80 81       	ld	r24, Z
     870:	89 70       	andi	r24, 0x09	; 9
     872:	80 83       	st	Z, r24
        for (int i = 5; i < 20; i += 5) {
     874:	85 e0       	ldi	r24, 0x05	; 5
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	07 c0       	rjmp	.+14     	; 0x888 <removeOldChar+0x20>
            *(address + i) &= 0b00001111;
     87a:	fb 01       	movw	r30, r22
     87c:	e8 0f       	add	r30, r24
     87e:	f9 1f       	adc	r31, r25
     880:	20 81       	ld	r18, Z
     882:	2f 70       	andi	r18, 0x0F	; 15
     884:	20 83       	st	Z, r18
// Removes previous character at given location
void removeOldChar(bool odd, volatile uint8_t *address) {
    // AND:s 0 on the parts that need to be reset
    if (odd) {
        *address &= 0b00001001;
        for (int i = 5; i < 20; i += 5) {
     886:	05 96       	adiw	r24, 0x05	; 5
     888:	84 31       	cpi	r24, 0x14	; 20
     88a:	91 05       	cpc	r25, r1
     88c:	b4 f3       	brlt	.-20     	; 0x87a <removeOldChar+0x12>
     88e:	08 95       	ret
            *(address + i) &= 0b00001111;
        }
    }
    else {
        *address &= 0b10010000;
     890:	fb 01       	movw	r30, r22
     892:	80 81       	ld	r24, Z
     894:	80 79       	andi	r24, 0x90	; 144
     896:	80 83       	st	Z, r24
        for (int i = 5; i < 20; i += 5) {
     898:	85 e0       	ldi	r24, 0x05	; 5
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	07 c0       	rjmp	.+14     	; 0x8ac <removeOldChar+0x44>
            *(address + i) &= 0b11110000;
     89e:	fb 01       	movw	r30, r22
     8a0:	e8 0f       	add	r30, r24
     8a2:	f9 1f       	adc	r31, r25
     8a4:	20 81       	ld	r18, Z
     8a6:	20 7f       	andi	r18, 0xF0	; 240
     8a8:	20 83       	st	Z, r18
            *(address + i) &= 0b00001111;
        }
    }
    else {
        *address &= 0b10010000;
        for (int i = 5; i < 20; i += 5) {
     8aa:	05 96       	adiw	r24, 0x05	; 5
     8ac:	84 31       	cpi	r24, 0x14	; 20
     8ae:	91 05       	cpc	r25, r1
     8b0:	b4 f3       	brlt	.-20     	; 0x89e <removeOldChar+0x36>
     8b2:	08 95       	ret

000008b4 <writeChar>:
        }
    }
}
 
// Takes character ('0' - '9') and a position (0 - 5 (NOT CHECKED)) and prints it on the screen
void writeChar(char c, int pos) {
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	18 2f       	mov	r17, r24
    volatile uint8_t *address = &LCDDR0;	// Create pointer to start register
    if (pos % 2 == 0) {	// Even
     8bc:	60 fd       	sbrc	r22, 0
     8be:	14 c0       	rjmp	.+40     	; 0x8e8 <writeChar+0x34>
        address += pos/2;					// Change address according to position
     8c0:	ab 01       	movw	r20, r22
     8c2:	77 23       	and	r23, r23
     8c4:	14 f4       	brge	.+4      	; 0x8ca <writeChar+0x16>
     8c6:	4f 5f       	subi	r20, 0xFF	; 255
     8c8:	5f 4f       	sbci	r21, 0xFF	; 255
     8ca:	55 95       	asr	r21
     8cc:	47 95       	ror	r20
     8ce:	ea 01       	movw	r28, r20
     8d0:	c4 51       	subi	r28, 0x14	; 20
     8d2:	df 4f       	sbci	r29, 0xFF	; 255
        removeOldChar(false, address);
     8d4:	be 01       	movw	r22, r28
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	0e 94 34 04 	call	0x868	; 0x868 <removeOldChar>
        displayChar(c, false, address);
     8dc:	ae 01       	movw	r20, r28
     8de:	60 e0       	ldi	r22, 0x00	; 0
     8e0:	81 2f       	mov	r24, r17
     8e2:	0e 94 c5 03 	call	0x78a	; 0x78a <displayChar>
     8e6:	14 c0       	rjmp	.+40     	; 0x910 <writeChar+0x5c>
    }
    else {				// Odd
        address += (pos - 1) / 2;			// Change address according to position
     8e8:	61 50       	subi	r22, 0x01	; 1
     8ea:	71 09       	sbc	r23, r1
     8ec:	ab 01       	movw	r20, r22
     8ee:	12 f4       	brpl	.+4      	; 0x8f4 <writeChar+0x40>
     8f0:	4f 5f       	subi	r20, 0xFF	; 255
     8f2:	5f 4f       	sbci	r21, 0xFF	; 255
     8f4:	55 95       	asr	r21
     8f6:	47 95       	ror	r20
     8f8:	ea 01       	movw	r28, r20
     8fa:	c4 51       	subi	r28, 0x14	; 20
     8fc:	df 4f       	sbci	r29, 0xFF	; 255
        removeOldChar(true, address);
     8fe:	be 01       	movw	r22, r28
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	0e 94 34 04 	call	0x868	; 0x868 <removeOldChar>
        displayChar(c, true, address);
     906:	ae 01       	movw	r20, r28
     908:	61 e0       	ldi	r22, 0x01	; 1
     90a:	81 2f       	mov	r24, r17
     90c:	0e 94 c5 03 	call	0x78a	; 0x78a <displayChar>
    }
};
     910:	df 91       	pop	r29
     912:	cf 91       	pop	r28
     914:	1f 91       	pop	r17
     916:	08 95       	ret

00000918 <switchSegment>:

// Switches between two segments 
void switchSegment() {
    LCDDR13 = !(LCDDR13 & 1);
     918:	e9 ef       	ldi	r30, 0xF9	; 249
     91a:	f0 e0       	ldi	r31, 0x00	; 0
     91c:	90 81       	ld	r25, Z
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	98 27       	eor	r25, r24
     922:	91 70       	andi	r25, 0x01	; 1
     924:	90 83       	st	Z, r25
    LCDDR18 = !(LCDDR18 & 1);
     926:	ee ef       	ldi	r30, 0xFE	; 254
     928:	f0 e0       	ldi	r31, 0x00	; 0
     92a:	90 81       	ld	r25, Z
     92c:	89 27       	eor	r24, r25
     92e:	81 70       	andi	r24, 0x01	; 1
     930:	80 83       	st	Z, r24
     932:	08 95       	ret

00000934 <printAt>:
}
 
// Displays last two digits of num in pos and pos+1
int  printAt(Lcd *self, int input) {  // [pos, num]
     934:	ef 92       	push	r14
     936:	ff 92       	push	r15
     938:	0f 93       	push	r16
     93a:	1f 93       	push	r17
     93c:	cf 93       	push	r28
     93e:	df 93       	push	r29
     940:	cb 01       	movw	r24, r22
    int pp = input % 10;
     942:	0a e0       	ldi	r16, 0x0A	; 10
     944:	10 e0       	ldi	r17, 0x00	; 0
     946:	b8 01       	movw	r22, r16
     948:	0e 94 2f 12 	call	0x245e	; 0x245e <__divmodhi4>
     94c:	7b 01       	movw	r14, r22
     94e:	ec 01       	movw	r28, r24
    int num = input / 10;
    writeChar((num % 100) / 10 + '0', pp);
     950:	cb 01       	movw	r24, r22
     952:	64 e6       	ldi	r22, 0x64	; 100
     954:	70 e0       	ldi	r23, 0x00	; 0
     956:	0e 94 2f 12 	call	0x245e	; 0x245e <__divmodhi4>
     95a:	b8 01       	movw	r22, r16
     95c:	0e 94 2f 12 	call	0x245e	; 0x245e <__divmodhi4>
     960:	86 2f       	mov	r24, r22
     962:	be 01       	movw	r22, r28
     964:	80 5d       	subi	r24, 0xD0	; 208
     966:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <writeChar>
    pp++;
     96a:	21 96       	adiw	r28, 0x01	; 1
    writeChar( num % 10 + '0', pp);
     96c:	c7 01       	movw	r24, r14
     96e:	b8 01       	movw	r22, r16
     970:	0e 94 2f 12 	call	0x245e	; 0x245e <__divmodhi4>
     974:	be 01       	movw	r22, r28
     976:	80 5d       	subi	r24, 0xD0	; 208
     978:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <writeChar>

    return 0;
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	df 91       	pop	r29
     982:	cf 91       	pop	r28
     984:	1f 91       	pop	r17
     986:	0f 91       	pop	r16
     988:	ff 90       	pop	r15
     98a:	ef 90       	pop	r14
     98c:	08 95       	ret

0000098e <main>:
#include "Joystick.h"
#include "Lcd.h"
#include "TinyTimber.h"


int main() {
     98e:	ef 92       	push	r14
     990:	ff 92       	push	r15
     992:	0f 93       	push	r16
     994:	1f 93       	push	r17
     996:	cf 93       	push	r28
     998:	df 93       	push	r29
     99a:	cd b7       	in	r28, 0x3d	; 61
     99c:	de b7       	in	r29, 0x3e	; 62
     99e:	cd 54       	subi	r28, 0x4D	; 77
     9a0:	d1 09       	sbc	r29, r1
     9a2:	0f b6       	in	r0, 0x3f	; 63
     9a4:	f8 94       	cli
     9a6:	de bf       	out	0x3e, r29	; 62
     9a8:	0f be       	out	0x3f, r0	; 63
     9aa:	cd bf       	out	0x3d, r28	; 61
	Init();
     9ac:	0e 94 ac 02 	call	0x558	; 0x558 <Init>
	Lcd display = initLcd();
     9b0:	1a 82       	std	Y+2, r1	; 0x02
     9b2:	19 82       	std	Y+1, r1	; 0x01
     9b4:	1c 82       	std	Y+4, r1	; 0x04
     9b6:	1b 82       	std	Y+3, r1	; 0x03
	BitOp bitL = initBitOp(0);
     9b8:	1e 82       	std	Y+6, r1	; 0x06
     9ba:	1d 82       	std	Y+5, r1	; 0x05
     9bc:	18 86       	std	Y+8, r1	; 0x08
     9be:	1f 82       	std	Y+7, r1	; 0x07
     9c0:	1a 86       	std	Y+10, r1	; 0x0a
     9c2:	19 86       	std	Y+9, r1	; 0x09
	BitOp bitR = initBitOp(1);
     9c4:	1c 86       	std	Y+12, r1	; 0x0c
     9c6:	1b 86       	std	Y+11, r1	; 0x0b
     9c8:	1e 86       	std	Y+14, r1	; 0x0e
     9ca:	1d 86       	std	Y+13, r1	; 0x0d
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	98 8b       	std	Y+16, r25	; 0x10
     9d2:	8f 87       	std	Y+15, r24	; 0x0f
	Generators genL = initGenerator(&display, 0, &bitL);
     9d4:	1a 8a       	std	Y+18, r1	; 0x12
     9d6:	19 8a       	std	Y+17, r1	; 0x11
     9d8:	1c 8a       	std	Y+20, r1	; 0x14
     9da:	1b 8a       	std	Y+19, r1	; 0x13
     9dc:	1e 8a       	std	Y+22, r1	; 0x16
     9de:	1d 8a       	std	Y+21, r1	; 0x15
     9e0:	18 8e       	std	Y+24, r1	; 0x18
     9e2:	1f 8a       	std	Y+23, r1	; 0x17
     9e4:	9a 8f       	std	Y+26, r25	; 0x1a
     9e6:	89 8f       	std	Y+25, r24	; 0x19
     9e8:	1c 8e       	std	Y+28, r1	; 0x1c
     9ea:	1b 8e       	std	Y+27, r1	; 0x1b
     9ec:	9e 01       	movw	r18, r28
     9ee:	2f 5f       	subi	r18, 0xFF	; 255
     9f0:	3f 4f       	sbci	r19, 0xFF	; 255
     9f2:	3e 8f       	std	Y+30, r19	; 0x1e
     9f4:	2d 8f       	std	Y+29, r18	; 0x1d
     9f6:	ae 01       	movw	r20, r28
     9f8:	4b 5f       	subi	r20, 0xFB	; 251
     9fa:	5f 4f       	sbci	r21, 0xFF	; 255
     9fc:	58 a3       	std	Y+32, r21	; 0x20
     9fe:	4f 8f       	std	Y+31, r20	; 0x1f
	Generators genR = initGenerator(&display, 1, &bitR);
     a00:	1a a2       	std	Y+34, r1	; 0x22
     a02:	19 a2       	std	Y+33, r1	; 0x21
     a04:	1c a2       	std	Y+36, r1	; 0x24
     a06:	1b a2       	std	Y+35, r1	; 0x23
     a08:	1e a2       	std	Y+38, r1	; 0x26
     a0a:	1d a2       	std	Y+37, r1	; 0x25
     a0c:	18 a6       	std	Y+40, r1	; 0x28
     a0e:	1f a2       	std	Y+39, r1	; 0x27
     a10:	9a a7       	std	Y+42, r25	; 0x2a
     a12:	89 a7       	std	Y+41, r24	; 0x29
     a14:	9c a7       	std	Y+44, r25	; 0x2c
     a16:	8b a7       	std	Y+43, r24	; 0x2b
     a18:	3e a7       	std	Y+46, r19	; 0x2e
     a1a:	2d a7       	std	Y+45, r18	; 0x2d
     a1c:	4a 5f       	subi	r20, 0xFA	; 250
     a1e:	5f 4f       	sbci	r21, 0xFF	; 255
     a20:	58 ab       	std	Y+48, r21	; 0x30
     a22:	4f a7       	std	Y+47, r20	; 0x2f
	Gui gui = initGui(&genL, &genR, &display);
     a24:	1a aa       	std	Y+50, r1	; 0x32
     a26:	19 aa       	std	Y+49, r1	; 0x31
     a28:	1c aa       	std	Y+52, r1	; 0x34
     a2a:	1b aa       	std	Y+51, r1	; 0x33
     a2c:	9e ab       	std	Y+54, r25	; 0x36
     a2e:	8d ab       	std	Y+53, r24	; 0x35
     a30:	ce 01       	movw	r24, r28
     a32:	41 96       	adiw	r24, 0x11	; 17
     a34:	98 af       	std	Y+56, r25	; 0x38
     a36:	8f ab       	std	Y+55, r24	; 0x37
     a38:	40 96       	adiw	r24, 0x10	; 16
     a3a:	9a af       	std	Y+58, r25	; 0x3a
     a3c:	89 af       	std	Y+57, r24	; 0x39
     a3e:	3c af       	std	Y+60, r19	; 0x3c
     a40:	2b af       	std	Y+59, r18	; 0x3b
	Joystick joy = initJoystick(&gui);
     a42:	fe 01       	movw	r30, r28
     a44:	fd 96       	adiw	r30, 0x3d	; 61
     a46:	89 e0       	ldi	r24, 0x09	; 9
     a48:	df 01       	movw	r26, r30
     a4a:	1d 92       	st	X+, r1
     a4c:	8a 95       	dec	r24
     a4e:	e9 f7       	brne	.-6      	; 0xa4a <main+0xbc>
     a50:	7e 01       	movw	r14, r28
     a52:	b1 e3       	ldi	r27, 0x31	; 49
     a54:	eb 0e       	add	r14, r27
     a56:	f1 1c       	adc	r15, r1
     a58:	23 96       	adiw	r28, 0x03	; 3
     a5a:	ff ae       	std	Y+63, r15	; 0x3f
     a5c:	ee ae       	std	Y+62, r14	; 0x3e
     a5e:	23 97       	sbiw	r28, 0x03	; 3
	InteruptHandler inter = initInteruptHandler(&joy);
     a60:	8e 01       	movw	r16, r28
     a62:	0a 5b       	subi	r16, 0xBA	; 186
     a64:	1f 4f       	sbci	r17, 0xFF	; 255
     a66:	88 e0       	ldi	r24, 0x08	; 8
     a68:	d8 01       	movw	r26, r16
     a6a:	1d 92       	st	X+, r1
     a6c:	8a 95       	dec	r24
     a6e:	e9 f7       	brne	.-6      	; 0xa6a <main+0xdc>
     a70:	d8 01       	movw	r26, r16
     a72:	15 96       	adiw	r26, 0x05	; 5
     a74:	fc 93       	st	X, r31
     a76:	ee 93       	st	-X, r30
     a78:	14 97       	sbiw	r26, 0x04	; 4
	INSTALL(&inter, FreqChange, IRQ_PCINT1);
     a7a:	42 e0       	ldi	r20, 0x02	; 2
     a7c:	61 ed       	ldi	r22, 0xD1	; 209
     a7e:	72 e0       	ldi	r23, 0x02	; 2
     a80:	c8 01       	movw	r24, r16
     a82:	0e 94 fd 11 	call	0x23fa	; 0x23fa <install>
	INSTALL(&inter, genSwitch, IRQ_PCINT0);
     a86:	41 e0       	ldi	r20, 0x01	; 1
     a88:	61 ef       	ldi	r22, 0xF1	; 241
     a8a:	72 e0       	ldi	r23, 0x02	; 2
     a8c:	c8 01       	movw	r24, r16
     a8e:	0e 94 fd 11 	call	0x23fa	; 0x23fa <install>
	return tinytimber(&gui, start, NULL);
     a92:	40 e0       	ldi	r20, 0x00	; 0
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	6e e7       	ldi	r22, 0x7E	; 126
     a98:	72 e0       	ldi	r23, 0x02	; 2
     a9a:	c7 01       	movw	r24, r14
     a9c:	0e 94 18 12 	call	0x2430	; 0x2430 <tinytimber>
	//return tinytimber(NULL,NULL,NULL);		
     aa0:	c3 5b       	subi	r28, 0xB3	; 179
     aa2:	df 4f       	sbci	r29, 0xFF	; 255
     aa4:	0f b6       	in	r0, 0x3f	; 63
     aa6:	f8 94       	cli
     aa8:	de bf       	out	0x3e, r29	; 62
     aaa:	0f be       	out	0x3f, r0	; 63
     aac:	cd bf       	out	0x3d, r28	; 61
     aae:	df 91       	pop	r29
     ab0:	cf 91       	pop	r28
     ab2:	1f 91       	pop	r17
     ab4:	0f 91       	pop	r16
     ab6:	ff 90       	pop	r15
     ab8:	ef 90       	pop	r14
     aba:	08 95       	ret

00000abc <remove>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     abc:	db 01       	movw	r26, r22
     abe:	ed 91       	ld	r30, X+
     ac0:	fc 91       	ld	r31, X
     ac2:	a0 e0       	ldi	r26, 0x00	; 0
     ac4:	b0 e0       	ldi	r27, 0x00	; 0
     ac6:	04 c0       	rjmp	.+8      	; 0xad0 <remove+0x14>
     ac8:	df 01       	movw	r26, r30
     aca:	01 90       	ld	r0, Z+
     acc:	f0 81       	ld	r31, Z
     ace:	e0 2d       	mov	r30, r0
     ad0:	30 97       	sbiw	r30, 0x00	; 0
     ad2:	19 f0       	breq	.+6      	; 0xada <remove+0x1e>
     ad4:	e8 17       	cp	r30, r24
     ad6:	f9 07       	cpc	r31, r25
     ad8:	b9 f7       	brne	.-18     	; 0xac8 <remove+0xc>
     ada:	30 97       	sbiw	r30, 0x00	; 0
     adc:	89 f0       	breq	.+34     	; 0xb00 <remove+0x44>
     ade:	10 97       	sbiw	r26, 0x00	; 0
     ae0:	39 f0       	breq	.+14     	; 0xaf0 <remove+0x34>
     ae2:	80 81       	ld	r24, Z
     ae4:	91 81       	ldd	r25, Z+1	; 0x01
     ae6:	8d 93       	st	X+, r24
     ae8:	9c 93       	st	X, r25
     aea:	81 e0       	ldi	r24, 0x01	; 1
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	08 95       	ret
     af0:	80 81       	ld	r24, Z
     af2:	91 81       	ldd	r25, Z+1	; 0x01
     af4:	fb 01       	movw	r30, r22
     af6:	91 83       	std	Z+1, r25	; 0x01
     af8:	80 83       	st	Z, r24
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	08 95       	ret
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	08 95       	ret

00000b06 <initialize>:
     b06:	cf 93       	push	r28
     b08:	df 93       	push	r29
     b0a:	00 d0       	rcall	.+0      	; 0xb0c <initialize+0x6>
     b0c:	00 d0       	rcall	.+0      	; 0xb0e <initialize+0x8>
     b0e:	cd b7       	in	r28, 0x3d	; 61
     b10:	de b7       	in	r29, 0x3e	; 62
     b12:	80 e0       	ldi	r24, 0x00	; 0
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	18 c0       	rjmp	.+48     	; 0xb48 <initialize+0x42>
     b18:	ac 01       	movw	r20, r24
     b1a:	4f 5f       	subi	r20, 0xFF	; 255
     b1c:	5f 4f       	sbci	r21, 0xFF	; 255
     b1e:	9a 01       	movw	r18, r20
     b20:	22 95       	swap	r18
     b22:	32 95       	swap	r19
     b24:	30 7f       	andi	r19, 0xF0	; 240
     b26:	32 27       	eor	r19, r18
     b28:	20 7f       	andi	r18, 0xF0	; 240
     b2a:	32 27       	eor	r19, r18
     b2c:	29 5e       	subi	r18, 0xE9	; 233
     b2e:	3d 4f       	sbci	r19, 0xFD	; 253
     b30:	82 95       	swap	r24
     b32:	92 95       	swap	r25
     b34:	90 7f       	andi	r25, 0xF0	; 240
     b36:	98 27       	eor	r25, r24
     b38:	80 7f       	andi	r24, 0xF0	; 240
     b3a:	98 27       	eor	r25, r24
     b3c:	fc 01       	movw	r30, r24
     b3e:	e9 5e       	subi	r30, 0xE9	; 233
     b40:	fd 4f       	sbci	r31, 0xFD	; 253
     b42:	31 83       	std	Z+1, r19	; 0x01
     b44:	20 83       	st	Z, r18
     b46:	ca 01       	movw	r24, r20
     b48:	8e 30       	cpi	r24, 0x0E	; 14
     b4a:	91 05       	cpc	r25, r1
     b4c:	2c f3       	brlt	.-54     	; 0xb18 <initialize+0x12>
     b4e:	10 92 f8 02 	sts	0x02F8, r1	; 0x8002f8 <messages+0xe1>
     b52:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <messages+0xe0>
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	15 c0       	rjmp	.+42     	; 0xb86 <initialize+0x80>
     b5c:	ac 01       	movw	r20, r24
     b5e:	4f 5f       	subi	r20, 0xFF	; 255
     b60:	5f 4f       	sbci	r21, 0xFF	; 255
     b62:	6d e1       	ldi	r22, 0x1D	; 29
     b64:	64 9f       	mul	r22, r20
     b66:	90 01       	movw	r18, r0
     b68:	65 9f       	mul	r22, r21
     b6a:	30 0d       	add	r19, r0
     b6c:	11 24       	eor	r1, r1
     b6e:	2e 59       	subi	r18, 0x9E	; 158
     b70:	3e 4f       	sbci	r19, 0xFE	; 254
     b72:	68 9f       	mul	r22, r24
     b74:	f0 01       	movw	r30, r0
     b76:	69 9f       	mul	r22, r25
     b78:	f0 0d       	add	r31, r0
     b7a:	11 24       	eor	r1, r1
     b7c:	ee 59       	subi	r30, 0x9E	; 158
     b7e:	fe 4f       	sbci	r31, 0xFE	; 254
     b80:	31 83       	std	Z+1, r19	; 0x01
     b82:	20 83       	st	Z, r18
     b84:	ca 01       	movw	r24, r20
     b86:	83 30       	cpi	r24, 0x03	; 3
     b88:	91 05       	cpc	r25, r1
     b8a:	44 f3       	brlt	.-48     	; 0xb5c <initialize+0x56>
     b8c:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <threads+0x58>
     b90:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <threads+0x57>
     b94:	1a 82       	std	Y+2, r1	; 0x02
     b96:	19 82       	std	Y+1, r1	; 0x01
     b98:	32 c0       	rjmp	.+100    	; 0xbfe <initialize+0xf8>
     b9a:	2d e1       	ldi	r18, 0x1D	; 29
     b9c:	49 81       	ldd	r20, Y+1	; 0x01
     b9e:	5a 81       	ldd	r21, Y+2	; 0x02
     ba0:	24 9f       	mul	r18, r20
     ba2:	c0 01       	movw	r24, r0
     ba4:	25 9f       	mul	r18, r21
     ba6:	90 0d       	add	r25, r0
     ba8:	11 24       	eor	r1, r1
     baa:	fc 01       	movw	r30, r24
     bac:	e8 59       	subi	r30, 0x98	; 152
     bae:	fe 4f       	sbci	r31, 0xFE	; 254
     bb0:	fc 83       	std	Y+4, r31	; 0x04
     bb2:	eb 83       	std	Y+3, r30	; 0x03
     bb4:	cf 01       	movw	r24, r30
     bb6:	0e 94 6d 12 	call	0x24da	; 0x24da <setjmp>
     bba:	20 e6       	ldi	r18, 0x60	; 96
     bbc:	49 81       	ldd	r20, Y+1	; 0x01
     bbe:	5a 81       	ldd	r21, Y+2	; 0x02
     bc0:	24 9f       	mul	r18, r20
     bc2:	c0 01       	movw	r24, r0
     bc4:	25 9f       	mul	r18, r21
     bc6:	90 0d       	add	r25, r0
     bc8:	11 24       	eor	r1, r1
     bca:	8d 59       	subi	r24, 0x9D	; 157
     bcc:	9c 4f       	sbci	r25, 0xFC	; 252
     bce:	eb 81       	ldd	r30, Y+3	; 0x03
     bd0:	fc 81       	ldd	r31, Y+4	; 0x04
     bd2:	91 8b       	std	Z+17, r25	; 0x11
     bd4:	80 8b       	std	Z+16, r24	; 0x10
     bd6:	93 8b       	std	Z+19, r25	; 0x13
     bd8:	82 8b       	std	Z+18, r24	; 0x12
     bda:	8f e5       	ldi	r24, 0x5F	; 95
     bdc:	91 e1       	ldi	r25, 0x11	; 17
     bde:	96 8b       	std	Z+22, r25	; 0x16
     be0:	85 8b       	std	Z+21, r24	; 0x15
     be2:	8d e1       	ldi	r24, 0x1D	; 29
     be4:	84 9f       	mul	r24, r20
     be6:	f0 01       	movw	r30, r0
     be8:	85 9f       	mul	r24, r21
     bea:	f0 0d       	add	r31, r0
     bec:	11 24       	eor	r1, r1
     bee:	ee 59       	subi	r30, 0x9E	; 158
     bf0:	fe 4f       	sbci	r31, 0xFE	; 254
     bf2:	15 82       	std	Z+5, r1	; 0x05
     bf4:	14 82       	std	Z+4, r1	; 0x04
     bf6:	4f 5f       	subi	r20, 0xFF	; 255
     bf8:	5f 4f       	sbci	r21, 0xFF	; 255
     bfa:	5a 83       	std	Y+2, r21	; 0x02
     bfc:	49 83       	std	Y+1, r20	; 0x01
     bfe:	29 81       	ldd	r18, Y+1	; 0x01
     c00:	3a 81       	ldd	r19, Y+2	; 0x02
     c02:	24 30       	cpi	r18, 0x04	; 4
     c04:	31 05       	cpc	r19, r1
     c06:	4c f2       	brlt	.-110    	; 0xb9a <initialize+0x94>
     c08:	ea ef       	ldi	r30, 0xFA	; 250
     c0a:	f1 e0       	ldi	r31, 0x01	; 1
     c0c:	11 82       	std	Z+1, r1	; 0x01
     c0e:	10 82       	st	Z, r1
     c10:	15 82       	std	Z+5, r1	; 0x05
     c12:	14 82       	std	Z+4, r1	; 0x04
     c14:	13 82       	std	Z+3, r1	; 0x03
     c16:	12 82       	std	Z+2, r1	; 0x02
     c18:	e1 e6       	ldi	r30, 0x61	; 97
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 e8       	ldi	r24, 0x80	; 128
     c1e:	80 83       	st	Z, r24
     c20:	10 82       	st	Z, r1
     c22:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c26:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     c2a:	84 e0       	ldi	r24, 0x04	; 4
     c2c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
     c36:	0f 90       	pop	r0
     c38:	0f 90       	pop	r0
     c3a:	0f 90       	pop	r0
     c3c:	0f 90       	pop	r0
     c3e:	df 91       	pop	r29
     c40:	cf 91       	pop	r28
     c42:	08 95       	ret

00000c44 <dispatch>:
     c44:	cf 93       	push	r28
     c46:	df 93       	push	r29
     c48:	00 d0       	rcall	.+0      	; 0xc4a <dispatch+0x6>
     c4a:	cd b7       	in	r28, 0x3d	; 61
     c4c:	de b7       	in	r29, 0x3e	; 62
     c4e:	9a 83       	std	Y+2, r25	; 0x02
     c50:	89 83       	std	Y+1, r24	; 0x01
     c52:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     c56:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     c5a:	06 96       	adiw	r24, 0x06	; 6
     c5c:	0e 94 6d 12 	call	0x24da	; 0x24da <setjmp>
     c60:	89 2b       	or	r24, r25
     c62:	59 f4       	brne	.+22     	; 0xc7a <dispatch+0x36>
     c64:	89 81       	ldd	r24, Y+1	; 0x01
     c66:	9a 81       	ldd	r25, Y+2	; 0x02
     c68:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     c6c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     c70:	61 e0       	ldi	r22, 0x01	; 1
     c72:	70 e0       	ldi	r23, 0x00	; 0
     c74:	06 96       	adiw	r24, 0x06	; 6
     c76:	0e 94 8d 12 	call	0x251a	; 0x251a <longjmp>
     c7a:	0f 90       	pop	r0
     c7c:	0f 90       	pop	r0
     c7e:	df 91       	pop	r29
     c80:	cf 91       	pop	r28
     c82:	08 95       	ret

00000c84 <enqueueByDeadline>:
     c84:	0f 93       	push	r16
     c86:	1f 93       	push	r17
     c88:	cf 93       	push	r28
     c8a:	df 93       	push	r29
     c8c:	dc 01       	movw	r26, r24
     c8e:	cb 01       	movw	r24, r22
     c90:	eb 01       	movw	r28, r22
     c92:	e8 81       	ld	r30, Y
     c94:	f9 81       	ldd	r31, Y+1	; 0x01
     c96:	c0 e0       	ldi	r28, 0x00	; 0
     c98:	d0 e0       	ldi	r29, 0x00	; 0
     c9a:	04 c0       	rjmp	.+8      	; 0xca4 <enqueueByDeadline+0x20>
     c9c:	ef 01       	movw	r28, r30
     c9e:	01 90       	ld	r0, Z+
     ca0:	f0 81       	ld	r31, Z
     ca2:	e0 2d       	mov	r30, r0
     ca4:	30 97       	sbiw	r30, 0x00	; 0
     ca6:	79 f0       	breq	.+30     	; 0xcc6 <enqueueByDeadline+0x42>
     ca8:	06 81       	ldd	r16, Z+6	; 0x06
     caa:	17 81       	ldd	r17, Z+7	; 0x07
     cac:	20 85       	ldd	r18, Z+8	; 0x08
     cae:	31 85       	ldd	r19, Z+9	; 0x09
     cb0:	16 96       	adiw	r26, 0x06	; 6
     cb2:	4d 91       	ld	r20, X+
     cb4:	5d 91       	ld	r21, X+
     cb6:	6d 91       	ld	r22, X+
     cb8:	7c 91       	ld	r23, X
     cba:	19 97       	sbiw	r26, 0x09	; 9
     cbc:	40 17       	cp	r20, r16
     cbe:	51 07       	cpc	r21, r17
     cc0:	62 07       	cpc	r22, r18
     cc2:	73 07       	cpc	r23, r19
     cc4:	5c f7       	brge	.-42     	; 0xc9c <enqueueByDeadline+0x18>
     cc6:	11 96       	adiw	r26, 0x01	; 1
     cc8:	fc 93       	st	X, r31
     cca:	ee 93       	st	-X, r30
     ccc:	20 97       	sbiw	r28, 0x00	; 0
     cce:	21 f4       	brne	.+8      	; 0xcd8 <enqueueByDeadline+0x54>
     cd0:	fc 01       	movw	r30, r24
     cd2:	b1 83       	std	Z+1, r27	; 0x01
     cd4:	a0 83       	st	Z, r26
     cd6:	02 c0       	rjmp	.+4      	; 0xcdc <enqueueByDeadline+0x58>
     cd8:	b9 83       	std	Y+1, r27	; 0x01
     cda:	a8 83       	st	Y, r26
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	08 95       	ret

00000ce6 <enqueueByBaseline>:
     ce6:	0f 93       	push	r16
     ce8:	1f 93       	push	r17
     cea:	cf 93       	push	r28
     cec:	df 93       	push	r29
     cee:	dc 01       	movw	r26, r24
     cf0:	cb 01       	movw	r24, r22
     cf2:	eb 01       	movw	r28, r22
     cf4:	e8 81       	ld	r30, Y
     cf6:	f9 81       	ldd	r31, Y+1	; 0x01
     cf8:	c0 e0       	ldi	r28, 0x00	; 0
     cfa:	d0 e0       	ldi	r29, 0x00	; 0
     cfc:	04 c0       	rjmp	.+8      	; 0xd06 <enqueueByBaseline+0x20>
     cfe:	ef 01       	movw	r28, r30
     d00:	01 90       	ld	r0, Z+
     d02:	f0 81       	ld	r31, Z
     d04:	e0 2d       	mov	r30, r0
     d06:	30 97       	sbiw	r30, 0x00	; 0
     d08:	79 f0       	breq	.+30     	; 0xd28 <enqueueByBaseline+0x42>
     d0a:	02 81       	ldd	r16, Z+2	; 0x02
     d0c:	13 81       	ldd	r17, Z+3	; 0x03
     d0e:	24 81       	ldd	r18, Z+4	; 0x04
     d10:	35 81       	ldd	r19, Z+5	; 0x05
     d12:	12 96       	adiw	r26, 0x02	; 2
     d14:	4d 91       	ld	r20, X+
     d16:	5d 91       	ld	r21, X+
     d18:	6d 91       	ld	r22, X+
     d1a:	7c 91       	ld	r23, X
     d1c:	15 97       	sbiw	r26, 0x05	; 5
     d1e:	40 17       	cp	r20, r16
     d20:	51 07       	cpc	r21, r17
     d22:	62 07       	cpc	r22, r18
     d24:	73 07       	cpc	r23, r19
     d26:	5c f7       	brge	.-42     	; 0xcfe <enqueueByBaseline+0x18>
     d28:	11 96       	adiw	r26, 0x01	; 1
     d2a:	fc 93       	st	X, r31
     d2c:	ee 93       	st	-X, r30
     d2e:	20 97       	sbiw	r28, 0x00	; 0
     d30:	21 f4       	brne	.+8      	; 0xd3a <enqueueByBaseline+0x54>
     d32:	fc 01       	movw	r30, r24
     d34:	b1 83       	std	Z+1, r27	; 0x01
     d36:	a0 83       	st	Z, r26
     d38:	02 c0       	rjmp	.+4      	; 0xd3e <enqueueByBaseline+0x58>
     d3a:	b9 83       	std	Y+1, r27	; 0x01
     d3c:	a8 83       	st	Y, r26
     d3e:	df 91       	pop	r29
     d40:	cf 91       	pop	r28
     d42:	1f 91       	pop	r17
     d44:	0f 91       	pop	r16
     d46:	08 95       	ret

00000d48 <dequeue>:
     d48:	dc 01       	movw	r26, r24
     d4a:	ed 91       	ld	r30, X+
     d4c:	fc 91       	ld	r31, X
     d4e:	11 97       	sbiw	r26, 0x01	; 1
     d50:	30 97       	sbiw	r30, 0x00	; 0
     d52:	59 f4       	brne	.+22     	; 0xd6a <dequeue+0x22>
     d54:	8f ef       	ldi	r24, 0xFF	; 255
     d56:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     d5a:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
     d5e:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	83 bf       	out	0x33, r24	; 51
     d66:	88 95       	sleep
     d68:	fc cf       	rjmp	.-8      	; 0xd62 <dequeue+0x1a>
     d6a:	20 81       	ld	r18, Z
     d6c:	31 81       	ldd	r19, Z+1	; 0x01
     d6e:	2d 93       	st	X+, r18
     d70:	3c 93       	st	X, r19
     d72:	cf 01       	movw	r24, r30
     d74:	08 95       	ret

00000d76 <insert>:
     d76:	fb 01       	movw	r30, r22
     d78:	20 81       	ld	r18, Z
     d7a:	31 81       	ldd	r19, Z+1	; 0x01
     d7c:	fc 01       	movw	r30, r24
     d7e:	31 83       	std	Z+1, r19	; 0x01
     d80:	20 83       	st	Z, r18
     d82:	fb 01       	movw	r30, r22
     d84:	91 83       	std	Z+1, r25	; 0x01
     d86:	80 83       	st	Z, r24
     d88:	08 95       	ret

00000d8a <push>:
     d8a:	fb 01       	movw	r30, r22
     d8c:	20 81       	ld	r18, Z
     d8e:	31 81       	ldd	r19, Z+1	; 0x01
     d90:	fc 01       	movw	r30, r24
     d92:	31 83       	std	Z+1, r19	; 0x01
     d94:	20 83       	st	Z, r18
     d96:	fb 01       	movw	r30, r22
     d98:	91 83       	std	Z+1, r25	; 0x01
     d9a:	80 83       	st	Z, r24
     d9c:	08 95       	ret

00000d9e <pop>:
     d9e:	dc 01       	movw	r26, r24
     da0:	ed 91       	ld	r30, X+
     da2:	fc 91       	ld	r31, X
     da4:	11 97       	sbiw	r26, 0x01	; 1
     da6:	20 81       	ld	r18, Z
     da8:	31 81       	ldd	r19, Z+1	; 0x01
     daa:	2d 93       	st	X+, r18
     dac:	3c 93       	st	X, r19
     dae:	cf 01       	movw	r24, r30
     db0:	08 95       	ret

00000db2 <schedule>:
     db2:	cf 93       	push	r28
     db4:	df 93       	push	r29
     db6:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
     dba:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
     dbe:	c2 81       	ldd	r28, Z+2	; 0x02
     dc0:	d3 81       	ldd	r29, Z+3	; 0x03
     dc2:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <msgQ>
     dc6:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <msgQ+0x1>
     dca:	30 97       	sbiw	r30, 0x00	; 0
     dcc:	19 f1       	breq	.+70     	; 0xe14 <schedule+0x62>
     dce:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
     dd2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
     dd6:	89 2b       	or	r24, r25
     dd8:	e9 f0       	breq	.+58     	; 0xe14 <schedule+0x62>
     dda:	20 97       	sbiw	r28, 0x00	; 0
     ddc:	69 f0       	breq	.+26     	; 0xdf8 <schedule+0x46>
     dde:	86 81       	ldd	r24, Z+6	; 0x06
     de0:	97 81       	ldd	r25, Z+7	; 0x07
     de2:	a0 85       	ldd	r26, Z+8	; 0x08
     de4:	b1 85       	ldd	r27, Z+9	; 0x09
     de6:	4e 81       	ldd	r20, Y+6	; 0x06
     de8:	5f 81       	ldd	r21, Y+7	; 0x07
     dea:	68 85       	ldd	r22, Y+8	; 0x08
     dec:	79 85       	ldd	r23, Y+9	; 0x09
     dee:	84 1b       	sub	r24, r20
     df0:	95 0b       	sbc	r25, r21
     df2:	a6 0b       	sbc	r26, r22
     df4:	b7 0b       	sbc	r27, r23
     df6:	72 f4       	brpl	.+28     	; 0xe14 <schedule+0x62>
     df8:	84 e0       	ldi	r24, 0x04	; 4
     dfa:	91 e0       	ldi	r25, 0x01	; 1
     dfc:	0e 94 cf 06 	call	0xd9e	; 0xd9e <pop>
     e00:	62 e0       	ldi	r22, 0x02	; 2
     e02:	71 e0       	ldi	r23, 0x01	; 1
     e04:	0e 94 c5 06 	call	0xd8a	; 0xd8a <push>
     e08:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <activeStack>
     e0c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <activeStack+0x1>
     e10:	0e 94 22 06 	call	0xc44	; 0xc44 <dispatch>
     e14:	df 91       	pop	r29
     e16:	cf 91       	pop	r28
     e18:	08 95       	ret

00000e1a <__vector_1>:
     e1a:	1f 92       	push	r1
     e1c:	0f 92       	push	r0
     e1e:	0f b6       	in	r0, 0x3f	; 63
     e20:	0f 92       	push	r0
     e22:	11 24       	eor	r1, r1
     e24:	0f 93       	push	r16
     e26:	1f 93       	push	r17
     e28:	2f 93       	push	r18
     e2a:	3f 93       	push	r19
     e2c:	4f 93       	push	r20
     e2e:	5f 93       	push	r21
     e30:	6f 93       	push	r22
     e32:	7f 93       	push	r23
     e34:	8f 93       	push	r24
     e36:	9f 93       	push	r25
     e38:	af 93       	push	r26
     e3a:	bf 93       	push	r27
     e3c:	ef 93       	push	r30
     e3e:	ff 93       	push	r31
     e40:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
     e44:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <__data_end+0x1>
     e48:	ac 01       	movw	r20, r24
     e4a:	09 2e       	mov	r0, r25
     e4c:	00 0c       	add	r0, r0
     e4e:	66 0b       	sbc	r22, r22
     e50:	77 0b       	sbc	r23, r23
     e52:	9a 01       	movw	r18, r20
     e54:	11 27       	eor	r17, r17
     e56:	00 27       	eor	r16, r16
     e58:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e5c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e60:	60 e0       	ldi	r22, 0x00	; 0
     e62:	70 e0       	ldi	r23, 0x00	; 0
     e64:	40 2b       	or	r20, r16
     e66:	51 2b       	or	r21, r17
     e68:	62 2b       	or	r22, r18
     e6a:	73 2b       	or	r23, r19
     e6c:	40 93 36 01 	sts	0x0136, r20	; 0x800136 <timestamp>
     e70:	50 93 37 01 	sts	0x0137, r21	; 0x800137 <timestamp+0x1>
     e74:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <timestamp+0x2>
     e78:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <timestamp+0x3>
     e7c:	b0 9b       	sbis	0x16, 0	; 22
     e7e:	1a c0       	rjmp	.+52     	; 0xeb4 <__vector_1+0x9a>
     e80:	01 96       	adiw	r24, 0x01	; 1
     e82:	09 2e       	mov	r0, r25
     e84:	00 0c       	add	r0, r0
     e86:	aa 0b       	sbc	r26, r26
     e88:	bb 0b       	sbc	r27, r27
     e8a:	bc 01       	movw	r22, r24
     e8c:	55 27       	eor	r21, r21
     e8e:	44 27       	eor	r20, r20
     e90:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e94:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e98:	a0 e0       	ldi	r26, 0x00	; 0
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	84 2b       	or	r24, r20
     e9e:	95 2b       	or	r25, r21
     ea0:	a6 2b       	or	r26, r22
     ea2:	b7 2b       	or	r27, r23
     ea4:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
     ea8:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
     eac:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
     eb0:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
     eb4:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <mtable>
     eb8:	f0 91 d7 01 	lds	r31, 0x01D7	; 0x8001d7 <mtable+0x1>
     ebc:	30 97       	sbiw	r30, 0x00	; 0
     ebe:	39 f0       	breq	.+14     	; 0xece <__vector_1+0xb4>
     ec0:	60 e0       	ldi	r22, 0x00	; 0
     ec2:	70 e0       	ldi	r23, 0x00	; 0
     ec4:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <otable>
     ec8:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <otable+0x1>
     ecc:	09 95       	icall
     ece:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <schedule>
     ed2:	ff 91       	pop	r31
     ed4:	ef 91       	pop	r30
     ed6:	bf 91       	pop	r27
     ed8:	af 91       	pop	r26
     eda:	9f 91       	pop	r25
     edc:	8f 91       	pop	r24
     ede:	7f 91       	pop	r23
     ee0:	6f 91       	pop	r22
     ee2:	5f 91       	pop	r21
     ee4:	4f 91       	pop	r20
     ee6:	3f 91       	pop	r19
     ee8:	2f 91       	pop	r18
     eea:	1f 91       	pop	r17
     eec:	0f 91       	pop	r16
     eee:	0f 90       	pop	r0
     ef0:	0f be       	out	0x3f, r0	; 63
     ef2:	0f 90       	pop	r0
     ef4:	1f 90       	pop	r1
     ef6:	18 95       	reti

00000ef8 <__vector_2>:
     ef8:	1f 92       	push	r1
     efa:	0f 92       	push	r0
     efc:	0f b6       	in	r0, 0x3f	; 63
     efe:	0f 92       	push	r0
     f00:	11 24       	eor	r1, r1
     f02:	0f 93       	push	r16
     f04:	1f 93       	push	r17
     f06:	2f 93       	push	r18
     f08:	3f 93       	push	r19
     f0a:	4f 93       	push	r20
     f0c:	5f 93       	push	r21
     f0e:	6f 93       	push	r22
     f10:	7f 93       	push	r23
     f12:	8f 93       	push	r24
     f14:	9f 93       	push	r25
     f16:	af 93       	push	r26
     f18:	bf 93       	push	r27
     f1a:	ef 93       	push	r30
     f1c:	ff 93       	push	r31
     f1e:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
     f22:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <__data_end+0x1>
     f26:	ac 01       	movw	r20, r24
     f28:	09 2e       	mov	r0, r25
     f2a:	00 0c       	add	r0, r0
     f2c:	66 0b       	sbc	r22, r22
     f2e:	77 0b       	sbc	r23, r23
     f30:	9a 01       	movw	r18, r20
     f32:	11 27       	eor	r17, r17
     f34:	00 27       	eor	r16, r16
     f36:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f3a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f3e:	60 e0       	ldi	r22, 0x00	; 0
     f40:	70 e0       	ldi	r23, 0x00	; 0
     f42:	40 2b       	or	r20, r16
     f44:	51 2b       	or	r21, r17
     f46:	62 2b       	or	r22, r18
     f48:	73 2b       	or	r23, r19
     f4a:	40 93 36 01 	sts	0x0136, r20	; 0x800136 <timestamp>
     f4e:	50 93 37 01 	sts	0x0137, r21	; 0x800137 <timestamp+0x1>
     f52:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <timestamp+0x2>
     f56:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <timestamp+0x3>
     f5a:	b0 9b       	sbis	0x16, 0	; 22
     f5c:	1a c0       	rjmp	.+52     	; 0xf92 <__vector_2+0x9a>
     f5e:	01 96       	adiw	r24, 0x01	; 1
     f60:	09 2e       	mov	r0, r25
     f62:	00 0c       	add	r0, r0
     f64:	aa 0b       	sbc	r26, r26
     f66:	bb 0b       	sbc	r27, r27
     f68:	bc 01       	movw	r22, r24
     f6a:	55 27       	eor	r21, r21
     f6c:	44 27       	eor	r20, r20
     f6e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f72:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f76:	a0 e0       	ldi	r26, 0x00	; 0
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	84 2b       	or	r24, r20
     f7c:	95 2b       	or	r25, r21
     f7e:	a6 2b       	or	r26, r22
     f80:	b7 2b       	or	r27, r23
     f82:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
     f86:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
     f8a:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
     f8e:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
     f92:	e0 91 d8 01 	lds	r30, 0x01D8	; 0x8001d8 <mtable+0x2>
     f96:	f0 91 d9 01 	lds	r31, 0x01D9	; 0x8001d9 <mtable+0x3>
     f9a:	30 97       	sbiw	r30, 0x00	; 0
     f9c:	39 f0       	breq	.+14     	; 0xfac <__vector_2+0xb4>
     f9e:	61 e0       	ldi	r22, 0x01	; 1
     fa0:	70 e0       	ldi	r23, 0x00	; 0
     fa2:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <otable+0x2>
     fa6:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <otable+0x3>
     faa:	09 95       	icall
     fac:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <schedule>
     fb0:	ff 91       	pop	r31
     fb2:	ef 91       	pop	r30
     fb4:	bf 91       	pop	r27
     fb6:	af 91       	pop	r26
     fb8:	9f 91       	pop	r25
     fba:	8f 91       	pop	r24
     fbc:	7f 91       	pop	r23
     fbe:	6f 91       	pop	r22
     fc0:	5f 91       	pop	r21
     fc2:	4f 91       	pop	r20
     fc4:	3f 91       	pop	r19
     fc6:	2f 91       	pop	r18
     fc8:	1f 91       	pop	r17
     fca:	0f 91       	pop	r16
     fcc:	0f 90       	pop	r0
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	0f 90       	pop	r0
     fd2:	1f 90       	pop	r1
     fd4:	18 95       	reti

00000fd6 <__vector_3>:
     fd6:	1f 92       	push	r1
     fd8:	0f 92       	push	r0
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	0f 92       	push	r0
     fde:	11 24       	eor	r1, r1
     fe0:	0f 93       	push	r16
     fe2:	1f 93       	push	r17
     fe4:	2f 93       	push	r18
     fe6:	3f 93       	push	r19
     fe8:	4f 93       	push	r20
     fea:	5f 93       	push	r21
     fec:	6f 93       	push	r22
     fee:	7f 93       	push	r23
     ff0:	8f 93       	push	r24
     ff2:	9f 93       	push	r25
     ff4:	af 93       	push	r26
     ff6:	bf 93       	push	r27
     ff8:	ef 93       	push	r30
     ffa:	ff 93       	push	r31
     ffc:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
    1000:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <__data_end+0x1>
    1004:	ac 01       	movw	r20, r24
    1006:	09 2e       	mov	r0, r25
    1008:	00 0c       	add	r0, r0
    100a:	66 0b       	sbc	r22, r22
    100c:	77 0b       	sbc	r23, r23
    100e:	9a 01       	movw	r18, r20
    1010:	11 27       	eor	r17, r17
    1012:	00 27       	eor	r16, r16
    1014:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1018:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    101c:	60 e0       	ldi	r22, 0x00	; 0
    101e:	70 e0       	ldi	r23, 0x00	; 0
    1020:	40 2b       	or	r20, r16
    1022:	51 2b       	or	r21, r17
    1024:	62 2b       	or	r22, r18
    1026:	73 2b       	or	r23, r19
    1028:	40 93 36 01 	sts	0x0136, r20	; 0x800136 <timestamp>
    102c:	50 93 37 01 	sts	0x0137, r21	; 0x800137 <timestamp+0x1>
    1030:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <timestamp+0x2>
    1034:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <timestamp+0x3>
    1038:	b0 9b       	sbis	0x16, 0	; 22
    103a:	1a c0       	rjmp	.+52     	; 0x1070 <__vector_3+0x9a>
    103c:	01 96       	adiw	r24, 0x01	; 1
    103e:	09 2e       	mov	r0, r25
    1040:	00 0c       	add	r0, r0
    1042:	aa 0b       	sbc	r26, r26
    1044:	bb 0b       	sbc	r27, r27
    1046:	bc 01       	movw	r22, r24
    1048:	55 27       	eor	r21, r21
    104a:	44 27       	eor	r20, r20
    104c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1050:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1054:	a0 e0       	ldi	r26, 0x00	; 0
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	84 2b       	or	r24, r20
    105a:	95 2b       	or	r25, r21
    105c:	a6 2b       	or	r26, r22
    105e:	b7 2b       	or	r27, r23
    1060:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    1064:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    1068:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    106c:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    1070:	e0 91 da 01 	lds	r30, 0x01DA	; 0x8001da <mtable+0x4>
    1074:	f0 91 db 01 	lds	r31, 0x01DB	; 0x8001db <mtable+0x5>
    1078:	30 97       	sbiw	r30, 0x00	; 0
    107a:	39 f0       	breq	.+14     	; 0x108a <__vector_3+0xb4>
    107c:	62 e0       	ldi	r22, 0x02	; 2
    107e:	70 e0       	ldi	r23, 0x00	; 0
    1080:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <otable+0x4>
    1084:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <otable+0x5>
    1088:	09 95       	icall
    108a:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <schedule>
    108e:	ff 91       	pop	r31
    1090:	ef 91       	pop	r30
    1092:	bf 91       	pop	r27
    1094:	af 91       	pop	r26
    1096:	9f 91       	pop	r25
    1098:	8f 91       	pop	r24
    109a:	7f 91       	pop	r23
    109c:	6f 91       	pop	r22
    109e:	5f 91       	pop	r21
    10a0:	4f 91       	pop	r20
    10a2:	3f 91       	pop	r19
    10a4:	2f 91       	pop	r18
    10a6:	1f 91       	pop	r17
    10a8:	0f 91       	pop	r16
    10aa:	0f 90       	pop	r0
    10ac:	0f be       	out	0x3f, r0	; 63
    10ae:	0f 90       	pop	r0
    10b0:	1f 90       	pop	r1
    10b2:	18 95       	reti

000010b4 <__vector_4>:
    10b4:	1f 92       	push	r1
    10b6:	0f 92       	push	r0
    10b8:	0f b6       	in	r0, 0x3f	; 63
    10ba:	0f 92       	push	r0
    10bc:	11 24       	eor	r1, r1
    10be:	0f 93       	push	r16
    10c0:	1f 93       	push	r17
    10c2:	2f 93       	push	r18
    10c4:	3f 93       	push	r19
    10c6:	4f 93       	push	r20
    10c8:	5f 93       	push	r21
    10ca:	6f 93       	push	r22
    10cc:	7f 93       	push	r23
    10ce:	8f 93       	push	r24
    10d0:	9f 93       	push	r25
    10d2:	af 93       	push	r26
    10d4:	bf 93       	push	r27
    10d6:	ef 93       	push	r30
    10d8:	ff 93       	push	r31
    10da:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
    10de:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <__data_end+0x1>
    10e2:	ac 01       	movw	r20, r24
    10e4:	09 2e       	mov	r0, r25
    10e6:	00 0c       	add	r0, r0
    10e8:	66 0b       	sbc	r22, r22
    10ea:	77 0b       	sbc	r23, r23
    10ec:	9a 01       	movw	r18, r20
    10ee:	11 27       	eor	r17, r17
    10f0:	00 27       	eor	r16, r16
    10f2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    10f6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    10fa:	60 e0       	ldi	r22, 0x00	; 0
    10fc:	70 e0       	ldi	r23, 0x00	; 0
    10fe:	40 2b       	or	r20, r16
    1100:	51 2b       	or	r21, r17
    1102:	62 2b       	or	r22, r18
    1104:	73 2b       	or	r23, r19
    1106:	40 93 36 01 	sts	0x0136, r20	; 0x800136 <timestamp>
    110a:	50 93 37 01 	sts	0x0137, r21	; 0x800137 <timestamp+0x1>
    110e:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <timestamp+0x2>
    1112:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <timestamp+0x3>
    1116:	b0 9b       	sbis	0x16, 0	; 22
    1118:	1a c0       	rjmp	.+52     	; 0x114e <__vector_4+0x9a>
    111a:	01 96       	adiw	r24, 0x01	; 1
    111c:	09 2e       	mov	r0, r25
    111e:	00 0c       	add	r0, r0
    1120:	aa 0b       	sbc	r26, r26
    1122:	bb 0b       	sbc	r27, r27
    1124:	bc 01       	movw	r22, r24
    1126:	55 27       	eor	r21, r21
    1128:	44 27       	eor	r20, r20
    112a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    112e:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1132:	a0 e0       	ldi	r26, 0x00	; 0
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	84 2b       	or	r24, r20
    1138:	95 2b       	or	r25, r21
    113a:	a6 2b       	or	r26, r22
    113c:	b7 2b       	or	r27, r23
    113e:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    1142:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    1146:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    114a:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    114e:	e0 91 dc 01 	lds	r30, 0x01DC	; 0x8001dc <mtable+0x6>
    1152:	f0 91 dd 01 	lds	r31, 0x01DD	; 0x8001dd <mtable+0x7>
    1156:	30 97       	sbiw	r30, 0x00	; 0
    1158:	39 f0       	breq	.+14     	; 0x1168 <__vector_4+0xb4>
    115a:	63 e0       	ldi	r22, 0x03	; 3
    115c:	70 e0       	ldi	r23, 0x00	; 0
    115e:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <otable+0x6>
    1162:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <otable+0x7>
    1166:	09 95       	icall
    1168:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <schedule>
    116c:	ff 91       	pop	r31
    116e:	ef 91       	pop	r30
    1170:	bf 91       	pop	r27
    1172:	af 91       	pop	r26
    1174:	9f 91       	pop	r25
    1176:	8f 91       	pop	r24
    1178:	7f 91       	pop	r23
    117a:	6f 91       	pop	r22
    117c:	5f 91       	pop	r21
    117e:	4f 91       	pop	r20
    1180:	3f 91       	pop	r19
    1182:	2f 91       	pop	r18
    1184:	1f 91       	pop	r17
    1186:	0f 91       	pop	r16
    1188:	0f 90       	pop	r0
    118a:	0f be       	out	0x3f, r0	; 63
    118c:	0f 90       	pop	r0
    118e:	1f 90       	pop	r1
    1190:	18 95       	reti

00001192 <__vector_5>:
    1192:	1f 92       	push	r1
    1194:	0f 92       	push	r0
    1196:	0f b6       	in	r0, 0x3f	; 63
    1198:	0f 92       	push	r0
    119a:	11 24       	eor	r1, r1
    119c:	0f 93       	push	r16
    119e:	1f 93       	push	r17
    11a0:	2f 93       	push	r18
    11a2:	3f 93       	push	r19
    11a4:	4f 93       	push	r20
    11a6:	5f 93       	push	r21
    11a8:	6f 93       	push	r22
    11aa:	7f 93       	push	r23
    11ac:	8f 93       	push	r24
    11ae:	9f 93       	push	r25
    11b0:	af 93       	push	r26
    11b2:	bf 93       	push	r27
    11b4:	ef 93       	push	r30
    11b6:	ff 93       	push	r31
    11b8:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
    11bc:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <__data_end+0x1>
    11c0:	ac 01       	movw	r20, r24
    11c2:	09 2e       	mov	r0, r25
    11c4:	00 0c       	add	r0, r0
    11c6:	66 0b       	sbc	r22, r22
    11c8:	77 0b       	sbc	r23, r23
    11ca:	9a 01       	movw	r18, r20
    11cc:	11 27       	eor	r17, r17
    11ce:	00 27       	eor	r16, r16
    11d0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11d4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    11d8:	60 e0       	ldi	r22, 0x00	; 0
    11da:	70 e0       	ldi	r23, 0x00	; 0
    11dc:	40 2b       	or	r20, r16
    11de:	51 2b       	or	r21, r17
    11e0:	62 2b       	or	r22, r18
    11e2:	73 2b       	or	r23, r19
    11e4:	40 93 36 01 	sts	0x0136, r20	; 0x800136 <timestamp>
    11e8:	50 93 37 01 	sts	0x0137, r21	; 0x800137 <timestamp+0x1>
    11ec:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <timestamp+0x2>
    11f0:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <timestamp+0x3>
    11f4:	b0 9b       	sbis	0x16, 0	; 22
    11f6:	1a c0       	rjmp	.+52     	; 0x122c <__vector_5+0x9a>
    11f8:	01 96       	adiw	r24, 0x01	; 1
    11fa:	09 2e       	mov	r0, r25
    11fc:	00 0c       	add	r0, r0
    11fe:	aa 0b       	sbc	r26, r26
    1200:	bb 0b       	sbc	r27, r27
    1202:	bc 01       	movw	r22, r24
    1204:	55 27       	eor	r21, r21
    1206:	44 27       	eor	r20, r20
    1208:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    120c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1210:	a0 e0       	ldi	r26, 0x00	; 0
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	84 2b       	or	r24, r20
    1216:	95 2b       	or	r25, r21
    1218:	a6 2b       	or	r26, r22
    121a:	b7 2b       	or	r27, r23
    121c:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    1220:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    1224:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    1228:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    122c:	e0 91 de 01 	lds	r30, 0x01DE	; 0x8001de <mtable+0x8>
    1230:	f0 91 df 01 	lds	r31, 0x01DF	; 0x8001df <mtable+0x9>
    1234:	30 97       	sbiw	r30, 0x00	; 0
    1236:	39 f0       	breq	.+14     	; 0x1246 <__vector_5+0xb4>
    1238:	64 e0       	ldi	r22, 0x04	; 4
    123a:	70 e0       	ldi	r23, 0x00	; 0
    123c:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <otable+0x8>
    1240:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <otable+0x9>
    1244:	09 95       	icall
    1246:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <schedule>
    124a:	ff 91       	pop	r31
    124c:	ef 91       	pop	r30
    124e:	bf 91       	pop	r27
    1250:	af 91       	pop	r26
    1252:	9f 91       	pop	r25
    1254:	8f 91       	pop	r24
    1256:	7f 91       	pop	r23
    1258:	6f 91       	pop	r22
    125a:	5f 91       	pop	r21
    125c:	4f 91       	pop	r20
    125e:	3f 91       	pop	r19
    1260:	2f 91       	pop	r18
    1262:	1f 91       	pop	r17
    1264:	0f 91       	pop	r16
    1266:	0f 90       	pop	r0
    1268:	0f be       	out	0x3f, r0	; 63
    126a:	0f 90       	pop	r0
    126c:	1f 90       	pop	r1
    126e:	18 95       	reti

00001270 <__vector_10>:
    1270:	1f 92       	push	r1
    1272:	0f 92       	push	r0
    1274:	0f b6       	in	r0, 0x3f	; 63
    1276:	0f 92       	push	r0
    1278:	11 24       	eor	r1, r1
    127a:	0f 93       	push	r16
    127c:	1f 93       	push	r17
    127e:	2f 93       	push	r18
    1280:	3f 93       	push	r19
    1282:	4f 93       	push	r20
    1284:	5f 93       	push	r21
    1286:	6f 93       	push	r22
    1288:	7f 93       	push	r23
    128a:	8f 93       	push	r24
    128c:	9f 93       	push	r25
    128e:	af 93       	push	r26
    1290:	bf 93       	push	r27
    1292:	ef 93       	push	r30
    1294:	ff 93       	push	r31
    1296:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
    129a:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <__data_end+0x1>
    129e:	ac 01       	movw	r20, r24
    12a0:	09 2e       	mov	r0, r25
    12a2:	00 0c       	add	r0, r0
    12a4:	66 0b       	sbc	r22, r22
    12a6:	77 0b       	sbc	r23, r23
    12a8:	9a 01       	movw	r18, r20
    12aa:	11 27       	eor	r17, r17
    12ac:	00 27       	eor	r16, r16
    12ae:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12b2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12b6:	60 e0       	ldi	r22, 0x00	; 0
    12b8:	70 e0       	ldi	r23, 0x00	; 0
    12ba:	40 2b       	or	r20, r16
    12bc:	51 2b       	or	r21, r17
    12be:	62 2b       	or	r22, r18
    12c0:	73 2b       	or	r23, r19
    12c2:	40 93 36 01 	sts	0x0136, r20	; 0x800136 <timestamp>
    12c6:	50 93 37 01 	sts	0x0137, r21	; 0x800137 <timestamp+0x1>
    12ca:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <timestamp+0x2>
    12ce:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <timestamp+0x3>
    12d2:	b0 9b       	sbis	0x16, 0	; 22
    12d4:	1a c0       	rjmp	.+52     	; 0x130a <__vector_10+0x9a>
    12d6:	01 96       	adiw	r24, 0x01	; 1
    12d8:	09 2e       	mov	r0, r25
    12da:	00 0c       	add	r0, r0
    12dc:	aa 0b       	sbc	r26, r26
    12de:	bb 0b       	sbc	r27, r27
    12e0:	bc 01       	movw	r22, r24
    12e2:	55 27       	eor	r21, r21
    12e4:	44 27       	eor	r20, r20
    12e6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12ea:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12ee:	a0 e0       	ldi	r26, 0x00	; 0
    12f0:	b0 e0       	ldi	r27, 0x00	; 0
    12f2:	84 2b       	or	r24, r20
    12f4:	95 2b       	or	r25, r21
    12f6:	a6 2b       	or	r26, r22
    12f8:	b7 2b       	or	r27, r23
    12fa:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    12fe:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    1302:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    1306:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    130a:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <mtable+0xa>
    130e:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <mtable+0xb>
    1312:	30 97       	sbiw	r30, 0x00	; 0
    1314:	39 f0       	breq	.+14     	; 0x1324 <__vector_10+0xb4>
    1316:	65 e0       	ldi	r22, 0x05	; 5
    1318:	70 e0       	ldi	r23, 0x00	; 0
    131a:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <otable+0xa>
    131e:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <otable+0xb>
    1322:	09 95       	icall
    1324:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <schedule>
    1328:	ff 91       	pop	r31
    132a:	ef 91       	pop	r30
    132c:	bf 91       	pop	r27
    132e:	af 91       	pop	r26
    1330:	9f 91       	pop	r25
    1332:	8f 91       	pop	r24
    1334:	7f 91       	pop	r23
    1336:	6f 91       	pop	r22
    1338:	5f 91       	pop	r21
    133a:	4f 91       	pop	r20
    133c:	3f 91       	pop	r19
    133e:	2f 91       	pop	r18
    1340:	1f 91       	pop	r17
    1342:	0f 91       	pop	r16
    1344:	0f 90       	pop	r0
    1346:	0f be       	out	0x3f, r0	; 63
    1348:	0f 90       	pop	r0
    134a:	1f 90       	pop	r1
    134c:	18 95       	reti

0000134e <__vector_11>:
    134e:	1f 92       	push	r1
    1350:	0f 92       	push	r0
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	0f 92       	push	r0
    1356:	11 24       	eor	r1, r1
    1358:	0f 93       	push	r16
    135a:	1f 93       	push	r17
    135c:	2f 93       	push	r18
    135e:	3f 93       	push	r19
    1360:	4f 93       	push	r20
    1362:	5f 93       	push	r21
    1364:	6f 93       	push	r22
    1366:	7f 93       	push	r23
    1368:	8f 93       	push	r24
    136a:	9f 93       	push	r25
    136c:	af 93       	push	r26
    136e:	bf 93       	push	r27
    1370:	ef 93       	push	r30
    1372:	ff 93       	push	r31
    1374:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
    1378:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <__data_end+0x1>
    137c:	ac 01       	movw	r20, r24
    137e:	09 2e       	mov	r0, r25
    1380:	00 0c       	add	r0, r0
    1382:	66 0b       	sbc	r22, r22
    1384:	77 0b       	sbc	r23, r23
    1386:	9a 01       	movw	r18, r20
    1388:	11 27       	eor	r17, r17
    138a:	00 27       	eor	r16, r16
    138c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1390:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1394:	60 e0       	ldi	r22, 0x00	; 0
    1396:	70 e0       	ldi	r23, 0x00	; 0
    1398:	40 2b       	or	r20, r16
    139a:	51 2b       	or	r21, r17
    139c:	62 2b       	or	r22, r18
    139e:	73 2b       	or	r23, r19
    13a0:	40 93 36 01 	sts	0x0136, r20	; 0x800136 <timestamp>
    13a4:	50 93 37 01 	sts	0x0137, r21	; 0x800137 <timestamp+0x1>
    13a8:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <timestamp+0x2>
    13ac:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <timestamp+0x3>
    13b0:	b0 9b       	sbis	0x16, 0	; 22
    13b2:	1a c0       	rjmp	.+52     	; 0x13e8 <__vector_11+0x9a>
    13b4:	01 96       	adiw	r24, 0x01	; 1
    13b6:	09 2e       	mov	r0, r25
    13b8:	00 0c       	add	r0, r0
    13ba:	aa 0b       	sbc	r26, r26
    13bc:	bb 0b       	sbc	r27, r27
    13be:	bc 01       	movw	r22, r24
    13c0:	55 27       	eor	r21, r21
    13c2:	44 27       	eor	r20, r20
    13c4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13c8:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    13cc:	a0 e0       	ldi	r26, 0x00	; 0
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	84 2b       	or	r24, r20
    13d2:	95 2b       	or	r25, r21
    13d4:	a6 2b       	or	r26, r22
    13d6:	b7 2b       	or	r27, r23
    13d8:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    13dc:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    13e0:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    13e4:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    13e8:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <mtable+0xc>
    13ec:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <mtable+0xd>
    13f0:	30 97       	sbiw	r30, 0x00	; 0
    13f2:	39 f0       	breq	.+14     	; 0x1402 <__vector_11+0xb4>
    13f4:	66 e0       	ldi	r22, 0x06	; 6
    13f6:	70 e0       	ldi	r23, 0x00	; 0
    13f8:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <otable+0xc>
    13fc:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <otable+0xd>
    1400:	09 95       	icall
    1402:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <schedule>
    1406:	ff 91       	pop	r31
    1408:	ef 91       	pop	r30
    140a:	bf 91       	pop	r27
    140c:	af 91       	pop	r26
    140e:	9f 91       	pop	r25
    1410:	8f 91       	pop	r24
    1412:	7f 91       	pop	r23
    1414:	6f 91       	pop	r22
    1416:	5f 91       	pop	r21
    1418:	4f 91       	pop	r20
    141a:	3f 91       	pop	r19
    141c:	2f 91       	pop	r18
    141e:	1f 91       	pop	r17
    1420:	0f 91       	pop	r16
    1422:	0f 90       	pop	r0
    1424:	0f be       	out	0x3f, r0	; 63
    1426:	0f 90       	pop	r0
    1428:	1f 90       	pop	r1
    142a:	18 95       	reti

0000142c <__vector_12>:
    142c:	1f 92       	push	r1
    142e:	0f 92       	push	r0
    1430:	0f b6       	in	r0, 0x3f	; 63
    1432:	0f 92       	push	r0
    1434:	11 24       	eor	r1, r1
    1436:	0f 93       	push	r16
    1438:	1f 93       	push	r17
    143a:	2f 93       	push	r18
    143c:	3f 93       	push	r19
    143e:	4f 93       	push	r20
    1440:	5f 93       	push	r21
    1442:	6f 93       	push	r22
    1444:	7f 93       	push	r23
    1446:	8f 93       	push	r24
    1448:	9f 93       	push	r25
    144a:	af 93       	push	r26
    144c:	bf 93       	push	r27
    144e:	ef 93       	push	r30
    1450:	ff 93       	push	r31
    1452:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
    1456:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <__data_end+0x1>
    145a:	ac 01       	movw	r20, r24
    145c:	09 2e       	mov	r0, r25
    145e:	00 0c       	add	r0, r0
    1460:	66 0b       	sbc	r22, r22
    1462:	77 0b       	sbc	r23, r23
    1464:	9a 01       	movw	r18, r20
    1466:	11 27       	eor	r17, r17
    1468:	00 27       	eor	r16, r16
    146a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    146e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1472:	60 e0       	ldi	r22, 0x00	; 0
    1474:	70 e0       	ldi	r23, 0x00	; 0
    1476:	40 2b       	or	r20, r16
    1478:	51 2b       	or	r21, r17
    147a:	62 2b       	or	r22, r18
    147c:	73 2b       	or	r23, r19
    147e:	40 93 36 01 	sts	0x0136, r20	; 0x800136 <timestamp>
    1482:	50 93 37 01 	sts	0x0137, r21	; 0x800137 <timestamp+0x1>
    1486:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <timestamp+0x2>
    148a:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <timestamp+0x3>
    148e:	b0 9b       	sbis	0x16, 0	; 22
    1490:	1a c0       	rjmp	.+52     	; 0x14c6 <__vector_12+0x9a>
    1492:	01 96       	adiw	r24, 0x01	; 1
    1494:	09 2e       	mov	r0, r25
    1496:	00 0c       	add	r0, r0
    1498:	aa 0b       	sbc	r26, r26
    149a:	bb 0b       	sbc	r27, r27
    149c:	bc 01       	movw	r22, r24
    149e:	55 27       	eor	r21, r21
    14a0:	44 27       	eor	r20, r20
    14a2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    14a6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    14aa:	a0 e0       	ldi	r26, 0x00	; 0
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	84 2b       	or	r24, r20
    14b0:	95 2b       	or	r25, r21
    14b2:	a6 2b       	or	r26, r22
    14b4:	b7 2b       	or	r27, r23
    14b6:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    14ba:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    14be:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    14c2:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    14c6:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <mtable+0xe>
    14ca:	f0 91 e5 01 	lds	r31, 0x01E5	; 0x8001e5 <mtable+0xf>
    14ce:	30 97       	sbiw	r30, 0x00	; 0
    14d0:	39 f0       	breq	.+14     	; 0x14e0 <__vector_12+0xb4>
    14d2:	67 e0       	ldi	r22, 0x07	; 7
    14d4:	70 e0       	ldi	r23, 0x00	; 0
    14d6:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <otable+0xe>
    14da:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <otable+0xf>
    14de:	09 95       	icall
    14e0:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <schedule>
    14e4:	ff 91       	pop	r31
    14e6:	ef 91       	pop	r30
    14e8:	bf 91       	pop	r27
    14ea:	af 91       	pop	r26
    14ec:	9f 91       	pop	r25
    14ee:	8f 91       	pop	r24
    14f0:	7f 91       	pop	r23
    14f2:	6f 91       	pop	r22
    14f4:	5f 91       	pop	r21
    14f6:	4f 91       	pop	r20
    14f8:	3f 91       	pop	r19
    14fa:	2f 91       	pop	r18
    14fc:	1f 91       	pop	r17
    14fe:	0f 91       	pop	r16
    1500:	0f 90       	pop	r0
    1502:	0f be       	out	0x3f, r0	; 63
    1504:	0f 90       	pop	r0
    1506:	1f 90       	pop	r1
    1508:	18 95       	reti

0000150a <__vector_13>:
    150a:	1f 92       	push	r1
    150c:	0f 92       	push	r0
    150e:	0f b6       	in	r0, 0x3f	; 63
    1510:	0f 92       	push	r0
    1512:	11 24       	eor	r1, r1
    1514:	0f 93       	push	r16
    1516:	1f 93       	push	r17
    1518:	2f 93       	push	r18
    151a:	3f 93       	push	r19
    151c:	4f 93       	push	r20
    151e:	5f 93       	push	r21
    1520:	6f 93       	push	r22
    1522:	7f 93       	push	r23
    1524:	8f 93       	push	r24
    1526:	9f 93       	push	r25
    1528:	af 93       	push	r26
    152a:	bf 93       	push	r27
    152c:	ef 93       	push	r30
    152e:	ff 93       	push	r31
    1530:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
    1534:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <__data_end+0x1>
    1538:	ac 01       	movw	r20, r24
    153a:	09 2e       	mov	r0, r25
    153c:	00 0c       	add	r0, r0
    153e:	66 0b       	sbc	r22, r22
    1540:	77 0b       	sbc	r23, r23
    1542:	9a 01       	movw	r18, r20
    1544:	11 27       	eor	r17, r17
    1546:	00 27       	eor	r16, r16
    1548:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    154c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1550:	60 e0       	ldi	r22, 0x00	; 0
    1552:	70 e0       	ldi	r23, 0x00	; 0
    1554:	40 2b       	or	r20, r16
    1556:	51 2b       	or	r21, r17
    1558:	62 2b       	or	r22, r18
    155a:	73 2b       	or	r23, r19
    155c:	40 93 36 01 	sts	0x0136, r20	; 0x800136 <timestamp>
    1560:	50 93 37 01 	sts	0x0137, r21	; 0x800137 <timestamp+0x1>
    1564:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <timestamp+0x2>
    1568:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <timestamp+0x3>
    156c:	b0 9b       	sbis	0x16, 0	; 22
    156e:	1a c0       	rjmp	.+52     	; 0x15a4 <__vector_13+0x9a>
    1570:	01 96       	adiw	r24, 0x01	; 1
    1572:	09 2e       	mov	r0, r25
    1574:	00 0c       	add	r0, r0
    1576:	aa 0b       	sbc	r26, r26
    1578:	bb 0b       	sbc	r27, r27
    157a:	bc 01       	movw	r22, r24
    157c:	55 27       	eor	r21, r21
    157e:	44 27       	eor	r20, r20
    1580:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1584:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1588:	a0 e0       	ldi	r26, 0x00	; 0
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	84 2b       	or	r24, r20
    158e:	95 2b       	or	r25, r21
    1590:	a6 2b       	or	r26, r22
    1592:	b7 2b       	or	r27, r23
    1594:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    1598:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    159c:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    15a0:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    15a4:	e0 91 e6 01 	lds	r30, 0x01E6	; 0x8001e6 <mtable+0x10>
    15a8:	f0 91 e7 01 	lds	r31, 0x01E7	; 0x8001e7 <mtable+0x11>
    15ac:	30 97       	sbiw	r30, 0x00	; 0
    15ae:	39 f0       	breq	.+14     	; 0x15be <__vector_13+0xb4>
    15b0:	68 e0       	ldi	r22, 0x08	; 8
    15b2:	70 e0       	ldi	r23, 0x00	; 0
    15b4:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <otable+0x10>
    15b8:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <otable+0x11>
    15bc:	09 95       	icall
    15be:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <schedule>
    15c2:	ff 91       	pop	r31
    15c4:	ef 91       	pop	r30
    15c6:	bf 91       	pop	r27
    15c8:	af 91       	pop	r26
    15ca:	9f 91       	pop	r25
    15cc:	8f 91       	pop	r24
    15ce:	7f 91       	pop	r23
    15d0:	6f 91       	pop	r22
    15d2:	5f 91       	pop	r21
    15d4:	4f 91       	pop	r20
    15d6:	3f 91       	pop	r19
    15d8:	2f 91       	pop	r18
    15da:	1f 91       	pop	r17
    15dc:	0f 91       	pop	r16
    15de:	0f 90       	pop	r0
    15e0:	0f be       	out	0x3f, r0	; 63
    15e2:	0f 90       	pop	r0
    15e4:	1f 90       	pop	r1
    15e6:	18 95       	reti

000015e8 <__vector_14>:
    15e8:	1f 92       	push	r1
    15ea:	0f 92       	push	r0
    15ec:	0f b6       	in	r0, 0x3f	; 63
    15ee:	0f 92       	push	r0
    15f0:	11 24       	eor	r1, r1
    15f2:	0f 93       	push	r16
    15f4:	1f 93       	push	r17
    15f6:	2f 93       	push	r18
    15f8:	3f 93       	push	r19
    15fa:	4f 93       	push	r20
    15fc:	5f 93       	push	r21
    15fe:	6f 93       	push	r22
    1600:	7f 93       	push	r23
    1602:	8f 93       	push	r24
    1604:	9f 93       	push	r25
    1606:	af 93       	push	r26
    1608:	bf 93       	push	r27
    160a:	ef 93       	push	r30
    160c:	ff 93       	push	r31
    160e:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
    1612:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <__data_end+0x1>
    1616:	ac 01       	movw	r20, r24
    1618:	09 2e       	mov	r0, r25
    161a:	00 0c       	add	r0, r0
    161c:	66 0b       	sbc	r22, r22
    161e:	77 0b       	sbc	r23, r23
    1620:	9a 01       	movw	r18, r20
    1622:	11 27       	eor	r17, r17
    1624:	00 27       	eor	r16, r16
    1626:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    162a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    162e:	60 e0       	ldi	r22, 0x00	; 0
    1630:	70 e0       	ldi	r23, 0x00	; 0
    1632:	40 2b       	or	r20, r16
    1634:	51 2b       	or	r21, r17
    1636:	62 2b       	or	r22, r18
    1638:	73 2b       	or	r23, r19
    163a:	40 93 36 01 	sts	0x0136, r20	; 0x800136 <timestamp>
    163e:	50 93 37 01 	sts	0x0137, r21	; 0x800137 <timestamp+0x1>
    1642:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <timestamp+0x2>
    1646:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <timestamp+0x3>
    164a:	b0 9b       	sbis	0x16, 0	; 22
    164c:	1a c0       	rjmp	.+52     	; 0x1682 <__vector_14+0x9a>
    164e:	01 96       	adiw	r24, 0x01	; 1
    1650:	09 2e       	mov	r0, r25
    1652:	00 0c       	add	r0, r0
    1654:	aa 0b       	sbc	r26, r26
    1656:	bb 0b       	sbc	r27, r27
    1658:	bc 01       	movw	r22, r24
    165a:	55 27       	eor	r21, r21
    165c:	44 27       	eor	r20, r20
    165e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1662:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1666:	a0 e0       	ldi	r26, 0x00	; 0
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	84 2b       	or	r24, r20
    166c:	95 2b       	or	r25, r21
    166e:	a6 2b       	or	r26, r22
    1670:	b7 2b       	or	r27, r23
    1672:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    1676:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    167a:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    167e:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    1682:	e0 91 e8 01 	lds	r30, 0x01E8	; 0x8001e8 <mtable+0x12>
    1686:	f0 91 e9 01 	lds	r31, 0x01E9	; 0x8001e9 <mtable+0x13>
    168a:	30 97       	sbiw	r30, 0x00	; 0
    168c:	39 f0       	breq	.+14     	; 0x169c <__vector_14+0xb4>
    168e:	69 e0       	ldi	r22, 0x09	; 9
    1690:	70 e0       	ldi	r23, 0x00	; 0
    1692:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <otable+0x12>
    1696:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <otable+0x13>
    169a:	09 95       	icall
    169c:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <schedule>
    16a0:	ff 91       	pop	r31
    16a2:	ef 91       	pop	r30
    16a4:	bf 91       	pop	r27
    16a6:	af 91       	pop	r26
    16a8:	9f 91       	pop	r25
    16aa:	8f 91       	pop	r24
    16ac:	7f 91       	pop	r23
    16ae:	6f 91       	pop	r22
    16b0:	5f 91       	pop	r21
    16b2:	4f 91       	pop	r20
    16b4:	3f 91       	pop	r19
    16b6:	2f 91       	pop	r18
    16b8:	1f 91       	pop	r17
    16ba:	0f 91       	pop	r16
    16bc:	0f 90       	pop	r0
    16be:	0f be       	out	0x3f, r0	; 63
    16c0:	0f 90       	pop	r0
    16c2:	1f 90       	pop	r1
    16c4:	18 95       	reti

000016c6 <__vector_15>:
    16c6:	1f 92       	push	r1
    16c8:	0f 92       	push	r0
    16ca:	0f b6       	in	r0, 0x3f	; 63
    16cc:	0f 92       	push	r0
    16ce:	11 24       	eor	r1, r1
    16d0:	0f 93       	push	r16
    16d2:	1f 93       	push	r17
    16d4:	2f 93       	push	r18
    16d6:	3f 93       	push	r19
    16d8:	4f 93       	push	r20
    16da:	5f 93       	push	r21
    16dc:	6f 93       	push	r22
    16de:	7f 93       	push	r23
    16e0:	8f 93       	push	r24
    16e2:	9f 93       	push	r25
    16e4:	af 93       	push	r26
    16e6:	bf 93       	push	r27
    16e8:	ef 93       	push	r30
    16ea:	ff 93       	push	r31
    16ec:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
    16f0:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <__data_end+0x1>
    16f4:	ac 01       	movw	r20, r24
    16f6:	09 2e       	mov	r0, r25
    16f8:	00 0c       	add	r0, r0
    16fa:	66 0b       	sbc	r22, r22
    16fc:	77 0b       	sbc	r23, r23
    16fe:	9a 01       	movw	r18, r20
    1700:	11 27       	eor	r17, r17
    1702:	00 27       	eor	r16, r16
    1704:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1708:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    170c:	60 e0       	ldi	r22, 0x00	; 0
    170e:	70 e0       	ldi	r23, 0x00	; 0
    1710:	40 2b       	or	r20, r16
    1712:	51 2b       	or	r21, r17
    1714:	62 2b       	or	r22, r18
    1716:	73 2b       	or	r23, r19
    1718:	40 93 36 01 	sts	0x0136, r20	; 0x800136 <timestamp>
    171c:	50 93 37 01 	sts	0x0137, r21	; 0x800137 <timestamp+0x1>
    1720:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <timestamp+0x2>
    1724:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <timestamp+0x3>
    1728:	b0 9b       	sbis	0x16, 0	; 22
    172a:	1a c0       	rjmp	.+52     	; 0x1760 <__vector_15+0x9a>
    172c:	01 96       	adiw	r24, 0x01	; 1
    172e:	09 2e       	mov	r0, r25
    1730:	00 0c       	add	r0, r0
    1732:	aa 0b       	sbc	r26, r26
    1734:	bb 0b       	sbc	r27, r27
    1736:	bc 01       	movw	r22, r24
    1738:	55 27       	eor	r21, r21
    173a:	44 27       	eor	r20, r20
    173c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1740:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1744:	a0 e0       	ldi	r26, 0x00	; 0
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	84 2b       	or	r24, r20
    174a:	95 2b       	or	r25, r21
    174c:	a6 2b       	or	r26, r22
    174e:	b7 2b       	or	r27, r23
    1750:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    1754:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    1758:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    175c:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    1760:	e0 91 ea 01 	lds	r30, 0x01EA	; 0x8001ea <mtable+0x14>
    1764:	f0 91 eb 01 	lds	r31, 0x01EB	; 0x8001eb <mtable+0x15>
    1768:	30 97       	sbiw	r30, 0x00	; 0
    176a:	39 f0       	breq	.+14     	; 0x177a <__vector_15+0xb4>
    176c:	6a e0       	ldi	r22, 0x0A	; 10
    176e:	70 e0       	ldi	r23, 0x00	; 0
    1770:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <otable+0x14>
    1774:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <otable+0x15>
    1778:	09 95       	icall
    177a:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <schedule>
    177e:	ff 91       	pop	r31
    1780:	ef 91       	pop	r30
    1782:	bf 91       	pop	r27
    1784:	af 91       	pop	r26
    1786:	9f 91       	pop	r25
    1788:	8f 91       	pop	r24
    178a:	7f 91       	pop	r23
    178c:	6f 91       	pop	r22
    178e:	5f 91       	pop	r21
    1790:	4f 91       	pop	r20
    1792:	3f 91       	pop	r19
    1794:	2f 91       	pop	r18
    1796:	1f 91       	pop	r17
    1798:	0f 91       	pop	r16
    179a:	0f 90       	pop	r0
    179c:	0f be       	out	0x3f, r0	; 63
    179e:	0f 90       	pop	r0
    17a0:	1f 90       	pop	r1
    17a2:	18 95       	reti

000017a4 <__vector_16>:
    17a4:	1f 92       	push	r1
    17a6:	0f 92       	push	r0
    17a8:	0f b6       	in	r0, 0x3f	; 63
    17aa:	0f 92       	push	r0
    17ac:	11 24       	eor	r1, r1
    17ae:	0f 93       	push	r16
    17b0:	1f 93       	push	r17
    17b2:	2f 93       	push	r18
    17b4:	3f 93       	push	r19
    17b6:	4f 93       	push	r20
    17b8:	5f 93       	push	r21
    17ba:	6f 93       	push	r22
    17bc:	7f 93       	push	r23
    17be:	8f 93       	push	r24
    17c0:	9f 93       	push	r25
    17c2:	af 93       	push	r26
    17c4:	bf 93       	push	r27
    17c6:	ef 93       	push	r30
    17c8:	ff 93       	push	r31
    17ca:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
    17ce:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <__data_end+0x1>
    17d2:	ac 01       	movw	r20, r24
    17d4:	09 2e       	mov	r0, r25
    17d6:	00 0c       	add	r0, r0
    17d8:	66 0b       	sbc	r22, r22
    17da:	77 0b       	sbc	r23, r23
    17dc:	9a 01       	movw	r18, r20
    17de:	11 27       	eor	r17, r17
    17e0:	00 27       	eor	r16, r16
    17e2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    17e6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    17ea:	60 e0       	ldi	r22, 0x00	; 0
    17ec:	70 e0       	ldi	r23, 0x00	; 0
    17ee:	40 2b       	or	r20, r16
    17f0:	51 2b       	or	r21, r17
    17f2:	62 2b       	or	r22, r18
    17f4:	73 2b       	or	r23, r19
    17f6:	40 93 36 01 	sts	0x0136, r20	; 0x800136 <timestamp>
    17fa:	50 93 37 01 	sts	0x0137, r21	; 0x800137 <timestamp+0x1>
    17fe:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <timestamp+0x2>
    1802:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <timestamp+0x3>
    1806:	b0 9b       	sbis	0x16, 0	; 22
    1808:	1a c0       	rjmp	.+52     	; 0x183e <__vector_16+0x9a>
    180a:	01 96       	adiw	r24, 0x01	; 1
    180c:	09 2e       	mov	r0, r25
    180e:	00 0c       	add	r0, r0
    1810:	aa 0b       	sbc	r26, r26
    1812:	bb 0b       	sbc	r27, r27
    1814:	bc 01       	movw	r22, r24
    1816:	55 27       	eor	r21, r21
    1818:	44 27       	eor	r20, r20
    181a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    181e:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1822:	a0 e0       	ldi	r26, 0x00	; 0
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	84 2b       	or	r24, r20
    1828:	95 2b       	or	r25, r21
    182a:	a6 2b       	or	r26, r22
    182c:	b7 2b       	or	r27, r23
    182e:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    1832:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    1836:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    183a:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    183e:	e0 91 ec 01 	lds	r30, 0x01EC	; 0x8001ec <mtable+0x16>
    1842:	f0 91 ed 01 	lds	r31, 0x01ED	; 0x8001ed <mtable+0x17>
    1846:	30 97       	sbiw	r30, 0x00	; 0
    1848:	39 f0       	breq	.+14     	; 0x1858 <__vector_16+0xb4>
    184a:	6b e0       	ldi	r22, 0x0B	; 11
    184c:	70 e0       	ldi	r23, 0x00	; 0
    184e:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <otable+0x16>
    1852:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <otable+0x17>
    1856:	09 95       	icall
    1858:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <schedule>
    185c:	ff 91       	pop	r31
    185e:	ef 91       	pop	r30
    1860:	bf 91       	pop	r27
    1862:	af 91       	pop	r26
    1864:	9f 91       	pop	r25
    1866:	8f 91       	pop	r24
    1868:	7f 91       	pop	r23
    186a:	6f 91       	pop	r22
    186c:	5f 91       	pop	r21
    186e:	4f 91       	pop	r20
    1870:	3f 91       	pop	r19
    1872:	2f 91       	pop	r18
    1874:	1f 91       	pop	r17
    1876:	0f 91       	pop	r16
    1878:	0f 90       	pop	r0
    187a:	0f be       	out	0x3f, r0	; 63
    187c:	0f 90       	pop	r0
    187e:	1f 90       	pop	r1
    1880:	18 95       	reti

00001882 <__vector_17>:
    1882:	1f 92       	push	r1
    1884:	0f 92       	push	r0
    1886:	0f b6       	in	r0, 0x3f	; 63
    1888:	0f 92       	push	r0
    188a:	11 24       	eor	r1, r1
    188c:	0f 93       	push	r16
    188e:	1f 93       	push	r17
    1890:	2f 93       	push	r18
    1892:	3f 93       	push	r19
    1894:	4f 93       	push	r20
    1896:	5f 93       	push	r21
    1898:	6f 93       	push	r22
    189a:	7f 93       	push	r23
    189c:	8f 93       	push	r24
    189e:	9f 93       	push	r25
    18a0:	af 93       	push	r26
    18a2:	bf 93       	push	r27
    18a4:	ef 93       	push	r30
    18a6:	ff 93       	push	r31
    18a8:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
    18ac:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <__data_end+0x1>
    18b0:	ac 01       	movw	r20, r24
    18b2:	09 2e       	mov	r0, r25
    18b4:	00 0c       	add	r0, r0
    18b6:	66 0b       	sbc	r22, r22
    18b8:	77 0b       	sbc	r23, r23
    18ba:	9a 01       	movw	r18, r20
    18bc:	11 27       	eor	r17, r17
    18be:	00 27       	eor	r16, r16
    18c0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    18c4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    18c8:	60 e0       	ldi	r22, 0x00	; 0
    18ca:	70 e0       	ldi	r23, 0x00	; 0
    18cc:	40 2b       	or	r20, r16
    18ce:	51 2b       	or	r21, r17
    18d0:	62 2b       	or	r22, r18
    18d2:	73 2b       	or	r23, r19
    18d4:	40 93 36 01 	sts	0x0136, r20	; 0x800136 <timestamp>
    18d8:	50 93 37 01 	sts	0x0137, r21	; 0x800137 <timestamp+0x1>
    18dc:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <timestamp+0x2>
    18e0:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <timestamp+0x3>
    18e4:	b0 9b       	sbis	0x16, 0	; 22
    18e6:	1a c0       	rjmp	.+52     	; 0x191c <__vector_17+0x9a>
    18e8:	01 96       	adiw	r24, 0x01	; 1
    18ea:	09 2e       	mov	r0, r25
    18ec:	00 0c       	add	r0, r0
    18ee:	aa 0b       	sbc	r26, r26
    18f0:	bb 0b       	sbc	r27, r27
    18f2:	bc 01       	movw	r22, r24
    18f4:	55 27       	eor	r21, r21
    18f6:	44 27       	eor	r20, r20
    18f8:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    18fc:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1900:	a0 e0       	ldi	r26, 0x00	; 0
    1902:	b0 e0       	ldi	r27, 0x00	; 0
    1904:	84 2b       	or	r24, r20
    1906:	95 2b       	or	r25, r21
    1908:	a6 2b       	or	r26, r22
    190a:	b7 2b       	or	r27, r23
    190c:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    1910:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    1914:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    1918:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    191c:	e0 91 ee 01 	lds	r30, 0x01EE	; 0x8001ee <mtable+0x18>
    1920:	f0 91 ef 01 	lds	r31, 0x01EF	; 0x8001ef <mtable+0x19>
    1924:	30 97       	sbiw	r30, 0x00	; 0
    1926:	39 f0       	breq	.+14     	; 0x1936 <__vector_17+0xb4>
    1928:	6c e0       	ldi	r22, 0x0C	; 12
    192a:	70 e0       	ldi	r23, 0x00	; 0
    192c:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <otable+0x18>
    1930:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <otable+0x19>
    1934:	09 95       	icall
    1936:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <schedule>
    193a:	ff 91       	pop	r31
    193c:	ef 91       	pop	r30
    193e:	bf 91       	pop	r27
    1940:	af 91       	pop	r26
    1942:	9f 91       	pop	r25
    1944:	8f 91       	pop	r24
    1946:	7f 91       	pop	r23
    1948:	6f 91       	pop	r22
    194a:	5f 91       	pop	r21
    194c:	4f 91       	pop	r20
    194e:	3f 91       	pop	r19
    1950:	2f 91       	pop	r18
    1952:	1f 91       	pop	r17
    1954:	0f 91       	pop	r16
    1956:	0f 90       	pop	r0
    1958:	0f be       	out	0x3f, r0	; 63
    195a:	0f 90       	pop	r0
    195c:	1f 90       	pop	r1
    195e:	18 95       	reti

00001960 <__vector_18>:
    1960:	1f 92       	push	r1
    1962:	0f 92       	push	r0
    1964:	0f b6       	in	r0, 0x3f	; 63
    1966:	0f 92       	push	r0
    1968:	11 24       	eor	r1, r1
    196a:	0f 93       	push	r16
    196c:	1f 93       	push	r17
    196e:	2f 93       	push	r18
    1970:	3f 93       	push	r19
    1972:	4f 93       	push	r20
    1974:	5f 93       	push	r21
    1976:	6f 93       	push	r22
    1978:	7f 93       	push	r23
    197a:	8f 93       	push	r24
    197c:	9f 93       	push	r25
    197e:	af 93       	push	r26
    1980:	bf 93       	push	r27
    1982:	ef 93       	push	r30
    1984:	ff 93       	push	r31
    1986:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
    198a:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <__data_end+0x1>
    198e:	ac 01       	movw	r20, r24
    1990:	09 2e       	mov	r0, r25
    1992:	00 0c       	add	r0, r0
    1994:	66 0b       	sbc	r22, r22
    1996:	77 0b       	sbc	r23, r23
    1998:	9a 01       	movw	r18, r20
    199a:	11 27       	eor	r17, r17
    199c:	00 27       	eor	r16, r16
    199e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    19a2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    19a6:	60 e0       	ldi	r22, 0x00	; 0
    19a8:	70 e0       	ldi	r23, 0x00	; 0
    19aa:	40 2b       	or	r20, r16
    19ac:	51 2b       	or	r21, r17
    19ae:	62 2b       	or	r22, r18
    19b0:	73 2b       	or	r23, r19
    19b2:	40 93 36 01 	sts	0x0136, r20	; 0x800136 <timestamp>
    19b6:	50 93 37 01 	sts	0x0137, r21	; 0x800137 <timestamp+0x1>
    19ba:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <timestamp+0x2>
    19be:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <timestamp+0x3>
    19c2:	b0 9b       	sbis	0x16, 0	; 22
    19c4:	1a c0       	rjmp	.+52     	; 0x19fa <__vector_18+0x9a>
    19c6:	01 96       	adiw	r24, 0x01	; 1
    19c8:	09 2e       	mov	r0, r25
    19ca:	00 0c       	add	r0, r0
    19cc:	aa 0b       	sbc	r26, r26
    19ce:	bb 0b       	sbc	r27, r27
    19d0:	bc 01       	movw	r22, r24
    19d2:	55 27       	eor	r21, r21
    19d4:	44 27       	eor	r20, r20
    19d6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    19da:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    19de:	a0 e0       	ldi	r26, 0x00	; 0
    19e0:	b0 e0       	ldi	r27, 0x00	; 0
    19e2:	84 2b       	or	r24, r20
    19e4:	95 2b       	or	r25, r21
    19e6:	a6 2b       	or	r26, r22
    19e8:	b7 2b       	or	r27, r23
    19ea:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    19ee:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    19f2:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    19f6:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    19fa:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <mtable+0x1a>
    19fe:	f0 91 f1 01 	lds	r31, 0x01F1	; 0x8001f1 <mtable+0x1b>
    1a02:	30 97       	sbiw	r30, 0x00	; 0
    1a04:	39 f0       	breq	.+14     	; 0x1a14 <__vector_18+0xb4>
    1a06:	6d e0       	ldi	r22, 0x0D	; 13
    1a08:	70 e0       	ldi	r23, 0x00	; 0
    1a0a:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <otable+0x1a>
    1a0e:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <otable+0x1b>
    1a12:	09 95       	icall
    1a14:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <schedule>
    1a18:	ff 91       	pop	r31
    1a1a:	ef 91       	pop	r30
    1a1c:	bf 91       	pop	r27
    1a1e:	af 91       	pop	r26
    1a20:	9f 91       	pop	r25
    1a22:	8f 91       	pop	r24
    1a24:	7f 91       	pop	r23
    1a26:	6f 91       	pop	r22
    1a28:	5f 91       	pop	r21
    1a2a:	4f 91       	pop	r20
    1a2c:	3f 91       	pop	r19
    1a2e:	2f 91       	pop	r18
    1a30:	1f 91       	pop	r17
    1a32:	0f 91       	pop	r16
    1a34:	0f 90       	pop	r0
    1a36:	0f be       	out	0x3f, r0	; 63
    1a38:	0f 90       	pop	r0
    1a3a:	1f 90       	pop	r1
    1a3c:	18 95       	reti

00001a3e <__vector_19>:
    1a3e:	1f 92       	push	r1
    1a40:	0f 92       	push	r0
    1a42:	0f b6       	in	r0, 0x3f	; 63
    1a44:	0f 92       	push	r0
    1a46:	11 24       	eor	r1, r1
    1a48:	0f 93       	push	r16
    1a4a:	1f 93       	push	r17
    1a4c:	2f 93       	push	r18
    1a4e:	3f 93       	push	r19
    1a50:	4f 93       	push	r20
    1a52:	5f 93       	push	r21
    1a54:	6f 93       	push	r22
    1a56:	7f 93       	push	r23
    1a58:	8f 93       	push	r24
    1a5a:	9f 93       	push	r25
    1a5c:	af 93       	push	r26
    1a5e:	bf 93       	push	r27
    1a60:	ef 93       	push	r30
    1a62:	ff 93       	push	r31
    1a64:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
    1a68:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <__data_end+0x1>
    1a6c:	ac 01       	movw	r20, r24
    1a6e:	09 2e       	mov	r0, r25
    1a70:	00 0c       	add	r0, r0
    1a72:	66 0b       	sbc	r22, r22
    1a74:	77 0b       	sbc	r23, r23
    1a76:	9a 01       	movw	r18, r20
    1a78:	11 27       	eor	r17, r17
    1a7a:	00 27       	eor	r16, r16
    1a7c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a80:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a84:	60 e0       	ldi	r22, 0x00	; 0
    1a86:	70 e0       	ldi	r23, 0x00	; 0
    1a88:	40 2b       	or	r20, r16
    1a8a:	51 2b       	or	r21, r17
    1a8c:	62 2b       	or	r22, r18
    1a8e:	73 2b       	or	r23, r19
    1a90:	40 93 36 01 	sts	0x0136, r20	; 0x800136 <timestamp>
    1a94:	50 93 37 01 	sts	0x0137, r21	; 0x800137 <timestamp+0x1>
    1a98:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <timestamp+0x2>
    1a9c:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <timestamp+0x3>
    1aa0:	b0 9b       	sbis	0x16, 0	; 22
    1aa2:	1a c0       	rjmp	.+52     	; 0x1ad8 <__vector_19+0x9a>
    1aa4:	01 96       	adiw	r24, 0x01	; 1
    1aa6:	09 2e       	mov	r0, r25
    1aa8:	00 0c       	add	r0, r0
    1aaa:	aa 0b       	sbc	r26, r26
    1aac:	bb 0b       	sbc	r27, r27
    1aae:	bc 01       	movw	r22, r24
    1ab0:	55 27       	eor	r21, r21
    1ab2:	44 27       	eor	r20, r20
    1ab4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ab8:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1abc:	a0 e0       	ldi	r26, 0x00	; 0
    1abe:	b0 e0       	ldi	r27, 0x00	; 0
    1ac0:	84 2b       	or	r24, r20
    1ac2:	95 2b       	or	r25, r21
    1ac4:	a6 2b       	or	r26, r22
    1ac6:	b7 2b       	or	r27, r23
    1ac8:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    1acc:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    1ad0:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    1ad4:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    1ad8:	e0 91 f2 01 	lds	r30, 0x01F2	; 0x8001f2 <mtable+0x1c>
    1adc:	f0 91 f3 01 	lds	r31, 0x01F3	; 0x8001f3 <mtable+0x1d>
    1ae0:	30 97       	sbiw	r30, 0x00	; 0
    1ae2:	39 f0       	breq	.+14     	; 0x1af2 <__vector_19+0xb4>
    1ae4:	6e e0       	ldi	r22, 0x0E	; 14
    1ae6:	70 e0       	ldi	r23, 0x00	; 0
    1ae8:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <otable+0x1c>
    1aec:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <otable+0x1d>
    1af0:	09 95       	icall
    1af2:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <schedule>
    1af6:	ff 91       	pop	r31
    1af8:	ef 91       	pop	r30
    1afa:	bf 91       	pop	r27
    1afc:	af 91       	pop	r26
    1afe:	9f 91       	pop	r25
    1b00:	8f 91       	pop	r24
    1b02:	7f 91       	pop	r23
    1b04:	6f 91       	pop	r22
    1b06:	5f 91       	pop	r21
    1b08:	4f 91       	pop	r20
    1b0a:	3f 91       	pop	r19
    1b0c:	2f 91       	pop	r18
    1b0e:	1f 91       	pop	r17
    1b10:	0f 91       	pop	r16
    1b12:	0f 90       	pop	r0
    1b14:	0f be       	out	0x3f, r0	; 63
    1b16:	0f 90       	pop	r0
    1b18:	1f 90       	pop	r1
    1b1a:	18 95       	reti

00001b1c <__vector_20>:
    1b1c:	1f 92       	push	r1
    1b1e:	0f 92       	push	r0
    1b20:	0f b6       	in	r0, 0x3f	; 63
    1b22:	0f 92       	push	r0
    1b24:	11 24       	eor	r1, r1
    1b26:	0f 93       	push	r16
    1b28:	1f 93       	push	r17
    1b2a:	2f 93       	push	r18
    1b2c:	3f 93       	push	r19
    1b2e:	4f 93       	push	r20
    1b30:	5f 93       	push	r21
    1b32:	6f 93       	push	r22
    1b34:	7f 93       	push	r23
    1b36:	8f 93       	push	r24
    1b38:	9f 93       	push	r25
    1b3a:	af 93       	push	r26
    1b3c:	bf 93       	push	r27
    1b3e:	ef 93       	push	r30
    1b40:	ff 93       	push	r31
    1b42:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
    1b46:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <__data_end+0x1>
    1b4a:	ac 01       	movw	r20, r24
    1b4c:	09 2e       	mov	r0, r25
    1b4e:	00 0c       	add	r0, r0
    1b50:	66 0b       	sbc	r22, r22
    1b52:	77 0b       	sbc	r23, r23
    1b54:	9a 01       	movw	r18, r20
    1b56:	11 27       	eor	r17, r17
    1b58:	00 27       	eor	r16, r16
    1b5a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b5e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b62:	60 e0       	ldi	r22, 0x00	; 0
    1b64:	70 e0       	ldi	r23, 0x00	; 0
    1b66:	40 2b       	or	r20, r16
    1b68:	51 2b       	or	r21, r17
    1b6a:	62 2b       	or	r22, r18
    1b6c:	73 2b       	or	r23, r19
    1b6e:	40 93 36 01 	sts	0x0136, r20	; 0x800136 <timestamp>
    1b72:	50 93 37 01 	sts	0x0137, r21	; 0x800137 <timestamp+0x1>
    1b76:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <timestamp+0x2>
    1b7a:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <timestamp+0x3>
    1b7e:	b0 9b       	sbis	0x16, 0	; 22
    1b80:	1a c0       	rjmp	.+52     	; 0x1bb6 <__vector_20+0x9a>
    1b82:	01 96       	adiw	r24, 0x01	; 1
    1b84:	09 2e       	mov	r0, r25
    1b86:	00 0c       	add	r0, r0
    1b88:	aa 0b       	sbc	r26, r26
    1b8a:	bb 0b       	sbc	r27, r27
    1b8c:	bc 01       	movw	r22, r24
    1b8e:	55 27       	eor	r21, r21
    1b90:	44 27       	eor	r20, r20
    1b92:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b96:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b9a:	a0 e0       	ldi	r26, 0x00	; 0
    1b9c:	b0 e0       	ldi	r27, 0x00	; 0
    1b9e:	84 2b       	or	r24, r20
    1ba0:	95 2b       	or	r25, r21
    1ba2:	a6 2b       	or	r26, r22
    1ba4:	b7 2b       	or	r27, r23
    1ba6:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    1baa:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    1bae:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    1bb2:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    1bb6:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <mtable+0x1e>
    1bba:	f0 91 f5 01 	lds	r31, 0x01F5	; 0x8001f5 <mtable+0x1f>
    1bbe:	30 97       	sbiw	r30, 0x00	; 0
    1bc0:	39 f0       	breq	.+14     	; 0x1bd0 <__vector_20+0xb4>
    1bc2:	6f e0       	ldi	r22, 0x0F	; 15
    1bc4:	70 e0       	ldi	r23, 0x00	; 0
    1bc6:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <otable+0x1e>
    1bca:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <otable+0x1f>
    1bce:	09 95       	icall
    1bd0:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <schedule>
    1bd4:	ff 91       	pop	r31
    1bd6:	ef 91       	pop	r30
    1bd8:	bf 91       	pop	r27
    1bda:	af 91       	pop	r26
    1bdc:	9f 91       	pop	r25
    1bde:	8f 91       	pop	r24
    1be0:	7f 91       	pop	r23
    1be2:	6f 91       	pop	r22
    1be4:	5f 91       	pop	r21
    1be6:	4f 91       	pop	r20
    1be8:	3f 91       	pop	r19
    1bea:	2f 91       	pop	r18
    1bec:	1f 91       	pop	r17
    1bee:	0f 91       	pop	r16
    1bf0:	0f 90       	pop	r0
    1bf2:	0f be       	out	0x3f, r0	; 63
    1bf4:	0f 90       	pop	r0
    1bf6:	1f 90       	pop	r1
    1bf8:	18 95       	reti

00001bfa <__vector_21>:
    1bfa:	1f 92       	push	r1
    1bfc:	0f 92       	push	r0
    1bfe:	0f b6       	in	r0, 0x3f	; 63
    1c00:	0f 92       	push	r0
    1c02:	11 24       	eor	r1, r1
    1c04:	0f 93       	push	r16
    1c06:	1f 93       	push	r17
    1c08:	2f 93       	push	r18
    1c0a:	3f 93       	push	r19
    1c0c:	4f 93       	push	r20
    1c0e:	5f 93       	push	r21
    1c10:	6f 93       	push	r22
    1c12:	7f 93       	push	r23
    1c14:	8f 93       	push	r24
    1c16:	9f 93       	push	r25
    1c18:	af 93       	push	r26
    1c1a:	bf 93       	push	r27
    1c1c:	ef 93       	push	r30
    1c1e:	ff 93       	push	r31
    1c20:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
    1c24:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <__data_end+0x1>
    1c28:	ac 01       	movw	r20, r24
    1c2a:	09 2e       	mov	r0, r25
    1c2c:	00 0c       	add	r0, r0
    1c2e:	66 0b       	sbc	r22, r22
    1c30:	77 0b       	sbc	r23, r23
    1c32:	9a 01       	movw	r18, r20
    1c34:	11 27       	eor	r17, r17
    1c36:	00 27       	eor	r16, r16
    1c38:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c3c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c40:	60 e0       	ldi	r22, 0x00	; 0
    1c42:	70 e0       	ldi	r23, 0x00	; 0
    1c44:	40 2b       	or	r20, r16
    1c46:	51 2b       	or	r21, r17
    1c48:	62 2b       	or	r22, r18
    1c4a:	73 2b       	or	r23, r19
    1c4c:	40 93 36 01 	sts	0x0136, r20	; 0x800136 <timestamp>
    1c50:	50 93 37 01 	sts	0x0137, r21	; 0x800137 <timestamp+0x1>
    1c54:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <timestamp+0x2>
    1c58:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <timestamp+0x3>
    1c5c:	b0 9b       	sbis	0x16, 0	; 22
    1c5e:	1a c0       	rjmp	.+52     	; 0x1c94 <__vector_21+0x9a>
    1c60:	01 96       	adiw	r24, 0x01	; 1
    1c62:	09 2e       	mov	r0, r25
    1c64:	00 0c       	add	r0, r0
    1c66:	aa 0b       	sbc	r26, r26
    1c68:	bb 0b       	sbc	r27, r27
    1c6a:	bc 01       	movw	r22, r24
    1c6c:	55 27       	eor	r21, r21
    1c6e:	44 27       	eor	r20, r20
    1c70:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c74:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c78:	a0 e0       	ldi	r26, 0x00	; 0
    1c7a:	b0 e0       	ldi	r27, 0x00	; 0
    1c7c:	84 2b       	or	r24, r20
    1c7e:	95 2b       	or	r25, r21
    1c80:	a6 2b       	or	r26, r22
    1c82:	b7 2b       	or	r27, r23
    1c84:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    1c88:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    1c8c:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    1c90:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    1c94:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <mtable+0x20>
    1c98:	f0 91 f7 01 	lds	r31, 0x01F7	; 0x8001f7 <mtable+0x21>
    1c9c:	30 97       	sbiw	r30, 0x00	; 0
    1c9e:	39 f0       	breq	.+14     	; 0x1cae <__vector_21+0xb4>
    1ca0:	60 e1       	ldi	r22, 0x10	; 16
    1ca2:	70 e0       	ldi	r23, 0x00	; 0
    1ca4:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <otable+0x20>
    1ca8:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <otable+0x21>
    1cac:	09 95       	icall
    1cae:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <schedule>
    1cb2:	ff 91       	pop	r31
    1cb4:	ef 91       	pop	r30
    1cb6:	bf 91       	pop	r27
    1cb8:	af 91       	pop	r26
    1cba:	9f 91       	pop	r25
    1cbc:	8f 91       	pop	r24
    1cbe:	7f 91       	pop	r23
    1cc0:	6f 91       	pop	r22
    1cc2:	5f 91       	pop	r21
    1cc4:	4f 91       	pop	r20
    1cc6:	3f 91       	pop	r19
    1cc8:	2f 91       	pop	r18
    1cca:	1f 91       	pop	r17
    1ccc:	0f 91       	pop	r16
    1cce:	0f 90       	pop	r0
    1cd0:	0f be       	out	0x3f, r0	; 63
    1cd2:	0f 90       	pop	r0
    1cd4:	1f 90       	pop	r1
    1cd6:	18 95       	reti

00001cd8 <__vector_22>:
    1cd8:	1f 92       	push	r1
    1cda:	0f 92       	push	r0
    1cdc:	0f b6       	in	r0, 0x3f	; 63
    1cde:	0f 92       	push	r0
    1ce0:	11 24       	eor	r1, r1
    1ce2:	0f 93       	push	r16
    1ce4:	1f 93       	push	r17
    1ce6:	2f 93       	push	r18
    1ce8:	3f 93       	push	r19
    1cea:	4f 93       	push	r20
    1cec:	5f 93       	push	r21
    1cee:	6f 93       	push	r22
    1cf0:	7f 93       	push	r23
    1cf2:	8f 93       	push	r24
    1cf4:	9f 93       	push	r25
    1cf6:	af 93       	push	r26
    1cf8:	bf 93       	push	r27
    1cfa:	ef 93       	push	r30
    1cfc:	ff 93       	push	r31
    1cfe:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
    1d02:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <__data_end+0x1>
    1d06:	ac 01       	movw	r20, r24
    1d08:	09 2e       	mov	r0, r25
    1d0a:	00 0c       	add	r0, r0
    1d0c:	66 0b       	sbc	r22, r22
    1d0e:	77 0b       	sbc	r23, r23
    1d10:	9a 01       	movw	r18, r20
    1d12:	11 27       	eor	r17, r17
    1d14:	00 27       	eor	r16, r16
    1d16:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d1a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d1e:	60 e0       	ldi	r22, 0x00	; 0
    1d20:	70 e0       	ldi	r23, 0x00	; 0
    1d22:	40 2b       	or	r20, r16
    1d24:	51 2b       	or	r21, r17
    1d26:	62 2b       	or	r22, r18
    1d28:	73 2b       	or	r23, r19
    1d2a:	40 93 36 01 	sts	0x0136, r20	; 0x800136 <timestamp>
    1d2e:	50 93 37 01 	sts	0x0137, r21	; 0x800137 <timestamp+0x1>
    1d32:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <timestamp+0x2>
    1d36:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <timestamp+0x3>
    1d3a:	b0 9b       	sbis	0x16, 0	; 22
    1d3c:	1a c0       	rjmp	.+52     	; 0x1d72 <__vector_22+0x9a>
    1d3e:	01 96       	adiw	r24, 0x01	; 1
    1d40:	09 2e       	mov	r0, r25
    1d42:	00 0c       	add	r0, r0
    1d44:	aa 0b       	sbc	r26, r26
    1d46:	bb 0b       	sbc	r27, r27
    1d48:	bc 01       	movw	r22, r24
    1d4a:	55 27       	eor	r21, r21
    1d4c:	44 27       	eor	r20, r20
    1d4e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d52:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d56:	a0 e0       	ldi	r26, 0x00	; 0
    1d58:	b0 e0       	ldi	r27, 0x00	; 0
    1d5a:	84 2b       	or	r24, r20
    1d5c:	95 2b       	or	r25, r21
    1d5e:	a6 2b       	or	r26, r22
    1d60:	b7 2b       	or	r27, r23
    1d62:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    1d66:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    1d6a:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    1d6e:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    1d72:	e0 91 f8 01 	lds	r30, 0x01F8	; 0x8001f8 <mtable+0x22>
    1d76:	f0 91 f9 01 	lds	r31, 0x01F9	; 0x8001f9 <mtable+0x23>
    1d7a:	30 97       	sbiw	r30, 0x00	; 0
    1d7c:	39 f0       	breq	.+14     	; 0x1d8c <__vector_22+0xb4>
    1d7e:	61 e1       	ldi	r22, 0x11	; 17
    1d80:	70 e0       	ldi	r23, 0x00	; 0
    1d82:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <otable+0x22>
    1d86:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <otable+0x23>
    1d8a:	09 95       	icall
    1d8c:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <schedule>
    1d90:	ff 91       	pop	r31
    1d92:	ef 91       	pop	r30
    1d94:	bf 91       	pop	r27
    1d96:	af 91       	pop	r26
    1d98:	9f 91       	pop	r25
    1d9a:	8f 91       	pop	r24
    1d9c:	7f 91       	pop	r23
    1d9e:	6f 91       	pop	r22
    1da0:	5f 91       	pop	r21
    1da2:	4f 91       	pop	r20
    1da4:	3f 91       	pop	r19
    1da6:	2f 91       	pop	r18
    1da8:	1f 91       	pop	r17
    1daa:	0f 91       	pop	r16
    1dac:	0f 90       	pop	r0
    1dae:	0f be       	out	0x3f, r0	; 63
    1db0:	0f 90       	pop	r0
    1db2:	1f 90       	pop	r1
    1db4:	18 95       	reti

00001db6 <idle>:
    1db6:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <schedule>
    1dba:	78 94       	sei
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	83 bf       	out	0x33, r24	; 51
    1dc0:	88 95       	sleep
    1dc2:	fc cf       	rjmp	.-8      	; 0x1dbc <idle+0x6>

00001dc4 <__vector_9>:
    1dc4:	1f 92       	push	r1
    1dc6:	0f 92       	push	r0
    1dc8:	0f b6       	in	r0, 0x3f	; 63
    1dca:	0f 92       	push	r0
    1dcc:	11 24       	eor	r1, r1
    1dce:	2f 93       	push	r18
    1dd0:	3f 93       	push	r19
    1dd2:	4f 93       	push	r20
    1dd4:	5f 93       	push	r21
    1dd6:	6f 93       	push	r22
    1dd8:	7f 93       	push	r23
    1dda:	8f 93       	push	r24
    1ddc:	9f 93       	push	r25
    1dde:	ef 93       	push	r30
    1de0:	ff 93       	push	r31
    1de2:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
    1de6:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <__data_end+0x1>
    1dea:	01 96       	adiw	r24, 0x01	; 1
    1dec:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <__data_end+0x1>
    1df0:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__data_end>
    1df4:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <timerQ>
    1df8:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <timerQ+0x1>
    1dfc:	30 97       	sbiw	r30, 0x00	; 0
    1dfe:	01 f1       	breq	.+64     	; 0x1e40 <__vector_9+0x7c>
    1e00:	42 81       	ldd	r20, Z+2	; 0x02
    1e02:	53 81       	ldd	r21, Z+3	; 0x03
    1e04:	64 81       	ldd	r22, Z+4	; 0x04
    1e06:	75 81       	ldd	r23, Z+5	; 0x05
    1e08:	86 17       	cp	r24, r22
    1e0a:	97 07       	cpc	r25, r23
    1e0c:	c9 f4       	brne	.+50     	; 0x1e40 <__vector_9+0x7c>
    1e0e:	ca 01       	movw	r24, r20
    1e10:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1e14:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e18:	42 1b       	sub	r20, r18
    1e1a:	53 0b       	sbc	r21, r19
    1e1c:	41 30       	cpi	r20, 0x01	; 1
    1e1e:	51 05       	cpc	r21, r1
    1e20:	29 f4       	brne	.+10     	; 0x1e2c <__vector_9+0x68>
    1e22:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1e26:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e2a:	01 96       	adiw	r24, 0x01	; 1
    1e2c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1e30:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1e34:	ef e6       	ldi	r30, 0x6F	; 111
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	80 81       	ld	r24, Z
    1e3a:	82 60       	ori	r24, 0x02	; 2
    1e3c:	80 83       	st	Z, r24
    1e3e:	05 c0       	rjmp	.+10     	; 0x1e4a <__vector_9+0x86>
    1e40:	ef e6       	ldi	r30, 0x6F	; 111
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	80 81       	ld	r24, Z
    1e46:	8d 7f       	andi	r24, 0xFD	; 253
    1e48:	80 83       	st	Z, r24
    1e4a:	ff 91       	pop	r31
    1e4c:	ef 91       	pop	r30
    1e4e:	9f 91       	pop	r25
    1e50:	8f 91       	pop	r24
    1e52:	7f 91       	pop	r23
    1e54:	6f 91       	pop	r22
    1e56:	5f 91       	pop	r21
    1e58:	4f 91       	pop	r20
    1e5a:	3f 91       	pop	r19
    1e5c:	2f 91       	pop	r18
    1e5e:	0f 90       	pop	r0
    1e60:	0f be       	out	0x3f, r0	; 63
    1e62:	0f 90       	pop	r0
    1e64:	1f 90       	pop	r1
    1e66:	18 95       	reti

00001e68 <__vector_7>:
    1e68:	1f 92       	push	r1
    1e6a:	0f 92       	push	r0
    1e6c:	0f b6       	in	r0, 0x3f	; 63
    1e6e:	0f 92       	push	r0
    1e70:	11 24       	eor	r1, r1
    1e72:	cf 92       	push	r12
    1e74:	df 92       	push	r13
    1e76:	ef 92       	push	r14
    1e78:	ff 92       	push	r15
    1e7a:	2f 93       	push	r18
    1e7c:	3f 93       	push	r19
    1e7e:	4f 93       	push	r20
    1e80:	5f 93       	push	r21
    1e82:	6f 93       	push	r22
    1e84:	7f 93       	push	r23
    1e86:	8f 93       	push	r24
    1e88:	9f 93       	push	r25
    1e8a:	af 93       	push	r26
    1e8c:	bf 93       	push	r27
    1e8e:	ef 93       	push	r30
    1e90:	ff 93       	push	r31
    1e92:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
    1e96:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <__data_end+0x1>
    1e9a:	6c 01       	movw	r12, r24
    1e9c:	09 2e       	mov	r0, r25
    1e9e:	00 0c       	add	r0, r0
    1ea0:	ee 08       	sbc	r14, r14
    1ea2:	ff 08       	sbc	r15, r15
    1ea4:	76 01       	movw	r14, r12
    1ea6:	dd 24       	eor	r13, r13
    1ea8:	cc 24       	eor	r12, r12
    1eaa:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1eae:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1eb2:	60 e0       	ldi	r22, 0x00	; 0
    1eb4:	70 e0       	ldi	r23, 0x00	; 0
    1eb6:	c4 2a       	or	r12, r20
    1eb8:	d5 2a       	or	r13, r21
    1eba:	e6 2a       	or	r14, r22
    1ebc:	f7 2a       	or	r15, r23
    1ebe:	b0 9b       	sbis	0x16, 0	; 22
    1ec0:	1e c0       	rjmp	.+60     	; 0x1efe <__vector_7+0x96>
    1ec2:	6c 01       	movw	r12, r24
    1ec4:	2f ef       	ldi	r18, 0xFF	; 255
    1ec6:	c2 1a       	sub	r12, r18
    1ec8:	d2 0a       	sbc	r13, r18
    1eca:	0d 2c       	mov	r0, r13
    1ecc:	00 0c       	add	r0, r0
    1ece:	ee 08       	sbc	r14, r14
    1ed0:	ff 08       	sbc	r15, r15
    1ed2:	d6 01       	movw	r26, r12
    1ed4:	99 27       	eor	r25, r25
    1ed6:	88 27       	eor	r24, r24
    1ed8:	c0 90 84 00 	lds	r12, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1edc:	d0 90 85 00 	lds	r13, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ee0:	e1 2c       	mov	r14, r1
    1ee2:	f1 2c       	mov	r15, r1
    1ee4:	c8 2a       	or	r12, r24
    1ee6:	d9 2a       	or	r13, r25
    1ee8:	ea 2a       	or	r14, r26
    1eea:	fb 2a       	or	r15, r27
    1eec:	08 c0       	rjmp	.+16     	; 0x1efe <__vector_7+0x96>
    1eee:	8a e3       	ldi	r24, 0x3A	; 58
    1ef0:	91 e0       	ldi	r25, 0x01	; 1
    1ef2:	0e 94 a4 06 	call	0xd48	; 0xd48 <dequeue>
    1ef6:	6c e3       	ldi	r22, 0x3C	; 60
    1ef8:	71 e0       	ldi	r23, 0x01	; 1
    1efa:	0e 94 42 06 	call	0xc84	; 0xc84 <enqueueByDeadline>
    1efe:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <timerQ>
    1f02:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <timerQ+0x1>
    1f06:	30 97       	sbiw	r30, 0x00	; 0
    1f08:	69 f0       	breq	.+26     	; 0x1f24 <__vector_7+0xbc>
    1f0a:	82 81       	ldd	r24, Z+2	; 0x02
    1f0c:	93 81       	ldd	r25, Z+3	; 0x03
    1f0e:	a4 81       	ldd	r26, Z+4	; 0x04
    1f10:	b5 81       	ldd	r27, Z+5	; 0x05
    1f12:	8c 19       	sub	r24, r12
    1f14:	9d 09       	sbc	r25, r13
    1f16:	ae 09       	sbc	r26, r14
    1f18:	bf 09       	sbc	r27, r15
    1f1a:	18 16       	cp	r1, r24
    1f1c:	19 06       	cpc	r1, r25
    1f1e:	1a 06       	cpc	r1, r26
    1f20:	1b 06       	cpc	r1, r27
    1f22:	2c f7       	brge	.-54     	; 0x1eee <__vector_7+0x86>
    1f24:	30 97       	sbiw	r30, 0x00	; 0
    1f26:	21 f1       	breq	.+72     	; 0x1f70 <__vector_7+0x108>
    1f28:	82 81       	ldd	r24, Z+2	; 0x02
    1f2a:	93 81       	ldd	r25, Z+3	; 0x03
    1f2c:	a4 81       	ldd	r26, Z+4	; 0x04
    1f2e:	b5 81       	ldd	r27, Z+5	; 0x05
    1f30:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <__data_end>
    1f34:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <__data_end+0x1>
    1f38:	2a 17       	cp	r18, r26
    1f3a:	3b 07       	cpc	r19, r27
    1f3c:	c9 f4       	brne	.+50     	; 0x1f70 <__vector_7+0x108>
    1f3e:	9c 01       	movw	r18, r24
    1f40:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1f44:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1f48:	84 1b       	sub	r24, r20
    1f4a:	95 0b       	sbc	r25, r21
    1f4c:	01 97       	sbiw	r24, 0x01	; 1
    1f4e:	31 f4       	brne	.+12     	; 0x1f5c <__vector_7+0xf4>
    1f50:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1f54:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1f58:	2f 5f       	subi	r18, 0xFF	; 255
    1f5a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f5c:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1f60:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1f64:	ef e6       	ldi	r30, 0x6F	; 111
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	80 81       	ld	r24, Z
    1f6a:	82 60       	ori	r24, 0x02	; 2
    1f6c:	80 83       	st	Z, r24
    1f6e:	05 c0       	rjmp	.+10     	; 0x1f7a <__vector_7+0x112>
    1f70:	ef e6       	ldi	r30, 0x6F	; 111
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	80 81       	ld	r24, Z
    1f76:	8d 7f       	andi	r24, 0xFD	; 253
    1f78:	80 83       	st	Z, r24
    1f7a:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <schedule>
    1f7e:	ff 91       	pop	r31
    1f80:	ef 91       	pop	r30
    1f82:	bf 91       	pop	r27
    1f84:	af 91       	pop	r26
    1f86:	9f 91       	pop	r25
    1f88:	8f 91       	pop	r24
    1f8a:	7f 91       	pop	r23
    1f8c:	6f 91       	pop	r22
    1f8e:	5f 91       	pop	r21
    1f90:	4f 91       	pop	r20
    1f92:	3f 91       	pop	r19
    1f94:	2f 91       	pop	r18
    1f96:	ff 90       	pop	r15
    1f98:	ef 90       	pop	r14
    1f9a:	df 90       	pop	r13
    1f9c:	cf 90       	pop	r12
    1f9e:	0f 90       	pop	r0
    1fa0:	0f be       	out	0x3f, r0	; 63
    1fa2:	0f 90       	pop	r0
    1fa4:	1f 90       	pop	r1
    1fa6:	18 95       	reti

00001fa8 <async>:
    1fa8:	3f 92       	push	r3
    1faa:	4f 92       	push	r4
    1fac:	5f 92       	push	r5
    1fae:	6f 92       	push	r6
    1fb0:	7f 92       	push	r7
    1fb2:	8f 92       	push	r8
    1fb4:	9f 92       	push	r9
    1fb6:	af 92       	push	r10
    1fb8:	bf 92       	push	r11
    1fba:	cf 92       	push	r12
    1fbc:	df 92       	push	r13
    1fbe:	ef 92       	push	r14
    1fc0:	ff 92       	push	r15
    1fc2:	0f 93       	push	r16
    1fc4:	1f 93       	push	r17
    1fc6:	cf 93       	push	r28
    1fc8:	df 93       	push	r29
    1fca:	2b 01       	movw	r4, r22
    1fcc:	3c 01       	movw	r6, r24
    1fce:	49 01       	movw	r8, r18
    1fd0:	5a 01       	movw	r10, r20
    1fd2:	8f b7       	in	r24, 0x3f	; 63
    1fd4:	80 78       	andi	r24, 0x80	; 128
    1fd6:	38 2e       	mov	r3, r24
    1fd8:	f8 94       	cli
    1fda:	86 e0       	ldi	r24, 0x06	; 6
    1fdc:	91 e0       	ldi	r25, 0x01	; 1
    1fde:	0e 94 a4 06 	call	0xd48	; 0xd48 <dequeue>
    1fe2:	ec 01       	movw	r28, r24
    1fe4:	1b 87       	std	Y+11, r17	; 0x0b
    1fe6:	0a 87       	std	Y+10, r16	; 0x0a
    1fe8:	fd 86       	std	Y+13, r15	; 0x0d
    1fea:	ec 86       	std	Y+12, r14	; 0x0c
    1fec:	df 86       	std	Y+15, r13	; 0x0f
    1fee:	ce 86       	std	Y+14, r12	; 0x0e
    1ff0:	33 20       	and	r3, r3
    1ff2:	61 f0       	breq	.+24     	; 0x200c <async+0x64>
    1ff4:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1ff8:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1ffc:	02 80       	ldd	r0, Z+2	; 0x02
    1ffe:	f3 81       	ldd	r31, Z+3	; 0x03
    2000:	e0 2d       	mov	r30, r0
    2002:	82 81       	ldd	r24, Z+2	; 0x02
    2004:	93 81       	ldd	r25, Z+3	; 0x03
    2006:	a4 81       	ldd	r26, Z+4	; 0x04
    2008:	b5 81       	ldd	r27, Z+5	; 0x05
    200a:	08 c0       	rjmp	.+16     	; 0x201c <async+0x74>
    200c:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <timestamp>
    2010:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <timestamp+0x1>
    2014:	a0 91 38 01 	lds	r26, 0x0138	; 0x800138 <timestamp+0x2>
    2018:	b0 91 39 01 	lds	r27, 0x0139	; 0x800139 <timestamp+0x3>
    201c:	48 0e       	add	r4, r24
    201e:	59 1e       	adc	r5, r25
    2020:	6a 1e       	adc	r6, r26
    2022:	7b 1e       	adc	r7, r27
    2024:	4a 82       	std	Y+2, r4	; 0x02
    2026:	5b 82       	std	Y+3, r5	; 0x03
    2028:	6c 82       	std	Y+4, r6	; 0x04
    202a:	7d 82       	std	Y+5, r7	; 0x05
    202c:	18 14       	cp	r1, r8
    202e:	19 04       	cpc	r1, r9
    2030:	1a 04       	cpc	r1, r10
    2032:	1b 04       	cpc	r1, r11
    2034:	44 f0       	brlt	.+16     	; 0x2046 <async+0x9e>
    2036:	0f 2e       	mov	r0, r31
    2038:	88 24       	eor	r8, r8
    203a:	8a 94       	dec	r8
    203c:	98 2c       	mov	r9, r8
    203e:	a8 2c       	mov	r10, r8
    2040:	ff e7       	ldi	r31, 0x7F	; 127
    2042:	bf 2e       	mov	r11, r31
    2044:	f0 2d       	mov	r31, r0
    2046:	84 0c       	add	r8, r4
    2048:	95 1c       	adc	r9, r5
    204a:	a6 1c       	adc	r10, r6
    204c:	b7 1c       	adc	r11, r7
    204e:	8e 82       	std	Y+6, r8	; 0x06
    2050:	9f 82       	std	Y+7, r9	; 0x07
    2052:	a8 86       	std	Y+8, r10	; 0x08
    2054:	b9 86       	std	Y+9, r11	; 0x09
    2056:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <__data_end>
    205a:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <__data_end+0x1>
    205e:	c9 01       	movw	r24, r18
    2060:	03 2e       	mov	r0, r19
    2062:	00 0c       	add	r0, r0
    2064:	aa 0b       	sbc	r26, r26
    2066:	bb 0b       	sbc	r27, r27
    2068:	dc 01       	movw	r26, r24
    206a:	99 27       	eor	r25, r25
    206c:	88 27       	eor	r24, r24
    206e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    2072:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    2076:	60 e0       	ldi	r22, 0x00	; 0
    2078:	70 e0       	ldi	r23, 0x00	; 0
    207a:	84 2b       	or	r24, r20
    207c:	95 2b       	or	r25, r21
    207e:	a6 2b       	or	r26, r22
    2080:	b7 2b       	or	r27, r23
    2082:	b0 9b       	sbis	0x16, 0	; 22
    2084:	13 c0       	rjmp	.+38     	; 0x20ac <async+0x104>
    2086:	c9 01       	movw	r24, r18
    2088:	01 96       	adiw	r24, 0x01	; 1
    208a:	09 2e       	mov	r0, r25
    208c:	00 0c       	add	r0, r0
    208e:	aa 0b       	sbc	r26, r26
    2090:	bb 0b       	sbc	r27, r27
    2092:	dc 01       	movw	r26, r24
    2094:	99 27       	eor	r25, r25
    2096:	88 27       	eor	r24, r24
    2098:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    209c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    20a0:	60 e0       	ldi	r22, 0x00	; 0
    20a2:	70 e0       	ldi	r23, 0x00	; 0
    20a4:	84 2b       	or	r24, r20
    20a6:	95 2b       	or	r25, r21
    20a8:	a6 2b       	or	r26, r22
    20aa:	b7 2b       	or	r27, r23
    20ac:	48 1a       	sub	r4, r24
    20ae:	59 0a       	sbc	r5, r25
    20b0:	6a 0a       	sbc	r6, r26
    20b2:	7b 0a       	sbc	r7, r27
    20b4:	14 14       	cp	r1, r4
    20b6:	15 04       	cpc	r1, r5
    20b8:	16 04       	cpc	r1, r6
    20ba:	17 04       	cpc	r1, r7
    20bc:	ac f5       	brge	.+106    	; 0x2128 <async+0x180>
    20be:	6a e3       	ldi	r22, 0x3A	; 58
    20c0:	71 e0       	ldi	r23, 0x01	; 1
    20c2:	ce 01       	movw	r24, r28
    20c4:	0e 94 73 06 	call	0xce6	; 0xce6 <enqueueByBaseline>
    20c8:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <timerQ>
    20cc:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <timerQ+0x1>
    20d0:	30 97       	sbiw	r30, 0x00	; 0
    20d2:	21 f1       	breq	.+72     	; 0x211c <async+0x174>
    20d4:	82 81       	ldd	r24, Z+2	; 0x02
    20d6:	93 81       	ldd	r25, Z+3	; 0x03
    20d8:	a4 81       	ldd	r26, Z+4	; 0x04
    20da:	b5 81       	ldd	r27, Z+5	; 0x05
    20dc:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <__data_end>
    20e0:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <__data_end+0x1>
    20e4:	2a 17       	cp	r18, r26
    20e6:	3b 07       	cpc	r19, r27
    20e8:	c9 f4       	brne	.+50     	; 0x211c <async+0x174>
    20ea:	9c 01       	movw	r18, r24
    20ec:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    20f0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    20f4:	84 1b       	sub	r24, r20
    20f6:	95 0b       	sbc	r25, r21
    20f8:	01 97       	sbiw	r24, 0x01	; 1
    20fa:	31 f4       	brne	.+12     	; 0x2108 <async+0x160>
    20fc:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    2100:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    2104:	2f 5f       	subi	r18, 0xFF	; 255
    2106:	3f 4f       	sbci	r19, 0xFF	; 255
    2108:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    210c:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    2110:	ef e6       	ldi	r30, 0x6F	; 111
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	80 81       	ld	r24, Z
    2116:	82 60       	ori	r24, 0x02	; 2
    2118:	80 83       	st	Z, r24
    211a:	39 c0       	rjmp	.+114    	; 0x218e <async+0x1e6>
    211c:	ef e6       	ldi	r30, 0x6F	; 111
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	80 81       	ld	r24, Z
    2122:	8d 7f       	andi	r24, 0xFD	; 253
    2124:	80 83       	st	Z, r24
    2126:	33 c0       	rjmp	.+102    	; 0x218e <async+0x1e6>
    2128:	6c e3       	ldi	r22, 0x3C	; 60
    212a:	71 e0       	ldi	r23, 0x01	; 1
    212c:	ce 01       	movw	r24, r28
    212e:	0e 94 42 06 	call	0xc84	; 0xc84 <enqueueByDeadline>
    2132:	33 20       	and	r3, r3
    2134:	61 f1       	breq	.+88     	; 0x218e <async+0x1e6>
    2136:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
    213a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
    213e:	89 2b       	or	r24, r25
    2140:	31 f1       	breq	.+76     	; 0x218e <async+0x1e6>
    2142:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <msgQ>
    2146:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <msgQ+0x1>
    214a:	86 81       	ldd	r24, Z+6	; 0x06
    214c:	97 81       	ldd	r25, Z+7	; 0x07
    214e:	a0 85       	ldd	r26, Z+8	; 0x08
    2150:	b1 85       	ldd	r27, Z+9	; 0x09
    2152:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
    2156:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
    215a:	02 80       	ldd	r0, Z+2	; 0x02
    215c:	f3 81       	ldd	r31, Z+3	; 0x03
    215e:	e0 2d       	mov	r30, r0
    2160:	46 81       	ldd	r20, Z+6	; 0x06
    2162:	57 81       	ldd	r21, Z+7	; 0x07
    2164:	60 85       	ldd	r22, Z+8	; 0x08
    2166:	71 85       	ldd	r23, Z+9	; 0x09
    2168:	84 1b       	sub	r24, r20
    216a:	95 0b       	sbc	r25, r21
    216c:	a6 0b       	sbc	r26, r22
    216e:	b7 0b       	sbc	r27, r23
    2170:	72 f4       	brpl	.+28     	; 0x218e <async+0x1e6>
    2172:	84 e0       	ldi	r24, 0x04	; 4
    2174:	91 e0       	ldi	r25, 0x01	; 1
    2176:	0e 94 cf 06 	call	0xd9e	; 0xd9e <pop>
    217a:	62 e0       	ldi	r22, 0x02	; 2
    217c:	71 e0       	ldi	r23, 0x01	; 1
    217e:	0e 94 c5 06 	call	0xd8a	; 0xd8a <push>
    2182:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <activeStack>
    2186:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <activeStack+0x1>
    218a:	0e 94 22 06 	call	0xc44	; 0xc44 <dispatch>
    218e:	33 20       	and	r3, r3
    2190:	09 f0       	breq	.+2      	; 0x2194 <async+0x1ec>
    2192:	78 94       	sei
    2194:	ce 01       	movw	r24, r28
    2196:	df 91       	pop	r29
    2198:	cf 91       	pop	r28
    219a:	1f 91       	pop	r17
    219c:	0f 91       	pop	r16
    219e:	ff 90       	pop	r15
    21a0:	ef 90       	pop	r14
    21a2:	df 90       	pop	r13
    21a4:	cf 90       	pop	r12
    21a6:	bf 90       	pop	r11
    21a8:	af 90       	pop	r10
    21aa:	9f 90       	pop	r9
    21ac:	8f 90       	pop	r8
    21ae:	7f 90       	pop	r7
    21b0:	6f 90       	pop	r6
    21b2:	5f 90       	pop	r5
    21b4:	4f 90       	pop	r4
    21b6:	3f 90       	pop	r3
    21b8:	08 95       	ret

000021ba <sync>:
    21ba:	cf 92       	push	r12
    21bc:	df 92       	push	r13
    21be:	ef 92       	push	r14
    21c0:	ff 92       	push	r15
    21c2:	0f 93       	push	r16
    21c4:	1f 93       	push	r17
    21c6:	cf 93       	push	r28
    21c8:	df 93       	push	r29
    21ca:	ec 01       	movw	r28, r24
    21cc:	7b 01       	movw	r14, r22
    21ce:	6a 01       	movw	r12, r20
    21d0:	1f b7       	in	r17, 0x3f	; 63
    21d2:	10 78       	andi	r17, 0x80	; 128
    21d4:	f8 94       	cli
    21d6:	a8 81       	ld	r26, Y
    21d8:	b9 81       	ldd	r27, Y+1	; 0x01
    21da:	10 97       	sbiw	r26, 0x00	; 0
    21dc:	19 f4       	brne	.+6      	; 0x21e4 <sync+0x2a>
    21de:	35 c0       	rjmp	.+106    	; 0x224a <sync+0x90>
    21e0:	a0 81       	ld	r26, Z
    21e2:	b1 81       	ldd	r27, Z+1	; 0x01
    21e4:	14 96       	adiw	r26, 0x04	; 4
    21e6:	ed 91       	ld	r30, X+
    21e8:	fc 91       	ld	r31, X
    21ea:	15 97       	sbiw	r26, 0x05	; 5
    21ec:	30 97       	sbiw	r30, 0x00	; 0
    21ee:	c1 f7       	brne	.-16     	; 0x21e0 <sync+0x26>
    21f0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    21f4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    21f8:	a2 17       	cp	r26, r18
    21fa:	b3 07       	cpc	r27, r19
    21fc:	11 f0       	breq	.+4      	; 0x2202 <sync+0x48>
    21fe:	11 11       	cpse	r17, r1
    2200:	07 c0       	rjmp	.+14     	; 0x2210 <sync+0x56>
    2202:	11 23       	and	r17, r17
    2204:	09 f4       	brne	.+2      	; 0x2208 <sync+0x4e>
    2206:	4a c0       	rjmp	.+148    	; 0x229c <sync+0xe2>
    2208:	78 94       	sei
    220a:	8f ef       	ldi	r24, 0xFF	; 255
    220c:	9f ef       	ldi	r25, 0xFF	; 255
    220e:	4e c0       	rjmp	.+156    	; 0x22ac <sync+0xf2>
    2210:	8a 81       	ldd	r24, Y+2	; 0x02
    2212:	9b 81       	ldd	r25, Y+3	; 0x03
    2214:	00 97       	sbiw	r24, 0x00	; 0
    2216:	19 f0       	breq	.+6      	; 0x221e <sync+0x64>
    2218:	fc 01       	movw	r30, r24
    221a:	15 82       	std	Z+5, r1	; 0x05
    221c:	14 82       	std	Z+4, r1	; 0x04
    221e:	3b 83       	std	Y+3, r19	; 0x03
    2220:	2a 83       	std	Y+2, r18	; 0x02
    2222:	f9 01       	movw	r30, r18
    2224:	d5 83       	std	Z+5, r29	; 0x05
    2226:	c4 83       	std	Z+4, r28	; 0x04
    2228:	cd 01       	movw	r24, r26
    222a:	0e 94 22 06 	call	0xc44	; 0xc44 <dispatch>
    222e:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2232:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2236:	82 81       	ldd	r24, Z+2	; 0x02
    2238:	93 81       	ldd	r25, Z+3	; 0x03
    223a:	89 2b       	or	r24, r25
    223c:	31 f4       	brne	.+12     	; 0x224a <sync+0x90>
    223e:	11 23       	and	r17, r17
    2240:	81 f1       	breq	.+96     	; 0x22a2 <sync+0xe8>
    2242:	78 94       	sei
    2244:	80 e0       	ldi	r24, 0x00	; 0
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	31 c0       	rjmp	.+98     	; 0x22ac <sync+0xf2>
    224a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    224e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2252:	99 83       	std	Y+1, r25	; 0x01
    2254:	88 83       	st	Y, r24
    2256:	11 23       	and	r17, r17
    2258:	29 f0       	breq	.+10     	; 0x2264 <sync+0xaa>
    225a:	8a 81       	ldd	r24, Y+2	; 0x02
    225c:	9b 81       	ldd	r25, Y+3	; 0x03
    225e:	01 97       	sbiw	r24, 0x01	; 1
    2260:	09 f0       	breq	.+2      	; 0x2264 <sync+0xaa>
    2262:	78 94       	sei
    2264:	b6 01       	movw	r22, r12
    2266:	ce 01       	movw	r24, r28
    2268:	f7 01       	movw	r30, r14
    226a:	09 95       	icall
    226c:	f8 2e       	mov	r15, r24
    226e:	09 2f       	mov	r16, r25
    2270:	8f b7       	in	r24, 0x3f	; 63
    2272:	f8 94       	cli
    2274:	19 82       	std	Y+1, r1	; 0x01
    2276:	18 82       	st	Y, r1
    2278:	8a 81       	ldd	r24, Y+2	; 0x02
    227a:	9b 81       	ldd	r25, Y+3	; 0x03
    227c:	82 30       	cpi	r24, 0x02	; 2
    227e:	91 05       	cpc	r25, r1
    2280:	38 f0       	brcs	.+14     	; 0x2290 <sync+0xd6>
    2282:	1b 82       	std	Y+3, r1	; 0x03
    2284:	1a 82       	std	Y+2, r1	; 0x02
    2286:	fc 01       	movw	r30, r24
    2288:	15 82       	std	Z+5, r1	; 0x05
    228a:	14 82       	std	Z+4, r1	; 0x04
    228c:	0e 94 22 06 	call	0xc44	; 0xc44 <dispatch>
    2290:	11 23       	and	r17, r17
    2292:	51 f0       	breq	.+20     	; 0x22a8 <sync+0xee>
    2294:	78 94       	sei
    2296:	8f 2d       	mov	r24, r15
    2298:	90 2f       	mov	r25, r16
    229a:	08 c0       	rjmp	.+16     	; 0x22ac <sync+0xf2>
    229c:	8f ef       	ldi	r24, 0xFF	; 255
    229e:	9f ef       	ldi	r25, 0xFF	; 255
    22a0:	05 c0       	rjmp	.+10     	; 0x22ac <sync+0xf2>
    22a2:	80 e0       	ldi	r24, 0x00	; 0
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	02 c0       	rjmp	.+4      	; 0x22ac <sync+0xf2>
    22a8:	8f 2d       	mov	r24, r15
    22aa:	90 2f       	mov	r25, r16
    22ac:	df 91       	pop	r29
    22ae:	cf 91       	pop	r28
    22b0:	1f 91       	pop	r17
    22b2:	0f 91       	pop	r16
    22b4:	ff 90       	pop	r15
    22b6:	ef 90       	pop	r14
    22b8:	df 90       	pop	r13
    22ba:	cf 90       	pop	r12
    22bc:	08 95       	ret

000022be <run>:
    22be:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    22c2:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    22c6:	8c e3       	ldi	r24, 0x3C	; 60
    22c8:	91 e0       	ldi	r25, 0x01	; 1
    22ca:	0e 94 a4 06 	call	0xd48	; 0xd48 <dequeue>
    22ce:	ec 01       	movw	r28, r24
    22d0:	f8 01       	movw	r30, r16
    22d2:	93 83       	std	Z+3, r25	; 0x03
    22d4:	82 83       	std	Z+2, r24	; 0x02
    22d6:	78 94       	sei
    22d8:	6c 85       	ldd	r22, Y+12	; 0x0c
    22da:	7d 85       	ldd	r23, Y+13	; 0x0d
    22dc:	4e 85       	ldd	r20, Y+14	; 0x0e
    22de:	5f 85       	ldd	r21, Y+15	; 0x0f
    22e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    22e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    22e4:	0e 94 dd 10 	call	0x21ba	; 0x21ba <sync>
    22e8:	8f b7       	in	r24, 0x3f	; 63
    22ea:	f8 94       	cli
    22ec:	66 e0       	ldi	r22, 0x06	; 6
    22ee:	71 e0       	ldi	r23, 0x01	; 1
    22f0:	ce 01       	movw	r24, r28
    22f2:	0e 94 bb 06 	call	0xd76	; 0xd76 <insert>
    22f6:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
    22fa:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
    22fe:	01 90       	ld	r0, Z+
    2300:	f0 81       	ld	r31, Z
    2302:	e0 2d       	mov	r30, r0
    2304:	c2 81       	ldd	r28, Z+2	; 0x02
    2306:	d3 81       	ldd	r29, Z+3	; 0x03
    2308:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <msgQ>
    230c:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <msgQ+0x1>
    2310:	30 97       	sbiw	r30, 0x00	; 0
    2312:	a1 f0       	breq	.+40     	; 0x233c <run+0x7e>
    2314:	20 97       	sbiw	r28, 0x00	; 0
    2316:	99 f2       	breq	.-90     	; 0x22be <run>
    2318:	86 81       	ldd	r24, Z+6	; 0x06
    231a:	97 81       	ldd	r25, Z+7	; 0x07
    231c:	a0 85       	ldd	r26, Z+8	; 0x08
    231e:	b1 85       	ldd	r27, Z+9	; 0x09
    2320:	4e 81       	ldd	r20, Y+6	; 0x06
    2322:	5f 81       	ldd	r21, Y+7	; 0x07
    2324:	68 85       	ldd	r22, Y+8	; 0x08
    2326:	79 85       	ldd	r23, Y+9	; 0x09
    2328:	84 1b       	sub	r24, r20
    232a:	95 0b       	sbc	r25, r21
    232c:	a6 0b       	sbc	r26, r22
    232e:	b7 0b       	sbc	r27, r23
    2330:	18 16       	cp	r1, r24
    2332:	19 06       	cpc	r1, r25
    2334:	1a 06       	cpc	r1, r26
    2336:	1b 06       	cpc	r1, r27
    2338:	0c f0       	brlt	.+2      	; 0x233c <run+0x7e>
    233a:	c1 cf       	rjmp	.-126    	; 0x22be <run>
    233c:	82 e0       	ldi	r24, 0x02	; 2
    233e:	91 e0       	ldi	r25, 0x01	; 1
    2340:	0e 94 cf 06 	call	0xd9e	; 0xd9e <pop>
    2344:	64 e0       	ldi	r22, 0x04	; 4
    2346:	71 e0       	ldi	r23, 0x01	; 1
    2348:	0e 94 c5 06 	call	0xd8a	; 0xd8a <push>
    234c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <activeStack>
    2350:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <activeStack+0x1>
    2354:	02 c0       	rjmp	.+4      	; 0x235a <run+0x9c>
    2356:	a0 81       	ld	r26, Z
    2358:	b1 81       	ldd	r27, Z+1	; 0x01
    235a:	14 96       	adiw	r26, 0x04	; 4
    235c:	ed 91       	ld	r30, X+
    235e:	fc 91       	ld	r31, X
    2360:	15 97       	sbiw	r26, 0x05	; 5
    2362:	30 97       	sbiw	r30, 0x00	; 0
    2364:	c1 f7       	brne	.-16     	; 0x2356 <run+0x98>
    2366:	cd 01       	movw	r24, r26
    2368:	0e 94 22 06 	call	0xc44	; 0xc44 <dispatch>
    236c:	a8 cf       	rjmp	.-176    	; 0x22be <run>

0000236e <ABORT>:
    236e:	1f 93       	push	r17
    2370:	cf 93       	push	r28
    2372:	df 93       	push	r29
    2374:	ec 01       	movw	r28, r24
    2376:	1f b7       	in	r17, 0x3f	; 63
    2378:	10 78       	andi	r17, 0x80	; 128
    237a:	f8 94       	cli
    237c:	6a e3       	ldi	r22, 0x3A	; 58
    237e:	71 e0       	ldi	r23, 0x01	; 1
    2380:	0e 94 5e 05 	call	0xabc	; 0xabc <remove>
    2384:	89 2b       	or	r24, r25
    2386:	39 f4       	brne	.+14     	; 0x2396 <ABORT+0x28>
    2388:	6c e3       	ldi	r22, 0x3C	; 60
    238a:	71 e0       	ldi	r23, 0x01	; 1
    238c:	ce 01       	movw	r24, r28
    238e:	0e 94 5e 05 	call	0xabc	; 0xabc <remove>
    2392:	89 2b       	or	r24, r25
    2394:	31 f0       	breq	.+12     	; 0x23a2 <ABORT+0x34>
    2396:	66 e0       	ldi	r22, 0x06	; 6
    2398:	71 e0       	ldi	r23, 0x01	; 1
    239a:	ce 01       	movw	r24, r28
    239c:	0e 94 bb 06 	call	0xd76	; 0xd76 <insert>
    23a0:	25 c0       	rjmp	.+74     	; 0x23ec <ABORT+0x7e>
    23a2:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
    23a6:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
    23aa:	1e c0       	rjmp	.+60     	; 0x23e8 <ABORT+0x7a>
    23ac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    23b0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    23b4:	e8 17       	cp	r30, r24
    23b6:	f9 07       	cpc	r31, r25
    23b8:	a1 f0       	breq	.+40     	; 0x23e2 <ABORT+0x74>
    23ba:	82 81       	ldd	r24, Z+2	; 0x02
    23bc:	93 81       	ldd	r25, Z+3	; 0x03
    23be:	c8 17       	cp	r28, r24
    23c0:	d9 07       	cpc	r29, r25
    23c2:	79 f4       	brne	.+30     	; 0x23e2 <ABORT+0x74>
    23c4:	24 81       	ldd	r18, Z+4	; 0x04
    23c6:	35 81       	ldd	r19, Z+5	; 0x05
    23c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    23ca:	9b 85       	ldd	r25, Y+11	; 0x0b
    23cc:	28 17       	cp	r18, r24
    23ce:	39 07       	cpc	r19, r25
    23d0:	41 f4       	brne	.+16     	; 0x23e2 <ABORT+0x74>
    23d2:	13 82       	std	Z+3, r1	; 0x03
    23d4:	12 82       	std	Z+2, r1	; 0x02
    23d6:	66 e0       	ldi	r22, 0x06	; 6
    23d8:	71 e0       	ldi	r23, 0x01	; 1
    23da:	ce 01       	movw	r24, r28
    23dc:	0e 94 bb 06 	call	0xd76	; 0xd76 <insert>
    23e0:	05 c0       	rjmp	.+10     	; 0x23ec <ABORT+0x7e>
    23e2:	01 90       	ld	r0, Z+
    23e4:	f0 81       	ld	r31, Z
    23e6:	e0 2d       	mov	r30, r0
    23e8:	30 97       	sbiw	r30, 0x00	; 0
    23ea:	01 f7       	brne	.-64     	; 0x23ac <ABORT+0x3e>
    23ec:	11 23       	and	r17, r17
    23ee:	09 f0       	breq	.+2      	; 0x23f2 <ABORT+0x84>
    23f0:	78 94       	sei
    23f2:	df 91       	pop	r29
    23f4:	cf 91       	pop	r28
    23f6:	1f 91       	pop	r17
    23f8:	08 95       	ret

000023fa <install>:
    thread0.msg = NULL;
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    23fa:	fc 01       	movw	r30, r24
    if (i >= 0 && i < N_VECTORS) {
    23fc:	42 31       	cpi	r20, 0x12	; 18
    23fe:	b8 f4       	brcc	.+46     	; 0x242e <install+0x34>
        char status;
        DISABLE(status);
    2400:	9f b7       	in	r25, 0x3f	; 63
    2402:	90 78       	andi	r25, 0x80	; 128
    2404:	f8 94       	cli
        otable[i] = obj;
    2406:	50 e0       	ldi	r21, 0x00	; 0
    2408:	44 0f       	add	r20, r20
    240a:	55 1f       	adc	r21, r21
    240c:	da 01       	movw	r26, r20
    240e:	a2 5c       	subi	r26, 0xC2	; 194
    2410:	be 4f       	sbci	r27, 0xFE	; 254
    2412:	ed 93       	st	X+, r30
    2414:	fc 93       	st	X, r31
        mtable[i] = m;
    2416:	da 01       	movw	r26, r20
    2418:	aa 52       	subi	r26, 0x2A	; 42
    241a:	be 4f       	sbci	r27, 0xFE	; 254
    241c:	6d 93       	st	X+, r22
    241e:	7c 93       	st	X, r23
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    2420:	21 e0       	ldi	r18, 0x01	; 1
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	33 83       	std	Z+3, r19	; 0x03
    2426:	22 83       	std	Z+2, r18	; 0x02
        ENABLE(status);
    2428:	99 23       	and	r25, r25
    242a:	09 f0       	breq	.+2      	; 0x242e <install+0x34>
    242c:	78 94       	sei
    242e:	08 95       	ret

00002430 <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    2430:	8c 01       	movw	r16, r24
    2432:	7b 01       	movw	r14, r22
    2434:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    2436:	8f b7       	in	r24, 0x3f	; 63
    2438:	f8 94       	cli
    initialize();
    243a:	0e 94 83 05 	call	0xb06	; 0xb06 <initialize>
    ENABLE(1);
    243e:	78 94       	sei
    if (m != NULL)
    2440:	e1 14       	cp	r14, r1
    2442:	f1 04       	cpc	r15, r1
    2444:	41 f0       	breq	.+16     	; 0x2456 <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    2446:	20 e0       	ldi	r18, 0x00	; 0
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	a9 01       	movw	r20, r18
    244c:	60 e0       	ldi	r22, 0x00	; 0
    244e:	70 e0       	ldi	r23, 0x00	; 0
    2450:	cb 01       	movw	r24, r22
    2452:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <async>
    DISABLE(status);
    2456:	8f b7       	in	r24, 0x3f	; 63
    2458:	f8 94       	cli
    idle();
    245a:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <idle>

0000245e <__divmodhi4>:
    245e:	97 fb       	bst	r25, 7
    2460:	07 2e       	mov	r0, r23
    2462:	16 f4       	brtc	.+4      	; 0x2468 <__divmodhi4+0xa>
    2464:	00 94       	com	r0
    2466:	07 d0       	rcall	.+14     	; 0x2476 <__divmodhi4_neg1>
    2468:	77 fd       	sbrc	r23, 7
    246a:	09 d0       	rcall	.+18     	; 0x247e <__divmodhi4_neg2>
    246c:	0e 94 4a 12 	call	0x2494	; 0x2494 <__udivmodhi4>
    2470:	07 fc       	sbrc	r0, 7
    2472:	05 d0       	rcall	.+10     	; 0x247e <__divmodhi4_neg2>
    2474:	3e f4       	brtc	.+14     	; 0x2484 <__divmodhi4_exit>

00002476 <__divmodhi4_neg1>:
    2476:	90 95       	com	r25
    2478:	81 95       	neg	r24
    247a:	9f 4f       	sbci	r25, 0xFF	; 255
    247c:	08 95       	ret

0000247e <__divmodhi4_neg2>:
    247e:	70 95       	com	r23
    2480:	61 95       	neg	r22
    2482:	7f 4f       	sbci	r23, 0xFF	; 255

00002484 <__divmodhi4_exit>:
    2484:	08 95       	ret

00002486 <__usmulhisi3>:
    2486:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__umulhisi3>

0000248a <__usmulhisi3_tail>:
    248a:	b7 ff       	sbrs	r27, 7
    248c:	08 95       	ret
    248e:	82 1b       	sub	r24, r18
    2490:	93 0b       	sbc	r25, r19
    2492:	08 95       	ret

00002494 <__udivmodhi4>:
    2494:	aa 1b       	sub	r26, r26
    2496:	bb 1b       	sub	r27, r27
    2498:	51 e1       	ldi	r21, 0x11	; 17
    249a:	07 c0       	rjmp	.+14     	; 0x24aa <__udivmodhi4_ep>

0000249c <__udivmodhi4_loop>:
    249c:	aa 1f       	adc	r26, r26
    249e:	bb 1f       	adc	r27, r27
    24a0:	a6 17       	cp	r26, r22
    24a2:	b7 07       	cpc	r27, r23
    24a4:	10 f0       	brcs	.+4      	; 0x24aa <__udivmodhi4_ep>
    24a6:	a6 1b       	sub	r26, r22
    24a8:	b7 0b       	sbc	r27, r23

000024aa <__udivmodhi4_ep>:
    24aa:	88 1f       	adc	r24, r24
    24ac:	99 1f       	adc	r25, r25
    24ae:	5a 95       	dec	r21
    24b0:	a9 f7       	brne	.-22     	; 0x249c <__udivmodhi4_loop>
    24b2:	80 95       	com	r24
    24b4:	90 95       	com	r25
    24b6:	bc 01       	movw	r22, r24
    24b8:	cd 01       	movw	r24, r26
    24ba:	08 95       	ret

000024bc <__umulhisi3>:
    24bc:	a2 9f       	mul	r26, r18
    24be:	b0 01       	movw	r22, r0
    24c0:	b3 9f       	mul	r27, r19
    24c2:	c0 01       	movw	r24, r0
    24c4:	a3 9f       	mul	r26, r19
    24c6:	70 0d       	add	r23, r0
    24c8:	81 1d       	adc	r24, r1
    24ca:	11 24       	eor	r1, r1
    24cc:	91 1d       	adc	r25, r1
    24ce:	b2 9f       	mul	r27, r18
    24d0:	70 0d       	add	r23, r0
    24d2:	81 1d       	adc	r24, r1
    24d4:	11 24       	eor	r1, r1
    24d6:	91 1d       	adc	r25, r1
    24d8:	08 95       	ret

000024da <setjmp>:
    24da:	dc 01       	movw	r26, r24
    24dc:	2d 92       	st	X+, r2
    24de:	3d 92       	st	X+, r3
    24e0:	4d 92       	st	X+, r4
    24e2:	5d 92       	st	X+, r5
    24e4:	6d 92       	st	X+, r6
    24e6:	7d 92       	st	X+, r7
    24e8:	8d 92       	st	X+, r8
    24ea:	9d 92       	st	X+, r9
    24ec:	ad 92       	st	X+, r10
    24ee:	bd 92       	st	X+, r11
    24f0:	cd 92       	st	X+, r12
    24f2:	dd 92       	st	X+, r13
    24f4:	ed 92       	st	X+, r14
    24f6:	fd 92       	st	X+, r15
    24f8:	0d 93       	st	X+, r16
    24fa:	1d 93       	st	X+, r17
    24fc:	cd 93       	st	X+, r28
    24fe:	dd 93       	st	X+, r29
    2500:	ff 91       	pop	r31
    2502:	ef 91       	pop	r30
    2504:	8d b7       	in	r24, 0x3d	; 61
    2506:	8d 93       	st	X+, r24
    2508:	8e b7       	in	r24, 0x3e	; 62
    250a:	8d 93       	st	X+, r24
    250c:	8f b7       	in	r24, 0x3f	; 63
    250e:	8d 93       	st	X+, r24
    2510:	ed 93       	st	X+, r30
    2512:	fd 93       	st	X+, r31
    2514:	88 27       	eor	r24, r24
    2516:	99 27       	eor	r25, r25
    2518:	09 94       	ijmp

0000251a <longjmp>:
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	81 30       	cpi	r24, 0x01	; 1
    2520:	91 05       	cpc	r25, r1
    2522:	81 1d       	adc	r24, r1
    2524:	2d 90       	ld	r2, X+
    2526:	3d 90       	ld	r3, X+
    2528:	4d 90       	ld	r4, X+
    252a:	5d 90       	ld	r5, X+
    252c:	6d 90       	ld	r6, X+
    252e:	7d 90       	ld	r7, X+
    2530:	8d 90       	ld	r8, X+
    2532:	9d 90       	ld	r9, X+
    2534:	ad 90       	ld	r10, X+
    2536:	bd 90       	ld	r11, X+
    2538:	cd 90       	ld	r12, X+
    253a:	dd 90       	ld	r13, X+
    253c:	ed 90       	ld	r14, X+
    253e:	fd 90       	ld	r15, X+
    2540:	0d 91       	ld	r16, X+
    2542:	1d 91       	ld	r17, X+
    2544:	cd 91       	ld	r28, X+
    2546:	dd 91       	ld	r29, X+
    2548:	ed 91       	ld	r30, X+
    254a:	fd 91       	ld	r31, X+
    254c:	0d 90       	ld	r0, X+
    254e:	f8 94       	cli
    2550:	fe bf       	out	0x3e, r31	; 62
    2552:	0f be       	out	0x3f, r0	; 63
    2554:	ed bf       	out	0x3d, r30	; 61
    2556:	ed 91       	ld	r30, X+
    2558:	fd 91       	ld	r31, X+
    255a:	09 94       	ijmp

0000255c <_exit>:
    255c:	f8 94       	cli

0000255e <__stop_program>:
    255e:	ff cf       	rjmp	.-2      	; 0x255e <__stop_program>
