
D0003E-lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  00002452  000024e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002452  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000353  00800134  00800134  0000251a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000251a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000254c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c8  00000000  00000000  0000258c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000035b5  00000000  00000000  00002854  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001287  00000000  00000000  00005e09  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000182d  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e14  00000000  00000000  000088c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a84  00000000  00000000  000096d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002c2a  00000000  00000000  0000a158  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000268  00000000  00000000  0000cd82  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 cc 06 	jmp	0xd98	; 0xd98 <__vector_1>
       8:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__vector_2>
       c:	0c 94 aa 07 	jmp	0xf54	; 0xf54 <__vector_3>
      10:	0c 94 19 08 	jmp	0x1032	; 0x1032 <__vector_4>
      14:	0c 94 88 08 	jmp	0x1110	; 0x1110 <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 f3 0e 	jmp	0x1de6	; 0x1de6 <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 a1 0e 	jmp	0x1d42	; 0x1d42 <__vector_9>
      28:	0c 94 f7 08 	jmp	0x11ee	; 0x11ee <__vector_10>
      2c:	0c 94 66 09 	jmp	0x12cc	; 0x12cc <__vector_11>
      30:	0c 94 d5 09 	jmp	0x13aa	; 0x13aa <__vector_12>
      34:	0c 94 44 0a 	jmp	0x1488	; 0x1488 <__vector_13>
      38:	0c 94 b3 0a 	jmp	0x1566	; 0x1566 <__vector_14>
      3c:	0c 94 22 0b 	jmp	0x1644	; 0x1644 <__vector_15>
      40:	0c 94 91 0b 	jmp	0x1722	; 0x1722 <__vector_16>
      44:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__vector_17>
      48:	0c 94 6f 0c 	jmp	0x18de	; 0x18de <__vector_18>
      4c:	0c 94 de 0c 	jmp	0x19bc	; 0x19bc <__vector_19>
      50:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <__vector_20>
      54:	0c 94 bc 0d 	jmp	0x1b78	; 0x1b78 <__vector_21>
      58:	0c 94 2b 0e 	jmp	0x1c56	; 0x1c56 <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	e2 e5       	ldi	r30, 0x52	; 82
      70:	f4 e2       	ldi	r31, 0x24	; 36
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	a4 33       	cpi	r26, 0x34	; 52
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	24 e0       	ldi	r18, 0x04	; 4
      80:	a4 e3       	ldi	r26, 0x34	; 52
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	a7 38       	cpi	r26, 0x87	; 135
      8a:	b2 07       	cpc	r27, r18
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 a9 04 	call	0x952	; 0x952 <main>
      92:	0c 94 27 12 	jmp	0x244e	; 0x244e <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <writeBit>:

#include <avr/io.h>
#include "bitOp.h"

void writeBit(BitOp *self){                                 // Stops recursion if freq hits 0
	if (self->isRight) {
      9a:	fc 01       	movw	r30, r24
      9c:	84 81       	ldd	r24, Z+4	; 0x04
      9e:	95 81       	ldd	r25, Z+5	; 0x05
      a0:	89 2b       	or	r24, r25
      a2:	29 f0       	breq	.+10     	; 0xae <writeBit+0x14>
		PORTE ^= (1 << PE6);                    // This and the one below generates actual pulse
      a4:	9e b1       	in	r25, 0x0e	; 14
      a6:	80 e4       	ldi	r24, 0x40	; 64
      a8:	89 27       	eor	r24, r25
      aa:	8e b9       	out	0x0e, r24	; 14
      ac:	08 95       	ret
	}
	else {
		PORTE ^= (1 << PE4);
      ae:	9e b1       	in	r25, 0x0e	; 14
      b0:	80 e1       	ldi	r24, 0x10	; 16
      b2:	89 27       	eor	r24, r25
      b4:	8e b9       	out	0x0e, r24	; 14
      b6:	08 95       	ret

000000b8 <updateDisplay>:
#include "bitOp.h"
#include <avr/io.h>


// Updates dispaly
void updateDisplay(Generators *self) {
      b8:	cf 92       	push	r12
      ba:	df 92       	push	r13
      bc:	ef 92       	push	r14
      be:	ff 92       	push	r15
      c0:	0f 93       	push	r16
      c2:	1f 93       	push	r17
      c4:	fc 01       	movw	r30, r24
	if (self->isRight) {
      c6:	82 85       	ldd	r24, Z+10	; 0x0a
      c8:	93 85       	ldd	r25, Z+11	; 0x0b
      ca:	89 2b       	or	r24, r25
      cc:	09 f1       	breq	.+66     	; 0x110 <updateDisplay+0x58>
		ASYNC(self->lcd, printAt, self->currentFreq*10 + 4);
      ce:	84 81       	ldd	r24, Z+4	; 0x04
      d0:	95 81       	ldd	r25, Z+5	; 0x05
      d2:	6c 01       	movw	r12, r24
      d4:	cc 0c       	add	r12, r12
      d6:	dd 1c       	adc	r13, r13
      d8:	88 0f       	add	r24, r24
      da:	99 1f       	adc	r25, r25
      dc:	88 0f       	add	r24, r24
      de:	99 1f       	adc	r25, r25
      e0:	88 0f       	add	r24, r24
      e2:	99 1f       	adc	r25, r25
      e4:	c8 0e       	add	r12, r24
      e6:	d9 1e       	adc	r13, r25
      e8:	04 85       	ldd	r16, Z+12	; 0x0c
      ea:	15 85       	ldd	r17, Z+13	; 0x0d
      ec:	84 e0       	ldi	r24, 0x04	; 4
      ee:	c8 0e       	add	r12, r24
      f0:	d1 1c       	adc	r13, r1
      f2:	0f 2e       	mov	r0, r31
      f4:	fc e7       	ldi	r31, 0x7C	; 124
      f6:	ef 2e       	mov	r14, r31
      f8:	f4 e0       	ldi	r31, 0x04	; 4
      fa:	ff 2e       	mov	r15, r31
      fc:	f0 2d       	mov	r31, r0
      fe:	20 e0       	ldi	r18, 0x00	; 0
     100:	30 e0       	ldi	r19, 0x00	; 0
     102:	a9 01       	movw	r20, r18
     104:	60 e0       	ldi	r22, 0x00	; 0
     106:	70 e0       	ldi	r23, 0x00	; 0
     108:	cb 01       	movw	r24, r22
     10a:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <async>
     10e:	1d c0       	rjmp	.+58     	; 0x14a <updateDisplay+0x92>
	}
	else {
		ASYNC(self->lcd, printAt, self->currentFreq*10);
     110:	24 81       	ldd	r18, Z+4	; 0x04
     112:	35 81       	ldd	r19, Z+5	; 0x05
     114:	04 85       	ldd	r16, Z+12	; 0x0c
     116:	15 85       	ldd	r17, Z+13	; 0x0d
     118:	69 01       	movw	r12, r18
     11a:	cc 0c       	add	r12, r12
     11c:	dd 1c       	adc	r13, r13
     11e:	22 0f       	add	r18, r18
     120:	33 1f       	adc	r19, r19
     122:	22 0f       	add	r18, r18
     124:	33 1f       	adc	r19, r19
     126:	22 0f       	add	r18, r18
     128:	33 1f       	adc	r19, r19
     12a:	c2 0e       	add	r12, r18
     12c:	d3 1e       	adc	r13, r19
     12e:	0f 2e       	mov	r0, r31
     130:	fc e7       	ldi	r31, 0x7C	; 124
     132:	ef 2e       	mov	r14, r31
     134:	f4 e0       	ldi	r31, 0x04	; 4
     136:	ff 2e       	mov	r15, r31
     138:	f0 2d       	mov	r31, r0
     13a:	20 e0       	ldi	r18, 0x00	; 0
     13c:	30 e0       	ldi	r19, 0x00	; 0
     13e:	a9 01       	movw	r20, r18
     140:	60 e0       	ldi	r22, 0x00	; 0
     142:	70 e0       	ldi	r23, 0x00	; 0
     144:	cb 01       	movw	r24, r22
     146:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <async>
    }
}
     14a:	1f 91       	pop	r17
     14c:	0f 91       	pop	r16
     14e:	ff 90       	pop	r15
     150:	ef 90       	pop	r14
     152:	df 90       	pop	r13
     154:	cf 90       	pop	r12
     156:	08 95       	ret

00000158 <generatePulse>:
        self->currentFreq = self->storedFreq;
		ASYNC(self, updateDisplay, NULL);
    }
}

void generatePulse(Generators *self){
     158:	cf 92       	push	r12
     15a:	df 92       	push	r13
     15c:	ef 92       	push	r14
     15e:	ff 92       	push	r15
     160:	0f 93       	push	r16
     162:	1f 93       	push	r17
     164:	cf 93       	push	r28
     166:	df 93       	push	r29
     168:	ec 01       	movw	r28, r24
    if (self->currentFreq != 0 || self->risingEdge){
     16a:	8c 81       	ldd	r24, Y+4	; 0x04
     16c:	9d 81       	ldd	r25, Y+5	; 0x05
     16e:	89 2b       	or	r24, r25
     170:	29 f4       	brne	.+10     	; 0x17c <generatePulse+0x24>
     172:	88 85       	ldd	r24, Y+8	; 0x08
     174:	99 85       	ldd	r25, Y+9	; 0x09
     176:	89 2b       	or	r24, r25
     178:	09 f4       	brne	.+2      	; 0x17c <generatePulse+0x24>
     17a:	40 c0       	rjmp	.+128    	; 0x1fc <generatePulse+0xa4>
        ASYNC(self->bitOp, writeBit, NULL);
     17c:	0e 85       	ldd	r16, Y+14	; 0x0e
     17e:	1f 85       	ldd	r17, Y+15	; 0x0f
     180:	c1 2c       	mov	r12, r1
     182:	d1 2c       	mov	r13, r1
     184:	0f 2e       	mov	r0, r31
     186:	fd e4       	ldi	r31, 0x4D	; 77
     188:	ef 2e       	mov	r14, r31
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	ff 2e       	mov	r15, r31
     18e:	f0 2d       	mov	r31, r0
     190:	20 e0       	ldi	r18, 0x00	; 0
     192:	30 e0       	ldi	r19, 0x00	; 0
     194:	a9 01       	movw	r20, r18
     196:	60 e0       	ldi	r22, 0x00	; 0
     198:	70 e0       	ldi	r23, 0x00	; 0
     19a:	cb 01       	movw	r24, r22
     19c:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <async>
		self->risingEdge ^= (self->risingEdge);
     1a0:	19 86       	std	Y+9, r1	; 0x09
     1a2:	18 86       	std	Y+8, r1	; 0x08
		AFTER(MSEC(500/self->currentFreq), self, generatePulse, NULL);
     1a4:	6c 81       	ldd	r22, Y+4	; 0x04
     1a6:	7d 81       	ldd	r23, Y+5	; 0x05
     1a8:	84 ef       	ldi	r24, 0xF4	; 244
     1aa:	91 e0       	ldi	r25, 0x01	; 1
     1ac:	0e 94 a8 11 	call	0x2350	; 0x2350 <__divmodhi4>
     1b0:	2d e7       	ldi	r18, 0x7D	; 125
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	db 01       	movw	r26, r22
     1b6:	0e 94 bc 11 	call	0x2378	; 0x2378 <__usmulhisi3>
     1ba:	8b 01       	movw	r16, r22
     1bc:	9c 01       	movw	r18, r24
     1be:	99 23       	and	r25, r25
     1c0:	24 f4       	brge	.+8      	; 0x1ca <generatePulse+0x72>
     1c2:	0d 5f       	subi	r16, 0xFD	; 253
     1c4:	1f 4f       	sbci	r17, 0xFF	; 255
     1c6:	2f 4f       	sbci	r18, 0xFF	; 255
     1c8:	3f 4f       	sbci	r19, 0xFF	; 255
     1ca:	c9 01       	movw	r24, r18
     1cc:	b8 01       	movw	r22, r16
     1ce:	95 95       	asr	r25
     1d0:	87 95       	ror	r24
     1d2:	77 95       	ror	r23
     1d4:	67 95       	ror	r22
     1d6:	95 95       	asr	r25
     1d8:	87 95       	ror	r24
     1da:	77 95       	ror	r23
     1dc:	67 95       	ror	r22
     1de:	c1 2c       	mov	r12, r1
     1e0:	d1 2c       	mov	r13, r1
     1e2:	0f 2e       	mov	r0, r31
     1e4:	fc ea       	ldi	r31, 0xAC	; 172
     1e6:	ef 2e       	mov	r14, r31
     1e8:	f0 e0       	ldi	r31, 0x00	; 0
     1ea:	ff 2e       	mov	r15, r31
     1ec:	f0 2d       	mov	r31, r0
     1ee:	8e 01       	movw	r16, r28
     1f0:	20 e0       	ldi	r18, 0x00	; 0
     1f2:	30 e0       	ldi	r19, 0x00	; 0
     1f4:	a9 01       	movw	r20, r18
     1f6:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <async>
     1fa:	14 c0       	rjmp	.+40     	; 0x224 <__EEPROM_REGION_LENGTH__+0x24>
    }
	else{
    self->risingEdge ^= (self->risingEdge);
     1fc:	19 86       	std	Y+9, r1	; 0x09
     1fe:	18 86       	std	Y+8, r1	; 0x08
    AFTER(MSEC(500), self, generatePulse, NULL);
     200:	c1 2c       	mov	r12, r1
     202:	d1 2c       	mov	r13, r1
     204:	0f 2e       	mov	r0, r31
     206:	fc ea       	ldi	r31, 0xAC	; 172
     208:	ef 2e       	mov	r14, r31
     20a:	f0 e0       	ldi	r31, 0x00	; 0
     20c:	ff 2e       	mov	r15, r31
     20e:	f0 2d       	mov	r31, r0
     210:	8e 01       	movw	r16, r28
     212:	20 e0       	ldi	r18, 0x00	; 0
     214:	30 e0       	ldi	r19, 0x00	; 0
     216:	a9 01       	movw	r20, r18
     218:	69 e0       	ldi	r22, 0x09	; 9
     21a:	7d e3       	ldi	r23, 0x3D	; 61
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <async>
	}
     224:	df 91       	pop	r29
     226:	cf 91       	pop	r28
     228:	1f 91       	pop	r17
     22a:	0f 91       	pop	r16
     22c:	ff 90       	pop	r15
     22e:	ef 90       	pop	r14
     230:	df 90       	pop	r13
     232:	cf 90       	pop	r12
     234:	08 95       	ret

00000236 <increase>:
		ASYNC(self->lcd, printAt, self->currentFreq*10);
    }
}

// Increases frequency
void increase(Generators *self) {
     236:	cf 92       	push	r12
     238:	df 92       	push	r13
     23a:	ef 92       	push	r14
     23c:	ff 92       	push	r15
     23e:	0f 93       	push	r16
     240:	1f 93       	push	r17
	if (self->currentFreq != 99){
     242:	fc 01       	movw	r30, r24
     244:	24 81       	ldd	r18, Z+4	; 0x04
     246:	35 81       	ldd	r19, Z+5	; 0x05
     248:	23 36       	cpi	r18, 0x63	; 99
     24a:	31 05       	cpc	r19, r1
     24c:	a9 f0       	breq	.+42     	; 0x278 <increase+0x42>
     24e:	8c 01       	movw	r16, r24
		self->currentFreq++;
     250:	2f 5f       	subi	r18, 0xFF	; 255
     252:	3f 4f       	sbci	r19, 0xFF	; 255
     254:	35 83       	std	Z+5, r19	; 0x05
     256:	24 83       	std	Z+4, r18	; 0x04
		ASYNC(self, updateDisplay, NULL);
     258:	c1 2c       	mov	r12, r1
     25a:	d1 2c       	mov	r13, r1
     25c:	0f 2e       	mov	r0, r31
     25e:	fc e5       	ldi	r31, 0x5C	; 92
     260:	ef 2e       	mov	r14, r31
     262:	f0 e0       	ldi	r31, 0x00	; 0
     264:	ff 2e       	mov	r15, r31
     266:	f0 2d       	mov	r31, r0
     268:	20 e0       	ldi	r18, 0x00	; 0
     26a:	30 e0       	ldi	r19, 0x00	; 0
     26c:	a9 01       	movw	r20, r18
     26e:	60 e0       	ldi	r22, 0x00	; 0
     270:	70 e0       	ldi	r23, 0x00	; 0
     272:	cb 01       	movw	r24, r22
     274:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <async>
	}   
}
     278:	1f 91       	pop	r17
     27a:	0f 91       	pop	r16
     27c:	ff 90       	pop	r15
     27e:	ef 90       	pop	r14
     280:	df 90       	pop	r13
     282:	cf 90       	pop	r12
     284:	08 95       	ret

00000286 <decrease>:

// The thing that happens when pulling joystick down
void decrease(Generators *self) {
     286:	cf 92       	push	r12
     288:	df 92       	push	r13
     28a:	ef 92       	push	r14
     28c:	ff 92       	push	r15
     28e:	0f 93       	push	r16
     290:	1f 93       	push	r17
    if (self->currentFreq > 0) {
     292:	fc 01       	movw	r30, r24
     294:	24 81       	ldd	r18, Z+4	; 0x04
     296:	35 81       	ldd	r19, Z+5	; 0x05
     298:	12 16       	cp	r1, r18
     29a:	13 06       	cpc	r1, r19
     29c:	ac f4       	brge	.+42     	; 0x2c8 <decrease+0x42>
     29e:	8c 01       	movw	r16, r24
        self->currentFreq--;
     2a0:	21 50       	subi	r18, 0x01	; 1
     2a2:	31 09       	sbc	r19, r1
     2a4:	35 83       	std	Z+5, r19	; 0x05
     2a6:	24 83       	std	Z+4, r18	; 0x04
        ASYNC(self, updateDisplay, NULL);
     2a8:	c1 2c       	mov	r12, r1
     2aa:	d1 2c       	mov	r13, r1
     2ac:	0f 2e       	mov	r0, r31
     2ae:	fc e5       	ldi	r31, 0x5C	; 92
     2b0:	ef 2e       	mov	r14, r31
     2b2:	f0 e0       	ldi	r31, 0x00	; 0
     2b4:	ff 2e       	mov	r15, r31
     2b6:	f0 2d       	mov	r31, r0
     2b8:	20 e0       	ldi	r18, 0x00	; 0
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	a9 01       	movw	r20, r18
     2be:	60 e0       	ldi	r22, 0x00	; 0
     2c0:	70 e0       	ldi	r23, 0x00	; 0
     2c2:	cb 01       	movw	r24, r22
     2c4:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <async>
        // Uppdatara frekvens (osäker om man ska calla SYNC eller ASYNC)
    }
}
     2c8:	1f 91       	pop	r17
     2ca:	0f 91       	pop	r16
     2cc:	ff 90       	pop	r15
     2ce:	ef 90       	pop	r14
     2d0:	df 90       	pop	r13
     2d2:	cf 90       	pop	r12
     2d4:	08 95       	ret

000002d6 <press>:

// The thing that happens when pressing the joystick
void press(Generators *self) {
     2d6:	cf 92       	push	r12
     2d8:	df 92       	push	r13
     2da:	ef 92       	push	r14
     2dc:	ff 92       	push	r15
     2de:	0f 93       	push	r16
     2e0:	1f 93       	push	r17
     2e2:	fc 01       	movw	r30, r24
    if (self->currentFreq != 0) { // Maybe fix call later
     2e4:	84 81       	ldd	r24, Z+4	; 0x04
     2e6:	95 81       	ldd	r25, Z+5	; 0x05
     2e8:	00 97       	sbiw	r24, 0x00	; 0
     2ea:	b1 f0       	breq	.+44     	; 0x318 <press+0x42>
        self->storedFreq = self->currentFreq;
     2ec:	97 83       	std	Z+7, r25	; 0x07
     2ee:	86 83       	std	Z+6, r24	; 0x06
        self->currentFreq = 0;
     2f0:	15 82       	std	Z+5, r1	; 0x05
     2f2:	14 82       	std	Z+4, r1	; 0x04
		ASYNC(self, updateDisplay, NULL);
     2f4:	c1 2c       	mov	r12, r1
     2f6:	d1 2c       	mov	r13, r1
     2f8:	0f 2e       	mov	r0, r31
     2fa:	fc e5       	ldi	r31, 0x5C	; 92
     2fc:	ef 2e       	mov	r14, r31
     2fe:	f0 e0       	ldi	r31, 0x00	; 0
     300:	ff 2e       	mov	r15, r31
     302:	f0 2d       	mov	r31, r0
     304:	8f 01       	movw	r16, r30
     306:	20 e0       	ldi	r18, 0x00	; 0
     308:	30 e0       	ldi	r19, 0x00	; 0
     30a:	a9 01       	movw	r20, r18
     30c:	60 e0       	ldi	r22, 0x00	; 0
     30e:	70 e0       	ldi	r23, 0x00	; 0
     310:	cb 01       	movw	r24, r22
     312:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <async>
     316:	15 c0       	rjmp	.+42     	; 0x342 <press+0x6c>
    }
    else {
        self->currentFreq = self->storedFreq;
     318:	86 81       	ldd	r24, Z+6	; 0x06
     31a:	97 81       	ldd	r25, Z+7	; 0x07
     31c:	95 83       	std	Z+5, r25	; 0x05
     31e:	84 83       	std	Z+4, r24	; 0x04
		ASYNC(self, updateDisplay, NULL);
     320:	c1 2c       	mov	r12, r1
     322:	d1 2c       	mov	r13, r1
     324:	0f 2e       	mov	r0, r31
     326:	fc e5       	ldi	r31, 0x5C	; 92
     328:	ef 2e       	mov	r14, r31
     32a:	f0 e0       	ldi	r31, 0x00	; 0
     32c:	ff 2e       	mov	r15, r31
     32e:	f0 2d       	mov	r31, r0
     330:	8f 01       	movw	r16, r30
     332:	20 e0       	ldi	r18, 0x00	; 0
     334:	30 e0       	ldi	r19, 0x00	; 0
     336:	a9 01       	movw	r20, r18
     338:	60 e0       	ldi	r22, 0x00	; 0
     33a:	70 e0       	ldi	r23, 0x00	; 0
     33c:	cb 01       	movw	r24, r22
     33e:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <async>
    }
}
     342:	1f 91       	pop	r17
     344:	0f 91       	pop	r16
     346:	ff 90       	pop	r15
     348:	ef 90       	pop	r14
     34a:	df 90       	pop	r13
     34c:	cf 90       	pop	r12
     34e:	08 95       	ret

00000350 <increaseGui>:
#include <stdbool.h>
#include "Gui.h"


// NOTE: The main purpose of this object is to distinguish current display segment and call methods accordingly
void increaseGui(Gui *self) {
     350:	cf 92       	push	r12
     352:	df 92       	push	r13
     354:	ef 92       	push	r14
     356:	ff 92       	push	r15
     358:	0f 93       	push	r16
     35a:	1f 93       	push	r17
    if (self->isRight) {
     35c:	fc 01       	movw	r30, r24
     35e:	24 81       	ldd	r18, Z+4	; 0x04
     360:	35 81       	ldd	r19, Z+5	; 0x05
     362:	23 2b       	or	r18, r19
     364:	99 f0       	breq	.+38     	; 0x38c <increaseGui+0x3c>
        ASYNC(self->genR, increase, NULL);
     366:	00 85       	ldd	r16, Z+8	; 0x08
     368:	11 85       	ldd	r17, Z+9	; 0x09
     36a:	c1 2c       	mov	r12, r1
     36c:	d1 2c       	mov	r13, r1
     36e:	0f 2e       	mov	r0, r31
     370:	fb e1       	ldi	r31, 0x1B	; 27
     372:	ef 2e       	mov	r14, r31
     374:	f1 e0       	ldi	r31, 0x01	; 1
     376:	ff 2e       	mov	r15, r31
     378:	f0 2d       	mov	r31, r0
     37a:	20 e0       	ldi	r18, 0x00	; 0
     37c:	30 e0       	ldi	r19, 0x00	; 0
     37e:	a9 01       	movw	r20, r18
     380:	60 e0       	ldi	r22, 0x00	; 0
     382:	70 e0       	ldi	r23, 0x00	; 0
     384:	cb 01       	movw	r24, r22
     386:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <async>
     38a:	13 c0       	rjmp	.+38     	; 0x3b2 <increaseGui+0x62>
    }
    else {
        ASYNC(self->genL, increase, NULL);
     38c:	fc 01       	movw	r30, r24
     38e:	06 81       	ldd	r16, Z+6	; 0x06
     390:	17 81       	ldd	r17, Z+7	; 0x07
     392:	c1 2c       	mov	r12, r1
     394:	d1 2c       	mov	r13, r1
     396:	0f 2e       	mov	r0, r31
     398:	fb e1       	ldi	r31, 0x1B	; 27
     39a:	ef 2e       	mov	r14, r31
     39c:	f1 e0       	ldi	r31, 0x01	; 1
     39e:	ff 2e       	mov	r15, r31
     3a0:	f0 2d       	mov	r31, r0
     3a2:	20 e0       	ldi	r18, 0x00	; 0
     3a4:	30 e0       	ldi	r19, 0x00	; 0
     3a6:	a9 01       	movw	r20, r18
     3a8:	60 e0       	ldi	r22, 0x00	; 0
     3aa:	70 e0       	ldi	r23, 0x00	; 0
     3ac:	cb 01       	movw	r24, r22
     3ae:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <async>
    }
}
     3b2:	1f 91       	pop	r17
     3b4:	0f 91       	pop	r16
     3b6:	ff 90       	pop	r15
     3b8:	ef 90       	pop	r14
     3ba:	df 90       	pop	r13
     3bc:	cf 90       	pop	r12
     3be:	08 95       	ret

000003c0 <decreaseGui>:

void decreaseGui(Gui *self) {
     3c0:	cf 92       	push	r12
     3c2:	df 92       	push	r13
     3c4:	ef 92       	push	r14
     3c6:	ff 92       	push	r15
     3c8:	0f 93       	push	r16
     3ca:	1f 93       	push	r17
    if (self->isRight) {
     3cc:	fc 01       	movw	r30, r24
     3ce:	24 81       	ldd	r18, Z+4	; 0x04
     3d0:	35 81       	ldd	r19, Z+5	; 0x05
     3d2:	23 2b       	or	r18, r19
     3d4:	99 f0       	breq	.+38     	; 0x3fc <decreaseGui+0x3c>
        ASYNC(self->genR, decrease, NULL);
     3d6:	00 85       	ldd	r16, Z+8	; 0x08
     3d8:	11 85       	ldd	r17, Z+9	; 0x09
     3da:	c1 2c       	mov	r12, r1
     3dc:	d1 2c       	mov	r13, r1
     3de:	0f 2e       	mov	r0, r31
     3e0:	f3 e4       	ldi	r31, 0x43	; 67
     3e2:	ef 2e       	mov	r14, r31
     3e4:	f1 e0       	ldi	r31, 0x01	; 1
     3e6:	ff 2e       	mov	r15, r31
     3e8:	f0 2d       	mov	r31, r0
     3ea:	20 e0       	ldi	r18, 0x00	; 0
     3ec:	30 e0       	ldi	r19, 0x00	; 0
     3ee:	a9 01       	movw	r20, r18
     3f0:	60 e0       	ldi	r22, 0x00	; 0
     3f2:	70 e0       	ldi	r23, 0x00	; 0
     3f4:	cb 01       	movw	r24, r22
     3f6:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <async>
     3fa:	13 c0       	rjmp	.+38     	; 0x422 <__DATA_REGION_LENGTH__+0x22>
    }
    else {
        ASYNC(self->genL, printAt, NULL);
     3fc:	fc 01       	movw	r30, r24
     3fe:	06 81       	ldd	r16, Z+6	; 0x06
     400:	17 81       	ldd	r17, Z+7	; 0x07
     402:	c1 2c       	mov	r12, r1
     404:	d1 2c       	mov	r13, r1
     406:	0f 2e       	mov	r0, r31
     408:	fc e7       	ldi	r31, 0x7C	; 124
     40a:	ef 2e       	mov	r14, r31
     40c:	f4 e0       	ldi	r31, 0x04	; 4
     40e:	ff 2e       	mov	r15, r31
     410:	f0 2d       	mov	r31, r0
     412:	20 e0       	ldi	r18, 0x00	; 0
     414:	30 e0       	ldi	r19, 0x00	; 0
     416:	a9 01       	movw	r20, r18
     418:	60 e0       	ldi	r22, 0x00	; 0
     41a:	70 e0       	ldi	r23, 0x00	; 0
     41c:	cb 01       	movw	r24, r22
     41e:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <async>
    }
}
     422:	1f 91       	pop	r17
     424:	0f 91       	pop	r16
     426:	ff 90       	pop	r15
     428:	ef 90       	pop	r14
     42a:	df 90       	pop	r13
     42c:	cf 90       	pop	r12
     42e:	08 95       	ret

00000430 <switchGeneratorGui>:

void switchGeneratorGui(Gui *self) {
     430:	cf 92       	push	r12
     432:	df 92       	push	r13
     434:	ef 92       	push	r14
     436:	ff 92       	push	r15
     438:	0f 93       	push	r16
     43a:	1f 93       	push	r17
     43c:	cf 93       	push	r28
     43e:	df 93       	push	r29
     440:	ec 01       	movw	r28, r24
    ASYNC(self->lcd, switchSegment, NULL);
     442:	0a 85       	ldd	r16, Y+10	; 0x0a
     444:	1b 85       	ldd	r17, Y+11	; 0x0b
     446:	c1 2c       	mov	r12, r1
     448:	d1 2c       	mov	r13, r1
     44a:	0f 2e       	mov	r0, r31
     44c:	fe e6       	ldi	r31, 0x6E	; 110
     44e:	ef 2e       	mov	r14, r31
     450:	f4 e0       	ldi	r31, 0x04	; 4
     452:	ff 2e       	mov	r15, r31
     454:	f0 2d       	mov	r31, r0
     456:	20 e0       	ldi	r18, 0x00	; 0
     458:	30 e0       	ldi	r19, 0x00	; 0
     45a:	a9 01       	movw	r20, r18
     45c:	60 e0       	ldi	r22, 0x00	; 0
     45e:	70 e0       	ldi	r23, 0x00	; 0
     460:	cb 01       	movw	r24, r22
     462:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <async>
    self->isRight = !(self->isRight);
     466:	2c 81       	ldd	r18, Y+4	; 0x04
     468:	3d 81       	ldd	r19, Y+5	; 0x05
     46a:	81 e0       	ldi	r24, 0x01	; 1
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	23 2b       	or	r18, r19
     470:	11 f0       	breq	.+4      	; 0x476 <switchGeneratorGui+0x46>
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	9d 83       	std	Y+5, r25	; 0x05
     478:	8c 83       	std	Y+4, r24	; 0x04
}
     47a:	df 91       	pop	r29
     47c:	cf 91       	pop	r28
     47e:	1f 91       	pop	r17
     480:	0f 91       	pop	r16
     482:	ff 90       	pop	r15
     484:	ef 90       	pop	r14
     486:	df 90       	pop	r13
     488:	cf 90       	pop	r12
     48a:	08 95       	ret

0000048c <pressGui>:

void pressGui(Gui *self) {
     48c:	cf 92       	push	r12
     48e:	df 92       	push	r13
     490:	ef 92       	push	r14
     492:	ff 92       	push	r15
     494:	0f 93       	push	r16
     496:	1f 93       	push	r17
    if (self->isRight) {
     498:	fc 01       	movw	r30, r24
     49a:	24 81       	ldd	r18, Z+4	; 0x04
     49c:	35 81       	ldd	r19, Z+5	; 0x05
     49e:	23 2b       	or	r18, r19
     4a0:	99 f0       	breq	.+38     	; 0x4c8 <pressGui+0x3c>
        ASYNC(self->genR, press, NULL);
     4a2:	00 85       	ldd	r16, Z+8	; 0x08
     4a4:	11 85       	ldd	r17, Z+9	; 0x09
     4a6:	c1 2c       	mov	r12, r1
     4a8:	d1 2c       	mov	r13, r1
     4aa:	0f 2e       	mov	r0, r31
     4ac:	fb e6       	ldi	r31, 0x6B	; 107
     4ae:	ef 2e       	mov	r14, r31
     4b0:	f1 e0       	ldi	r31, 0x01	; 1
     4b2:	ff 2e       	mov	r15, r31
     4b4:	f0 2d       	mov	r31, r0
     4b6:	20 e0       	ldi	r18, 0x00	; 0
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	a9 01       	movw	r20, r18
     4bc:	60 e0       	ldi	r22, 0x00	; 0
     4be:	70 e0       	ldi	r23, 0x00	; 0
     4c0:	cb 01       	movw	r24, r22
     4c2:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <async>
     4c6:	13 c0       	rjmp	.+38     	; 0x4ee <pressGui+0x62>
    }
    else {
        ASYNC(self->genL, press, NULL);
     4c8:	fc 01       	movw	r30, r24
     4ca:	06 81       	ldd	r16, Z+6	; 0x06
     4cc:	17 81       	ldd	r17, Z+7	; 0x07
     4ce:	c1 2c       	mov	r12, r1
     4d0:	d1 2c       	mov	r13, r1
     4d2:	0f 2e       	mov	r0, r31
     4d4:	fb e6       	ldi	r31, 0x6B	; 107
     4d6:	ef 2e       	mov	r14, r31
     4d8:	f1 e0       	ldi	r31, 0x01	; 1
     4da:	ff 2e       	mov	r15, r31
     4dc:	f0 2d       	mov	r31, r0
     4de:	20 e0       	ldi	r18, 0x00	; 0
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	a9 01       	movw	r20, r18
     4e4:	60 e0       	ldi	r22, 0x00	; 0
     4e6:	70 e0       	ldi	r23, 0x00	; 0
     4e8:	cb 01       	movw	r24, r22
     4ea:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <async>
    }
}
     4ee:	1f 91       	pop	r17
     4f0:	0f 91       	pop	r16
     4f2:	ff 90       	pop	r15
     4f4:	ef 90       	pop	r14
     4f6:	df 90       	pop	r13
     4f8:	cf 90       	pop	r12
     4fa:	08 95       	ret

000004fc <start>:

void start(Gui *self){
     4fc:	cf 92       	push	r12
     4fe:	df 92       	push	r13
     500:	ef 92       	push	r14
     502:	ff 92       	push	r15
     504:	0f 93       	push	r16
     506:	1f 93       	push	r17
     508:	cf 93       	push	r28
     50a:	df 93       	push	r29
     50c:	ec 01       	movw	r28, r24
	ASYNC(self->genL, generatePulse, NULL);
     50e:	0e 81       	ldd	r16, Y+6	; 0x06
     510:	1f 81       	ldd	r17, Y+7	; 0x07
     512:	c1 2c       	mov	r12, r1
     514:	d1 2c       	mov	r13, r1
     516:	0f 2e       	mov	r0, r31
     518:	fc ea       	ldi	r31, 0xAC	; 172
     51a:	ef 2e       	mov	r14, r31
     51c:	f0 e0       	ldi	r31, 0x00	; 0
     51e:	ff 2e       	mov	r15, r31
     520:	f0 2d       	mov	r31, r0
     522:	20 e0       	ldi	r18, 0x00	; 0
     524:	30 e0       	ldi	r19, 0x00	; 0
     526:	a9 01       	movw	r20, r18
     528:	60 e0       	ldi	r22, 0x00	; 0
     52a:	70 e0       	ldi	r23, 0x00	; 0
     52c:	cb 01       	movw	r24, r22
     52e:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <async>
	ASYNC(self->genR, generatePulse, NULL);
     532:	08 85       	ldd	r16, Y+8	; 0x08
     534:	19 85       	ldd	r17, Y+9	; 0x09
     536:	20 e0       	ldi	r18, 0x00	; 0
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	a9 01       	movw	r20, r18
     53c:	60 e0       	ldi	r22, 0x00	; 0
     53e:	70 e0       	ldi	r23, 0x00	; 0
     540:	cb 01       	movw	r24, r22
     542:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <async>
     546:	df 91       	pop	r29
     548:	cf 91       	pop	r28
     54a:	1f 91       	pop	r17
     54c:	0f 91       	pop	r16
     54e:	ff 90       	pop	r15
     550:	ef 90       	pop	r14
     552:	df 90       	pop	r13
     554:	cf 90       	pop	r12
     556:	08 95       	ret

00000558 <Init>:
     558:	e1 e6       	ldi	r30, 0x61	; 97
     55a:	f0 e0       	ldi	r31, 0x00	; 0
     55c:	80 e8       	ldi	r24, 0x80	; 128
     55e:	80 83       	st	Z, r24
     560:	10 82       	st	Z, r1
     562:	9f e0       	ldi	r25, 0x0F	; 15
     564:	90 93 e7 00 	sts	0x00E7, r25	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
     568:	97 eb       	ldi	r25, 0xB7	; 183
     56a:	90 93 e5 00 	sts	0x00E5, r25	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
     56e:	97 e0       	ldi	r25, 0x07	; 7
     570:	90 93 e6 00 	sts	0x00E6, r25	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
     574:	90 ec       	ldi	r25, 0xC0	; 192
     576:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
     57a:	90 ed       	ldi	r25, 0xD0	; 208
     57c:	95 b9       	out	0x05, r25	; 5
     57e:	84 b9       	out	0x04, r24	; 4
     580:	8c e0       	ldi	r24, 0x0C	; 12
     582:	8e b9       	out	0x0e, r24	; 14
     584:	8d b9       	out	0x0d, r24	; 13
     586:	ec e6       	ldi	r30, 0x6C	; 108
     588:	f0 e0       	ldi	r31, 0x00	; 0
     58a:	80 81       	ld	r24, Z
     58c:	80 6d       	ori	r24, 0xD0	; 208
     58e:	80 83       	st	Z, r24
     590:	eb e6       	ldi	r30, 0x6B	; 107
     592:	f0 e0       	ldi	r31, 0x00	; 0
     594:	80 81       	ld	r24, Z
     596:	8c 60       	ori	r24, 0x0C	; 12
     598:	80 83       	st	Z, r24
     59a:	8d b3       	in	r24, 0x1d	; 29
     59c:	80 6c       	ori	r24, 0xC0	; 192
     59e:	8d bb       	out	0x1d, r24	; 29
     5a0:	08 95       	ret

000005a2 <FreqChange>:
#include <avr/io.h>
#include "InteruptHandler.h"
#include "TinyTimber.h"
#include "Joystick.h"

void FreqChange(InteruptHandler *self){
     5a2:	cf 92       	push	r12
     5a4:	df 92       	push	r13
     5a6:	ef 92       	push	r14
     5a8:	ff 92       	push	r15
     5aa:	0f 93       	push	r16
     5ac:	1f 93       	push	r17
    ASYNC(self->Joystick, joystickVert, NULL);
     5ae:	fc 01       	movw	r30, r24
     5b0:	04 81       	ldd	r16, Z+4	; 0x04
     5b2:	15 81       	ldd	r17, Z+5	; 0x05
     5b4:	c1 2c       	mov	r12, r1
     5b6:	d1 2c       	mov	r13, r1
     5b8:	0f 2e       	mov	r0, r31
     5ba:	f1 e1       	ldi	r31, 0x11	; 17
     5bc:	ef 2e       	mov	r14, r31
     5be:	f3 e0       	ldi	r31, 0x03	; 3
     5c0:	ff 2e       	mov	r15, r31
     5c2:	f0 2d       	mov	r31, r0
     5c4:	20 e0       	ldi	r18, 0x00	; 0
     5c6:	30 e0       	ldi	r19, 0x00	; 0
     5c8:	a9 01       	movw	r20, r18
     5ca:	60 e0       	ldi	r22, 0x00	; 0
     5cc:	70 e0       	ldi	r23, 0x00	; 0
     5ce:	cb 01       	movw	r24, r22
     5d0:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <async>
}
     5d4:	1f 91       	pop	r17
     5d6:	0f 91       	pop	r16
     5d8:	ff 90       	pop	r15
     5da:	ef 90       	pop	r14
     5dc:	df 90       	pop	r13
     5de:	cf 90       	pop	r12
     5e0:	08 95       	ret

000005e2 <genSwitch>:

void genSwitch(InteruptHandler *self) {
     5e2:	cf 92       	push	r12
     5e4:	df 92       	push	r13
     5e6:	ef 92       	push	r14
     5e8:	ff 92       	push	r15
     5ea:	0f 93       	push	r16
     5ec:	1f 93       	push	r17
	ASYNC(self->Joystick, joystickHor, NULL);
     5ee:	fc 01       	movw	r30, r24
     5f0:	04 81       	ldd	r16, Z+4	; 0x04
     5f2:	15 81       	ldd	r17, Z+5	; 0x05
     5f4:	c1 2c       	mov	r12, r1
     5f6:	d1 2c       	mov	r13, r1
     5f8:	0f 2e       	mov	r0, r31
     5fa:	f3 e8       	ldi	r31, 0x83	; 131
     5fc:	ef 2e       	mov	r14, r31
     5fe:	f3 e0       	ldi	r31, 0x03	; 3
     600:	ff 2e       	mov	r15, r31
     602:	f0 2d       	mov	r31, r0
     604:	20 e0       	ldi	r18, 0x00	; 0
     606:	30 e0       	ldi	r19, 0x00	; 0
     608:	a9 01       	movw	r20, r18
     60a:	60 e0       	ldi	r22, 0x00	; 0
     60c:	70 e0       	ldi	r23, 0x00	; 0
     60e:	cb 01       	movw	r24, r22
     610:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <async>
}
     614:	1f 91       	pop	r17
     616:	0f 91       	pop	r16
     618:	ff 90       	pop	r15
     61a:	ef 90       	pop	r14
     61c:	df 90       	pop	r13
     61e:	cf 90       	pop	r12
     620:	08 95       	ret

00000622 <joystickVert>:
		ASYNC(self->gui, increaseGui, NULL);
		AFTER(MSEC(100), self, holdStick, NULL);
	}
}*/

int joystickVert(Joystick *self){
     622:	cf 92       	push	r12
     624:	df 92       	push	r13
     626:	ef 92       	push	r14
     628:	ff 92       	push	r15
     62a:	0f 93       	push	r16
     62c:	1f 93       	push	r17
     62e:	cf 93       	push	r28
     630:	df 93       	push	r29
     632:	ec 01       	movw	r28, r24
	if (!(PINB & (1 << PB7))) { //ner klickning
     634:	1f 99       	sbic	0x03, 7	; 3
     636:	23 c0       	rjmp	.+70     	; 0x67e <joystickVert+0x5c>
		ASYNC(self->gui, decreaseGui, NULL); // Kalla p� GUI f�r att s�nka frekvensen
     638:	0c 81       	ldd	r16, Y+4	; 0x04
     63a:	1d 81       	ldd	r17, Y+5	; 0x05
     63c:	c1 2c       	mov	r12, r1
     63e:	d1 2c       	mov	r13, r1
     640:	0f 2e       	mov	r0, r31
     642:	f0 ee       	ldi	r31, 0xE0	; 224
     644:	ef 2e       	mov	r14, r31
     646:	f1 e0       	ldi	r31, 0x01	; 1
     648:	ff 2e       	mov	r15, r31
     64a:	f0 2d       	mov	r31, r0
     64c:	20 e0       	ldi	r18, 0x00	; 0
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	a9 01       	movw	r20, r18
     652:	60 e0       	ldi	r22, 0x00	; 0
     654:	70 e0       	ldi	r23, 0x00	; 0
     656:	cb 01       	movw	r24, r22
     658:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <async>
		AFTER(MSEC(100), self, joystickVert, NULL);	// Kalla p� sig sj�lv igen (loop)
     65c:	0f 2e       	mov	r0, r31
     65e:	f1 e1       	ldi	r31, 0x11	; 17
     660:	ef 2e       	mov	r14, r31
     662:	f3 e0       	ldi	r31, 0x03	; 3
     664:	ff 2e       	mov	r15, r31
     666:	f0 2d       	mov	r31, r0
     668:	8e 01       	movw	r16, r28
     66a:	20 e0       	ldi	r18, 0x00	; 0
     66c:	30 e0       	ldi	r19, 0x00	; 0
     66e:	a9 01       	movw	r20, r18
     670:	65 e3       	ldi	r22, 0x35	; 53
     672:	7c e0       	ldi	r23, 0x0C	; 12
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <async>
     67c:	39 c0       	rjmp	.+114    	; 0x6f0 <joystickVert+0xce>
	}
	else if (!(PINB & (1 << PB6))) {	// Up
     67e:	1e 99       	sbic	0x03, 6	; 3
     680:	23 c0       	rjmp	.+70     	; 0x6c8 <joystickVert+0xa6>
		ASYNC(self->gui, increaseGui, NULL);
     682:	0c 81       	ldd	r16, Y+4	; 0x04
     684:	1d 81       	ldd	r17, Y+5	; 0x05
     686:	c1 2c       	mov	r12, r1
     688:	d1 2c       	mov	r13, r1
     68a:	0f 2e       	mov	r0, r31
     68c:	f8 ea       	ldi	r31, 0xA8	; 168
     68e:	ef 2e       	mov	r14, r31
     690:	f1 e0       	ldi	r31, 0x01	; 1
     692:	ff 2e       	mov	r15, r31
     694:	f0 2d       	mov	r31, r0
     696:	20 e0       	ldi	r18, 0x00	; 0
     698:	30 e0       	ldi	r19, 0x00	; 0
     69a:	a9 01       	movw	r20, r18
     69c:	60 e0       	ldi	r22, 0x00	; 0
     69e:	70 e0       	ldi	r23, 0x00	; 0
     6a0:	cb 01       	movw	r24, r22
     6a2:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <async>
		AFTER(MSEC(100), self, joystickVert, NULL);
     6a6:	0f 2e       	mov	r0, r31
     6a8:	f1 e1       	ldi	r31, 0x11	; 17
     6aa:	ef 2e       	mov	r14, r31
     6ac:	f3 e0       	ldi	r31, 0x03	; 3
     6ae:	ff 2e       	mov	r15, r31
     6b0:	f0 2d       	mov	r31, r0
     6b2:	8e 01       	movw	r16, r28
     6b4:	20 e0       	ldi	r18, 0x00	; 0
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	a9 01       	movw	r20, r18
     6ba:	65 e3       	ldi	r22, 0x35	; 53
     6bc:	7c e0       	ldi	r23, 0x0C	; 12
     6be:	80 e0       	ldi	r24, 0x00	; 0
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <async>
     6c6:	14 c0       	rjmp	.+40     	; 0x6f0 <joystickVert+0xce>
	}
	else if (!(PINB & (1 << PB4))) { // Press
     6c8:	1c 99       	sbic	0x03, 4	; 3
     6ca:	12 c0       	rjmp	.+36     	; 0x6f0 <joystickVert+0xce>
		ASYNC(self->gui, pressGui, NULL);
     6cc:	0c 81       	ldd	r16, Y+4	; 0x04
     6ce:	1d 81       	ldd	r17, Y+5	; 0x05
     6d0:	c1 2c       	mov	r12, r1
     6d2:	d1 2c       	mov	r13, r1
     6d4:	0f 2e       	mov	r0, r31
     6d6:	f6 e4       	ldi	r31, 0x46	; 70
     6d8:	ef 2e       	mov	r14, r31
     6da:	f2 e0       	ldi	r31, 0x02	; 2
     6dc:	ff 2e       	mov	r15, r31
     6de:	f0 2d       	mov	r31, r0
     6e0:	20 e0       	ldi	r18, 0x00	; 0
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	a9 01       	movw	r20, r18
     6e6:	60 e0       	ldi	r22, 0x00	; 0
     6e8:	70 e0       	ldi	r23, 0x00	; 0
     6ea:	cb 01       	movw	r24, r22
     6ec:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <async>
	}
	else{
		return 0;
	}
	return 0;
}
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	df 91       	pop	r29
     6f6:	cf 91       	pop	r28
     6f8:	1f 91       	pop	r17
     6fa:	0f 91       	pop	r16
     6fc:	ff 90       	pop	r15
     6fe:	ef 90       	pop	r14
     700:	df 90       	pop	r13
     702:	cf 90       	pop	r12
     704:	08 95       	ret

00000706 <joystickHor>:


int joystickHor(Joystick *self) {
     706:	cf 92       	push	r12
     708:	df 92       	push	r13
     70a:	ef 92       	push	r14
     70c:	ff 92       	push	r15
     70e:	0f 93       	push	r16
     710:	1f 93       	push	r17
	if (!(PINE & (1 << PE3)) || (!(PINE & (1 << PE2)))) {	// Både och???
     712:	63 9b       	sbis	0x0c, 3	; 12
     714:	02 c0       	rjmp	.+4      	; 0x71a <joystickHor+0x14>
     716:	62 99       	sbic	0x0c, 2	; 12
     718:	13 c0       	rjmp	.+38     	; 0x740 <joystickHor+0x3a>
     71a:	fc 01       	movw	r30, r24
		ASYNC(self->gui, switchGeneratorGui, NULL);
     71c:	04 81       	ldd	r16, Z+4	; 0x04
     71e:	15 81       	ldd	r17, Z+5	; 0x05
     720:	c1 2c       	mov	r12, r1
     722:	d1 2c       	mov	r13, r1
     724:	0f 2e       	mov	r0, r31
     726:	f8 e1       	ldi	r31, 0x18	; 24
     728:	ef 2e       	mov	r14, r31
     72a:	f2 e0       	ldi	r31, 0x02	; 2
     72c:	ff 2e       	mov	r15, r31
     72e:	f0 2d       	mov	r31, r0
     730:	20 e0       	ldi	r18, 0x00	; 0
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	a9 01       	movw	r20, r18
     736:	60 e0       	ldi	r22, 0x00	; 0
     738:	70 e0       	ldi	r23, 0x00	; 0
     73a:	cb 01       	movw	r24, r22
     73c:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <async>
	}
}
     740:	1f 91       	pop	r17
     742:	0f 91       	pop	r16
     744:	ff 90       	pop	r15
     746:	ef 90       	pop	r14
     748:	df 90       	pop	r13
     74a:	cf 90       	pop	r12
     74c:	08 95       	ret

0000074e <displayChar>:
    [9] = {0b0001, 0b0101, 0b1011, 0b0001},
    [10] = {0b1001, 0b1111, 0b1111, 0b1111},// This spot is for the "invalid" character (also used for reset)
};
 
//Help function for writeChar (fills array with elements that match character)
void displayChar(char c, bool odd, volatile uint8_t *address) {
     74e:	cf 93       	push	r28
     750:	df 93       	push	r29
     752:	00 d0       	rcall	.+0      	; 0x754 <displayChar+0x6>
     754:	00 d0       	rcall	.+0      	; 0x756 <displayChar+0x8>
     756:	cd b7       	in	r28, 0x3d	; 61
     758:	de b7       	in	r29, 0x3e	; 62
     75a:	da 01       	movw	r26, r20
    uint8_t array[4];
    if (c < '0' || c > '9') {	// Invalid character
     75c:	90 ed       	ldi	r25, 0xD0	; 208
     75e:	98 0f       	add	r25, r24
     760:	9a 30       	cpi	r25, 0x0A	; 10
     762:	80 f4       	brcc	.+32     	; 0x784 <displayChar+0x36>
     764:	20 e0       	ldi	r18, 0x00	; 0
     766:	30 e0       	ldi	r19, 0x00	; 0
     768:	28 c0       	rjmp	.+80     	; 0x7ba <displayChar+0x6c>
        for (int i = 0; i < 4; i++) {
            array[i] = characters[10][i];
     76a:	fc 01       	movw	r30, r24
     76c:	e8 5f       	subi	r30, 0xF8	; 248
     76e:	fe 4f       	sbci	r31, 0xFE	; 254
     770:	20 a5       	ldd	r18, Z+40	; 0x28
     772:	e1 e0       	ldi	r30, 0x01	; 1
     774:	f0 e0       	ldi	r31, 0x00	; 0
     776:	ec 0f       	add	r30, r28
     778:	fd 1f       	adc	r31, r29
     77a:	e8 0f       	add	r30, r24
     77c:	f9 1f       	adc	r31, r25
     77e:	20 83       	st	Z, r18
 
//Help function for writeChar (fills array with elements that match character)
void displayChar(char c, bool odd, volatile uint8_t *address) {
    uint8_t array[4];
    if (c < '0' || c > '9') {	// Invalid character
        for (int i = 0; i < 4; i++) {
     780:	01 96       	adiw	r24, 0x01	; 1
     782:	02 c0       	rjmp	.+4      	; 0x788 <displayChar+0x3a>
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	84 30       	cpi	r24, 0x04	; 4
     78a:	91 05       	cpc	r25, r1
     78c:	74 f3       	brlt	.-36     	; 0x76a <displayChar+0x1c>
     78e:	18 c0       	rjmp	.+48     	; 0x7c0 <displayChar+0x72>
            array[i] = characters[10][i];
        }
    }
    else {						// Valid character
        for (int i = 0; i < 4; i++) {
            array[i] = characters[c-48][i];
     790:	e8 2f       	mov	r30, r24
     792:	f0 e0       	ldi	r31, 0x00	; 0
     794:	f0 97       	sbiw	r30, 0x30	; 48
     796:	ee 0f       	add	r30, r30
     798:	ff 1f       	adc	r31, r31
     79a:	ee 0f       	add	r30, r30
     79c:	ff 1f       	adc	r31, r31
     79e:	e8 5f       	subi	r30, 0xF8	; 248
     7a0:	fe 4f       	sbci	r31, 0xFE	; 254
     7a2:	e2 0f       	add	r30, r18
     7a4:	f3 1f       	adc	r31, r19
     7a6:	90 81       	ld	r25, Z
     7a8:	e1 e0       	ldi	r30, 0x01	; 1
     7aa:	f0 e0       	ldi	r31, 0x00	; 0
     7ac:	ec 0f       	add	r30, r28
     7ae:	fd 1f       	adc	r31, r29
     7b0:	e2 0f       	add	r30, r18
     7b2:	f3 1f       	adc	r31, r19
     7b4:	90 83       	st	Z, r25
        for (int i = 0; i < 4; i++) {
            array[i] = characters[10][i];
        }
    }
    else {						// Valid character
        for (int i = 0; i < 4; i++) {
     7b6:	2f 5f       	subi	r18, 0xFF	; 255
     7b8:	3f 4f       	sbci	r19, 0xFF	; 255
     7ba:	24 30       	cpi	r18, 0x04	; 4
     7bc:	31 05       	cpc	r19, r1
     7be:	44 f3       	brlt	.-48     	; 0x790 <displayChar+0x42>
            array[i] = characters[c-48][i];
        }
    }
    if (odd) {					// If odd digit, shifts in order to set correct digit
     7c0:	61 11       	cpse	r22, r1
     7c2:	0d c0       	rjmp	.+26     	; 0x7de <displayChar+0x90>
     7c4:	11 c0       	rjmp	.+34     	; 0x7e8 <displayChar+0x9a>
        for (int i = 0; i < 4; i++) {
            array[i] <<= 4;
     7c6:	e1 e0       	ldi	r30, 0x01	; 1
     7c8:	f0 e0       	ldi	r31, 0x00	; 0
     7ca:	ec 0f       	add	r30, r28
     7cc:	fd 1f       	adc	r31, r29
     7ce:	e8 0f       	add	r30, r24
     7d0:	f9 1f       	adc	r31, r25
     7d2:	20 81       	ld	r18, Z
     7d4:	22 95       	swap	r18
     7d6:	20 7f       	andi	r18, 0xF0	; 240
     7d8:	20 83       	st	Z, r18
        for (int i = 0; i < 4; i++) {
            array[i] = characters[c-48][i];
        }
    }
    if (odd) {					// If odd digit, shifts in order to set correct digit
        for (int i = 0; i < 4; i++) {
     7da:	01 96       	adiw	r24, 0x01	; 1
     7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <displayChar+0x94>
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	84 30       	cpi	r24, 0x04	; 4
     7e4:	91 05       	cpc	r25, r1
     7e6:	7c f3       	brlt	.-34     	; 0x7c6 <displayChar+0x78>
            array[i] <<= 4;
        }
    }							// This part sets the character in needed registers
    *address |= array[0];		// (K, -, -, A)
     7e8:	9c 91       	ld	r25, X
     7ea:	89 81       	ldd	r24, Y+1	; 0x01
     7ec:	89 2b       	or	r24, r25
     7ee:	8c 93       	st	X, r24
    *(address+5) |= array[1];	// (J, F, H, B)
     7f0:	15 96       	adiw	r26, 0x05	; 5
     7f2:	9c 91       	ld	r25, X
     7f4:	15 97       	sbiw	r26, 0x05	; 5
     7f6:	8a 81       	ldd	r24, Y+2	; 0x02
     7f8:	89 2b       	or	r24, r25
     7fa:	15 96       	adiw	r26, 0x05	; 5
     7fc:	8c 93       	st	X, r24
     7fe:	15 97       	sbiw	r26, 0x05	; 5
    *(address+10) |= array[2];	// (L, E, G, C)
     800:	1a 96       	adiw	r26, 0x0a	; 10
     802:	9c 91       	ld	r25, X
     804:	1a 97       	sbiw	r26, 0x0a	; 10
     806:	8b 81       	ldd	r24, Y+3	; 0x03
     808:	89 2b       	or	r24, r25
     80a:	1a 96       	adiw	r26, 0x0a	; 10
     80c:	8c 93       	st	X, r24
     80e:	1a 97       	sbiw	r26, 0x0a	; 10
    *(address+15) |= array[3];	// (M, P, N, D)
     810:	1f 96       	adiw	r26, 0x0f	; 15
     812:	9c 91       	ld	r25, X
     814:	1f 97       	sbiw	r26, 0x0f	; 15
     816:	8c 81       	ldd	r24, Y+4	; 0x04
     818:	89 2b       	or	r24, r25
     81a:	1f 96       	adiw	r26, 0x0f	; 15
     81c:	8c 93       	st	X, r24
}
     81e:	0f 90       	pop	r0
     820:	0f 90       	pop	r0
     822:	0f 90       	pop	r0
     824:	0f 90       	pop	r0
     826:	df 91       	pop	r29
     828:	cf 91       	pop	r28
     82a:	08 95       	ret

0000082c <removeOldChar>:
 
 
// Removes previous character at given location
void removeOldChar(bool odd, volatile uint8_t *address) {
    // AND:s 0 on the parts that need to be reset
    if (odd) {
     82c:	88 23       	and	r24, r24
     82e:	91 f0       	breq	.+36     	; 0x854 <removeOldChar+0x28>
        *address &= 0b00001001;
     830:	fb 01       	movw	r30, r22
     832:	80 81       	ld	r24, Z
     834:	89 70       	andi	r24, 0x09	; 9
     836:	80 83       	st	Z, r24
        for (int i = 5; i < 20; i += 5) {
     838:	85 e0       	ldi	r24, 0x05	; 5
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	07 c0       	rjmp	.+14     	; 0x84c <removeOldChar+0x20>
            *(address + i) &= 0b00001111;
     83e:	fb 01       	movw	r30, r22
     840:	e8 0f       	add	r30, r24
     842:	f9 1f       	adc	r31, r25
     844:	20 81       	ld	r18, Z
     846:	2f 70       	andi	r18, 0x0F	; 15
     848:	20 83       	st	Z, r18
// Removes previous character at given location
void removeOldChar(bool odd, volatile uint8_t *address) {
    // AND:s 0 on the parts that need to be reset
    if (odd) {
        *address &= 0b00001001;
        for (int i = 5; i < 20; i += 5) {
     84a:	05 96       	adiw	r24, 0x05	; 5
     84c:	84 31       	cpi	r24, 0x14	; 20
     84e:	91 05       	cpc	r25, r1
     850:	b4 f3       	brlt	.-20     	; 0x83e <removeOldChar+0x12>
     852:	08 95       	ret
            *(address + i) &= 0b00001111;
        }
    }
    else {
        *address &= 0b10010000;
     854:	fb 01       	movw	r30, r22
     856:	80 81       	ld	r24, Z
     858:	80 79       	andi	r24, 0x90	; 144
     85a:	80 83       	st	Z, r24
        for (int i = 5; i < 20; i += 5) {
     85c:	85 e0       	ldi	r24, 0x05	; 5
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	07 c0       	rjmp	.+14     	; 0x870 <removeOldChar+0x44>
            *(address + i) &= 0b11110000;
     862:	fb 01       	movw	r30, r22
     864:	e8 0f       	add	r30, r24
     866:	f9 1f       	adc	r31, r25
     868:	20 81       	ld	r18, Z
     86a:	20 7f       	andi	r18, 0xF0	; 240
     86c:	20 83       	st	Z, r18
            *(address + i) &= 0b00001111;
        }
    }
    else {
        *address &= 0b10010000;
        for (int i = 5; i < 20; i += 5) {
     86e:	05 96       	adiw	r24, 0x05	; 5
     870:	84 31       	cpi	r24, 0x14	; 20
     872:	91 05       	cpc	r25, r1
     874:	b4 f3       	brlt	.-20     	; 0x862 <removeOldChar+0x36>
     876:	08 95       	ret

00000878 <writeChar>:
        }
    }
}
 
// Takes character ('0' - '9') and a position (0 - 5 (NOT CHECKED)) and prints it on the screen
void writeChar(char c, int pos) {
     878:	1f 93       	push	r17
     87a:	cf 93       	push	r28
     87c:	df 93       	push	r29
     87e:	18 2f       	mov	r17, r24
    volatile uint8_t *address = &LCDDR0;	// Create pointer to start register
    if (pos % 2 == 0) {	// Even
     880:	60 fd       	sbrc	r22, 0
     882:	14 c0       	rjmp	.+40     	; 0x8ac <writeChar+0x34>
        address += pos/2;					// Change address according to position
     884:	ab 01       	movw	r20, r22
     886:	77 23       	and	r23, r23
     888:	14 f4       	brge	.+4      	; 0x88e <writeChar+0x16>
     88a:	4f 5f       	subi	r20, 0xFF	; 255
     88c:	5f 4f       	sbci	r21, 0xFF	; 255
     88e:	55 95       	asr	r21
     890:	47 95       	ror	r20
     892:	ea 01       	movw	r28, r20
     894:	c4 51       	subi	r28, 0x14	; 20
     896:	df 4f       	sbci	r29, 0xFF	; 255
        removeOldChar(false, address);
     898:	be 01       	movw	r22, r28
     89a:	80 e0       	ldi	r24, 0x00	; 0
     89c:	0e 94 16 04 	call	0x82c	; 0x82c <removeOldChar>
        displayChar(c, false, address);
     8a0:	ae 01       	movw	r20, r28
     8a2:	60 e0       	ldi	r22, 0x00	; 0
     8a4:	81 2f       	mov	r24, r17
     8a6:	0e 94 a7 03 	call	0x74e	; 0x74e <displayChar>
     8aa:	14 c0       	rjmp	.+40     	; 0x8d4 <writeChar+0x5c>
    }
    else {				// Odd
        address += (pos - 1) / 2;			// Change address according to position
     8ac:	61 50       	subi	r22, 0x01	; 1
     8ae:	71 09       	sbc	r23, r1
     8b0:	ab 01       	movw	r20, r22
     8b2:	12 f4       	brpl	.+4      	; 0x8b8 <writeChar+0x40>
     8b4:	4f 5f       	subi	r20, 0xFF	; 255
     8b6:	5f 4f       	sbci	r21, 0xFF	; 255
     8b8:	55 95       	asr	r21
     8ba:	47 95       	ror	r20
     8bc:	ea 01       	movw	r28, r20
     8be:	c4 51       	subi	r28, 0x14	; 20
     8c0:	df 4f       	sbci	r29, 0xFF	; 255
        removeOldChar(true, address);
     8c2:	be 01       	movw	r22, r28
     8c4:	81 e0       	ldi	r24, 0x01	; 1
     8c6:	0e 94 16 04 	call	0x82c	; 0x82c <removeOldChar>
        displayChar(c, true, address);
     8ca:	ae 01       	movw	r20, r28
     8cc:	61 e0       	ldi	r22, 0x01	; 1
     8ce:	81 2f       	mov	r24, r17
     8d0:	0e 94 a7 03 	call	0x74e	; 0x74e <displayChar>
    }
};
     8d4:	df 91       	pop	r29
     8d6:	cf 91       	pop	r28
     8d8:	1f 91       	pop	r17
     8da:	08 95       	ret

000008dc <switchSegment>:

// Switches between two segments 
void switchSegment() {
    LCDDR13 = !(LCDDR13 & 1);
     8dc:	e9 ef       	ldi	r30, 0xF9	; 249
     8de:	f0 e0       	ldi	r31, 0x00	; 0
     8e0:	90 81       	ld	r25, Z
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	98 27       	eor	r25, r24
     8e6:	91 70       	andi	r25, 0x01	; 1
     8e8:	90 83       	st	Z, r25
    LCDDR18 = !(LCDDR18 & 1);
     8ea:	ee ef       	ldi	r30, 0xFE	; 254
     8ec:	f0 e0       	ldi	r31, 0x00	; 0
     8ee:	90 81       	ld	r25, Z
     8f0:	89 27       	eor	r24, r25
     8f2:	81 70       	andi	r24, 0x01	; 1
     8f4:	80 83       	st	Z, r24
     8f6:	08 95       	ret

000008f8 <printAt>:
}
 
// Displays last two digits of num in pos and pos+1
int  printAt(Lcd *self, int input) {  // [pos, num]
     8f8:	ef 92       	push	r14
     8fa:	ff 92       	push	r15
     8fc:	0f 93       	push	r16
     8fe:	1f 93       	push	r17
     900:	cf 93       	push	r28
     902:	df 93       	push	r29
     904:	cb 01       	movw	r24, r22
    int pp = input % 10;
     906:	0a e0       	ldi	r16, 0x0A	; 10
     908:	10 e0       	ldi	r17, 0x00	; 0
     90a:	b8 01       	movw	r22, r16
     90c:	0e 94 a8 11 	call	0x2350	; 0x2350 <__divmodhi4>
     910:	7b 01       	movw	r14, r22
     912:	ec 01       	movw	r28, r24
    int num = input / 10;
    writeChar((num % 100) / 10 + '0', pp);
     914:	cb 01       	movw	r24, r22
     916:	64 e6       	ldi	r22, 0x64	; 100
     918:	70 e0       	ldi	r23, 0x00	; 0
     91a:	0e 94 a8 11 	call	0x2350	; 0x2350 <__divmodhi4>
     91e:	b8 01       	movw	r22, r16
     920:	0e 94 a8 11 	call	0x2350	; 0x2350 <__divmodhi4>
     924:	86 2f       	mov	r24, r22
     926:	be 01       	movw	r22, r28
     928:	80 5d       	subi	r24, 0xD0	; 208
     92a:	0e 94 3c 04 	call	0x878	; 0x878 <writeChar>
    pp++;
     92e:	21 96       	adiw	r28, 0x01	; 1
    writeChar( num % 10 + '0', pp);
     930:	c7 01       	movw	r24, r14
     932:	b8 01       	movw	r22, r16
     934:	0e 94 a8 11 	call	0x2350	; 0x2350 <__divmodhi4>
     938:	be 01       	movw	r22, r28
     93a:	80 5d       	subi	r24, 0xD0	; 208
     93c:	0e 94 3c 04 	call	0x878	; 0x878 <writeChar>

    return 0;
     940:	80 e0       	ldi	r24, 0x00	; 0
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	1f 91       	pop	r17
     94a:	0f 91       	pop	r16
     94c:	ff 90       	pop	r15
     94e:	ef 90       	pop	r14
     950:	08 95       	ret

00000952 <main>:
#include "Joystick.h"
#include "Lcd.h"
#include "TinyTimber.h"


int main() {
     952:	ef 92       	push	r14
     954:	ff 92       	push	r15
     956:	0f 93       	push	r16
     958:	1f 93       	push	r17
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
     95e:	cd b7       	in	r28, 0x3d	; 61
     960:	de b7       	in	r29, 0x3e	; 62
     962:	cb 54       	subi	r28, 0x4B	; 75
     964:	d1 09       	sbc	r29, r1
     966:	0f b6       	in	r0, 0x3f	; 63
     968:	f8 94       	cli
     96a:	de bf       	out	0x3e, r29	; 62
     96c:	0f be       	out	0x3f, r0	; 63
     96e:	cd bf       	out	0x3d, r28	; 61
	Init();
     970:	0e 94 ac 02 	call	0x558	; 0x558 <Init>
	Lcd display = initLcd();
     974:	1a 82       	std	Y+2, r1	; 0x02
     976:	19 82       	std	Y+1, r1	; 0x01
     978:	1c 82       	std	Y+4, r1	; 0x04
     97a:	1b 82       	std	Y+3, r1	; 0x03
	BitOp bitL = initBitOp(0);
     97c:	1e 82       	std	Y+6, r1	; 0x06
     97e:	1d 82       	std	Y+5, r1	; 0x05
     980:	18 86       	std	Y+8, r1	; 0x08
     982:	1f 82       	std	Y+7, r1	; 0x07
     984:	1a 86       	std	Y+10, r1	; 0x0a
     986:	19 86       	std	Y+9, r1	; 0x09
	BitOp bitR = initBitOp(1);
     988:	1c 86       	std	Y+12, r1	; 0x0c
     98a:	1b 86       	std	Y+11, r1	; 0x0b
     98c:	1e 86       	std	Y+14, r1	; 0x0e
     98e:	1d 86       	std	Y+13, r1	; 0x0d
     990:	81 e0       	ldi	r24, 0x01	; 1
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	98 8b       	std	Y+16, r25	; 0x10
     996:	8f 87       	std	Y+15, r24	; 0x0f
	Generators genL = initGenerator(&display, 0, &bitL);
     998:	1a 8a       	std	Y+18, r1	; 0x12
     99a:	19 8a       	std	Y+17, r1	; 0x11
     99c:	1c 8a       	std	Y+20, r1	; 0x14
     99e:	1b 8a       	std	Y+19, r1	; 0x13
     9a0:	1e 8a       	std	Y+22, r1	; 0x16
     9a2:	1d 8a       	std	Y+21, r1	; 0x15
     9a4:	18 8e       	std	Y+24, r1	; 0x18
     9a6:	1f 8a       	std	Y+23, r1	; 0x17
     9a8:	9a 8f       	std	Y+26, r25	; 0x1a
     9aa:	89 8f       	std	Y+25, r24	; 0x19
     9ac:	1c 8e       	std	Y+28, r1	; 0x1c
     9ae:	1b 8e       	std	Y+27, r1	; 0x1b
     9b0:	9e 01       	movw	r18, r28
     9b2:	2f 5f       	subi	r18, 0xFF	; 255
     9b4:	3f 4f       	sbci	r19, 0xFF	; 255
     9b6:	3e 8f       	std	Y+30, r19	; 0x1e
     9b8:	2d 8f       	std	Y+29, r18	; 0x1d
     9ba:	ae 01       	movw	r20, r28
     9bc:	4b 5f       	subi	r20, 0xFB	; 251
     9be:	5f 4f       	sbci	r21, 0xFF	; 255
     9c0:	58 a3       	std	Y+32, r21	; 0x20
     9c2:	4f 8f       	std	Y+31, r20	; 0x1f
	Generators genR = initGenerator(&display, 1, &bitR);
     9c4:	1a a2       	std	Y+34, r1	; 0x22
     9c6:	19 a2       	std	Y+33, r1	; 0x21
     9c8:	1c a2       	std	Y+36, r1	; 0x24
     9ca:	1b a2       	std	Y+35, r1	; 0x23
     9cc:	1e a2       	std	Y+38, r1	; 0x26
     9ce:	1d a2       	std	Y+37, r1	; 0x25
     9d0:	18 a6       	std	Y+40, r1	; 0x28
     9d2:	1f a2       	std	Y+39, r1	; 0x27
     9d4:	9a a7       	std	Y+42, r25	; 0x2a
     9d6:	89 a7       	std	Y+41, r24	; 0x29
     9d8:	9c a7       	std	Y+44, r25	; 0x2c
     9da:	8b a7       	std	Y+43, r24	; 0x2b
     9dc:	3e a7       	std	Y+46, r19	; 0x2e
     9de:	2d a7       	std	Y+45, r18	; 0x2d
     9e0:	4a 5f       	subi	r20, 0xFA	; 250
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	58 ab       	std	Y+48, r21	; 0x30
     9e6:	4f a7       	std	Y+47, r20	; 0x2f
	Gui gui = initGui(&genL, &genR, &display);
     9e8:	1a aa       	std	Y+50, r1	; 0x32
     9ea:	19 aa       	std	Y+49, r1	; 0x31
     9ec:	1c aa       	std	Y+52, r1	; 0x34
     9ee:	1b aa       	std	Y+51, r1	; 0x33
     9f0:	9e ab       	std	Y+54, r25	; 0x36
     9f2:	8d ab       	std	Y+53, r24	; 0x35
     9f4:	ce 01       	movw	r24, r28
     9f6:	41 96       	adiw	r24, 0x11	; 17
     9f8:	98 af       	std	Y+56, r25	; 0x38
     9fa:	8f ab       	std	Y+55, r24	; 0x37
     9fc:	40 96       	adiw	r24, 0x10	; 16
     9fe:	9a af       	std	Y+58, r25	; 0x3a
     a00:	89 af       	std	Y+57, r24	; 0x39
     a02:	3c af       	std	Y+60, r19	; 0x3c
     a04:	2b af       	std	Y+59, r18	; 0x3b
	Joystick joy = initJoystick(&gui);
     a06:	1e ae       	std	Y+62, r1	; 0x3e
     a08:	1d ae       	std	Y+61, r1	; 0x3d
     a0a:	21 96       	adiw	r28, 0x01	; 1
     a0c:	1f ae       	std	Y+63, r1	; 0x3f
     a0e:	1e ae       	std	Y+62, r1	; 0x3e
     a10:	21 97       	sbiw	r28, 0x01	; 1
     a12:	7e 01       	movw	r14, r28
     a14:	81 e3       	ldi	r24, 0x31	; 49
     a16:	e8 0e       	add	r14, r24
     a18:	f1 1c       	adc	r15, r1
     a1a:	23 96       	adiw	r28, 0x03	; 3
     a1c:	ff ae       	std	Y+63, r15	; 0x3f
     a1e:	ee ae       	std	Y+62, r14	; 0x3e
     a20:	23 97       	sbiw	r28, 0x03	; 3
     a22:	24 96       	adiw	r28, 0x04	; 4
     a24:	1f ae       	std	Y+63, r1	; 0x3f
     a26:	24 97       	sbiw	r28, 0x04	; 4
	InteruptHandler inter = initInteruptHandler(&joy);
     a28:	8e 01       	movw	r16, r28
     a2a:	0c 5b       	subi	r16, 0xBC	; 188
     a2c:	1f 4f       	sbci	r17, 0xFF	; 255
     a2e:	88 e0       	ldi	r24, 0x08	; 8
     a30:	f8 01       	movw	r30, r16
     a32:	11 92       	st	Z+, r1
     a34:	8a 95       	dec	r24
     a36:	e9 f7       	brne	.-6      	; 0xa32 <main+0xe0>
     a38:	ce 01       	movw	r24, r28
     a3a:	cd 96       	adiw	r24, 0x3d	; 61
     a3c:	f8 01       	movw	r30, r16
     a3e:	95 83       	std	Z+5, r25	; 0x05
     a40:	84 83       	std	Z+4, r24	; 0x04
	INSTALL(&inter, FreqChange, IRQ_PCINT1);
     a42:	42 e0       	ldi	r20, 0x02	; 2
     a44:	61 ed       	ldi	r22, 0xD1	; 209
     a46:	72 e0       	ldi	r23, 0x02	; 2
     a48:	c8 01       	movw	r24, r16
     a4a:	0e 94 76 11 	call	0x22ec	; 0x22ec <install>
	INSTALL(&inter, genSwitch, IRQ_PCINT0);
     a4e:	41 e0       	ldi	r20, 0x01	; 1
     a50:	61 ef       	ldi	r22, 0xF1	; 241
     a52:	72 e0       	ldi	r23, 0x02	; 2
     a54:	c8 01       	movw	r24, r16
     a56:	0e 94 76 11 	call	0x22ec	; 0x22ec <install>
	return tinytimber(&gui, start, NULL);
     a5a:	40 e0       	ldi	r20, 0x00	; 0
     a5c:	50 e0       	ldi	r21, 0x00	; 0
     a5e:	6e e7       	ldi	r22, 0x7E	; 126
     a60:	72 e0       	ldi	r23, 0x02	; 2
     a62:	c7 01       	movw	r24, r14
     a64:	0e 94 91 11 	call	0x2322	; 0x2322 <tinytimber>
	//return tinytimber(NULL,NULL,NULL);		
     a68:	c5 5b       	subi	r28, 0xB5	; 181
     a6a:	df 4f       	sbci	r29, 0xFF	; 255
     a6c:	0f b6       	in	r0, 0x3f	; 63
     a6e:	f8 94       	cli
     a70:	de bf       	out	0x3e, r29	; 62
     a72:	0f be       	out	0x3f, r0	; 63
     a74:	cd bf       	out	0x3d, r28	; 61
     a76:	df 91       	pop	r29
     a78:	cf 91       	pop	r28
     a7a:	1f 91       	pop	r17
     a7c:	0f 91       	pop	r16
     a7e:	ff 90       	pop	r15
     a80:	ef 90       	pop	r14
     a82:	08 95       	ret

00000a84 <initialize>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     a84:	cf 93       	push	r28
     a86:	df 93       	push	r29
     a88:	00 d0       	rcall	.+0      	; 0xa8a <initialize+0x6>
     a8a:	00 d0       	rcall	.+0      	; 0xa8c <initialize+0x8>
     a8c:	cd b7       	in	r28, 0x3d	; 61
     a8e:	de b7       	in	r29, 0x3e	; 62
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	18 c0       	rjmp	.+48     	; 0xac6 <initialize+0x42>
     a96:	ac 01       	movw	r20, r24
     a98:	4f 5f       	subi	r20, 0xFF	; 255
     a9a:	5f 4f       	sbci	r21, 0xFF	; 255
     a9c:	9a 01       	movw	r18, r20
     a9e:	22 95       	swap	r18
     aa0:	32 95       	swap	r19
     aa2:	30 7f       	andi	r19, 0xF0	; 240
     aa4:	32 27       	eor	r19, r18
     aa6:	20 7f       	andi	r18, 0xF0	; 240
     aa8:	32 27       	eor	r19, r18
     aaa:	29 5e       	subi	r18, 0xE9	; 233
     aac:	3d 4f       	sbci	r19, 0xFD	; 253
     aae:	82 95       	swap	r24
     ab0:	92 95       	swap	r25
     ab2:	90 7f       	andi	r25, 0xF0	; 240
     ab4:	98 27       	eor	r25, r24
     ab6:	80 7f       	andi	r24, 0xF0	; 240
     ab8:	98 27       	eor	r25, r24
     aba:	fc 01       	movw	r30, r24
     abc:	e9 5e       	subi	r30, 0xE9	; 233
     abe:	fd 4f       	sbci	r31, 0xFD	; 253
     ac0:	31 83       	std	Z+1, r19	; 0x01
     ac2:	20 83       	st	Z, r18
     ac4:	ca 01       	movw	r24, r20
     ac6:	8e 30       	cpi	r24, 0x0E	; 14
     ac8:	91 05       	cpc	r25, r1
     aca:	2c f3       	brlt	.-54     	; 0xa96 <initialize+0x12>
     acc:	10 92 f8 02 	sts	0x02F8, r1	; 0x8002f8 <messages+0xe1>
     ad0:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <messages+0xe0>
     ad4:	80 e0       	ldi	r24, 0x00	; 0
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	15 c0       	rjmp	.+42     	; 0xb04 <initialize+0x80>
     ada:	ac 01       	movw	r20, r24
     adc:	4f 5f       	subi	r20, 0xFF	; 255
     ade:	5f 4f       	sbci	r21, 0xFF	; 255
     ae0:	6d e1       	ldi	r22, 0x1D	; 29
     ae2:	64 9f       	mul	r22, r20
     ae4:	90 01       	movw	r18, r0
     ae6:	65 9f       	mul	r22, r21
     ae8:	30 0d       	add	r19, r0
     aea:	11 24       	eor	r1, r1
     aec:	2e 59       	subi	r18, 0x9E	; 158
     aee:	3e 4f       	sbci	r19, 0xFE	; 254
     af0:	68 9f       	mul	r22, r24
     af2:	f0 01       	movw	r30, r0
     af4:	69 9f       	mul	r22, r25
     af6:	f0 0d       	add	r31, r0
     af8:	11 24       	eor	r1, r1
     afa:	ee 59       	subi	r30, 0x9E	; 158
     afc:	fe 4f       	sbci	r31, 0xFE	; 254
     afe:	31 83       	std	Z+1, r19	; 0x01
     b00:	20 83       	st	Z, r18
     b02:	ca 01       	movw	r24, r20
     b04:	83 30       	cpi	r24, 0x03	; 3
     b06:	91 05       	cpc	r25, r1
     b08:	44 f3       	brlt	.-48     	; 0xada <initialize+0x56>
     b0a:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <threads+0x58>
     b0e:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <threads+0x57>
     b12:	1a 82       	std	Y+2, r1	; 0x02
     b14:	19 82       	std	Y+1, r1	; 0x01
     b16:	32 c0       	rjmp	.+100    	; 0xb7c <initialize+0xf8>
     b18:	2d e1       	ldi	r18, 0x1D	; 29
     b1a:	49 81       	ldd	r20, Y+1	; 0x01
     b1c:	5a 81       	ldd	r21, Y+2	; 0x02
     b1e:	24 9f       	mul	r18, r20
     b20:	c0 01       	movw	r24, r0
     b22:	25 9f       	mul	r18, r21
     b24:	90 0d       	add	r25, r0
     b26:	11 24       	eor	r1, r1
     b28:	fc 01       	movw	r30, r24
     b2a:	e8 59       	subi	r30, 0x98	; 152
     b2c:	fe 4f       	sbci	r31, 0xFE	; 254
     b2e:	fc 83       	std	Y+4, r31	; 0x04
     b30:	eb 83       	std	Y+3, r30	; 0x03
     b32:	cf 01       	movw	r24, r30
     b34:	0e 94 e6 11 	call	0x23cc	; 0x23cc <setjmp>
     b38:	20 e6       	ldi	r18, 0x60	; 96
     b3a:	49 81       	ldd	r20, Y+1	; 0x01
     b3c:	5a 81       	ldd	r21, Y+2	; 0x02
     b3e:	24 9f       	mul	r18, r20
     b40:	c0 01       	movw	r24, r0
     b42:	25 9f       	mul	r18, r21
     b44:	90 0d       	add	r25, r0
     b46:	11 24       	eor	r1, r1
     b48:	8d 59       	subi	r24, 0x9D	; 157
     b4a:	9c 4f       	sbci	r25, 0xFC	; 252
     b4c:	eb 81       	ldd	r30, Y+3	; 0x03
     b4e:	fc 81       	ldd	r31, Y+4	; 0x04
     b50:	91 8b       	std	Z+17, r25	; 0x11
     b52:	80 8b       	std	Z+16, r24	; 0x10
     b54:	93 8b       	std	Z+19, r25	; 0x13
     b56:	82 8b       	std	Z+18, r24	; 0x12
     b58:	8e e1       	ldi	r24, 0x1E	; 30
     b5a:	91 e1       	ldi	r25, 0x11	; 17
     b5c:	96 8b       	std	Z+22, r25	; 0x16
     b5e:	85 8b       	std	Z+21, r24	; 0x15
     b60:	8d e1       	ldi	r24, 0x1D	; 29
     b62:	84 9f       	mul	r24, r20
     b64:	f0 01       	movw	r30, r0
     b66:	85 9f       	mul	r24, r21
     b68:	f0 0d       	add	r31, r0
     b6a:	11 24       	eor	r1, r1
     b6c:	ee 59       	subi	r30, 0x9E	; 158
     b6e:	fe 4f       	sbci	r31, 0xFE	; 254
     b70:	15 82       	std	Z+5, r1	; 0x05
     b72:	14 82       	std	Z+4, r1	; 0x04
     b74:	4f 5f       	subi	r20, 0xFF	; 255
     b76:	5f 4f       	sbci	r21, 0xFF	; 255
     b78:	5a 83       	std	Y+2, r21	; 0x02
     b7a:	49 83       	std	Y+1, r20	; 0x01
     b7c:	29 81       	ldd	r18, Y+1	; 0x01
     b7e:	3a 81       	ldd	r19, Y+2	; 0x02
     b80:	24 30       	cpi	r18, 0x04	; 4
     b82:	31 05       	cpc	r19, r1
     b84:	4c f2       	brlt	.-110    	; 0xb18 <initialize+0x94>
     b86:	ea ef       	ldi	r30, 0xFA	; 250
     b88:	f1 e0       	ldi	r31, 0x01	; 1
     b8a:	11 82       	std	Z+1, r1	; 0x01
     b8c:	10 82       	st	Z, r1
     b8e:	15 82       	std	Z+5, r1	; 0x05
     b90:	14 82       	std	Z+4, r1	; 0x04
     b92:	13 82       	std	Z+3, r1	; 0x03
     b94:	12 82       	std	Z+2, r1	; 0x02
     b96:	e1 e6       	ldi	r30, 0x61	; 97
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	80 e8       	ldi	r24, 0x80	; 128
     b9c:	80 83       	st	Z, r24
     b9e:	10 82       	st	Z, r1
     ba0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ba4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ba8:	84 e0       	ldi	r24, 0x04	; 4
     baa:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
     bb4:	0f 90       	pop	r0
     bb6:	0f 90       	pop	r0
     bb8:	0f 90       	pop	r0
     bba:	0f 90       	pop	r0
     bbc:	df 91       	pop	r29
     bbe:	cf 91       	pop	r28
     bc0:	08 95       	ret

00000bc2 <dispatch>:
     bc2:	cf 93       	push	r28
     bc4:	df 93       	push	r29
     bc6:	00 d0       	rcall	.+0      	; 0xbc8 <dispatch+0x6>
     bc8:	cd b7       	in	r28, 0x3d	; 61
     bca:	de b7       	in	r29, 0x3e	; 62
     bcc:	9a 83       	std	Y+2, r25	; 0x02
     bce:	89 83       	std	Y+1, r24	; 0x01
     bd0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     bd4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     bd8:	06 96       	adiw	r24, 0x06	; 6
     bda:	0e 94 e6 11 	call	0x23cc	; 0x23cc <setjmp>
     bde:	89 2b       	or	r24, r25
     be0:	59 f4       	brne	.+22     	; 0xbf8 <dispatch+0x36>
     be2:	89 81       	ldd	r24, Y+1	; 0x01
     be4:	9a 81       	ldd	r25, Y+2	; 0x02
     be6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     bea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     bee:	61 e0       	ldi	r22, 0x01	; 1
     bf0:	70 e0       	ldi	r23, 0x00	; 0
     bf2:	06 96       	adiw	r24, 0x06	; 6
     bf4:	0e 94 06 12 	call	0x240c	; 0x240c <longjmp>
     bf8:	0f 90       	pop	r0
     bfa:	0f 90       	pop	r0
     bfc:	df 91       	pop	r29
     bfe:	cf 91       	pop	r28
     c00:	08 95       	ret

00000c02 <enqueueByDeadline>:
     c02:	0f 93       	push	r16
     c04:	1f 93       	push	r17
     c06:	cf 93       	push	r28
     c08:	df 93       	push	r29
     c0a:	dc 01       	movw	r26, r24
     c0c:	cb 01       	movw	r24, r22
     c0e:	eb 01       	movw	r28, r22
     c10:	e8 81       	ld	r30, Y
     c12:	f9 81       	ldd	r31, Y+1	; 0x01
     c14:	c0 e0       	ldi	r28, 0x00	; 0
     c16:	d0 e0       	ldi	r29, 0x00	; 0
     c18:	04 c0       	rjmp	.+8      	; 0xc22 <enqueueByDeadline+0x20>
     c1a:	ef 01       	movw	r28, r30
     c1c:	01 90       	ld	r0, Z+
     c1e:	f0 81       	ld	r31, Z
     c20:	e0 2d       	mov	r30, r0
     c22:	30 97       	sbiw	r30, 0x00	; 0
     c24:	79 f0       	breq	.+30     	; 0xc44 <enqueueByDeadline+0x42>
     c26:	06 81       	ldd	r16, Z+6	; 0x06
     c28:	17 81       	ldd	r17, Z+7	; 0x07
     c2a:	20 85       	ldd	r18, Z+8	; 0x08
     c2c:	31 85       	ldd	r19, Z+9	; 0x09
     c2e:	16 96       	adiw	r26, 0x06	; 6
     c30:	4d 91       	ld	r20, X+
     c32:	5d 91       	ld	r21, X+
     c34:	6d 91       	ld	r22, X+
     c36:	7c 91       	ld	r23, X
     c38:	19 97       	sbiw	r26, 0x09	; 9
     c3a:	40 17       	cp	r20, r16
     c3c:	51 07       	cpc	r21, r17
     c3e:	62 07       	cpc	r22, r18
     c40:	73 07       	cpc	r23, r19
     c42:	5c f7       	brge	.-42     	; 0xc1a <enqueueByDeadline+0x18>
     c44:	11 96       	adiw	r26, 0x01	; 1
     c46:	fc 93       	st	X, r31
     c48:	ee 93       	st	-X, r30
     c4a:	20 97       	sbiw	r28, 0x00	; 0
     c4c:	21 f4       	brne	.+8      	; 0xc56 <enqueueByDeadline+0x54>
     c4e:	fc 01       	movw	r30, r24
     c50:	b1 83       	std	Z+1, r27	; 0x01
     c52:	a0 83       	st	Z, r26
     c54:	02 c0       	rjmp	.+4      	; 0xc5a <enqueueByDeadline+0x58>
     c56:	b9 83       	std	Y+1, r27	; 0x01
     c58:	a8 83       	st	Y, r26
     c5a:	df 91       	pop	r29
     c5c:	cf 91       	pop	r28
     c5e:	1f 91       	pop	r17
     c60:	0f 91       	pop	r16
     c62:	08 95       	ret

00000c64 <enqueueByBaseline>:
     c64:	0f 93       	push	r16
     c66:	1f 93       	push	r17
     c68:	cf 93       	push	r28
     c6a:	df 93       	push	r29
     c6c:	dc 01       	movw	r26, r24
     c6e:	cb 01       	movw	r24, r22
     c70:	eb 01       	movw	r28, r22
     c72:	e8 81       	ld	r30, Y
     c74:	f9 81       	ldd	r31, Y+1	; 0x01
     c76:	c0 e0       	ldi	r28, 0x00	; 0
     c78:	d0 e0       	ldi	r29, 0x00	; 0
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <enqueueByBaseline+0x20>
     c7c:	ef 01       	movw	r28, r30
     c7e:	01 90       	ld	r0, Z+
     c80:	f0 81       	ld	r31, Z
     c82:	e0 2d       	mov	r30, r0
     c84:	30 97       	sbiw	r30, 0x00	; 0
     c86:	79 f0       	breq	.+30     	; 0xca6 <enqueueByBaseline+0x42>
     c88:	02 81       	ldd	r16, Z+2	; 0x02
     c8a:	13 81       	ldd	r17, Z+3	; 0x03
     c8c:	24 81       	ldd	r18, Z+4	; 0x04
     c8e:	35 81       	ldd	r19, Z+5	; 0x05
     c90:	12 96       	adiw	r26, 0x02	; 2
     c92:	4d 91       	ld	r20, X+
     c94:	5d 91       	ld	r21, X+
     c96:	6d 91       	ld	r22, X+
     c98:	7c 91       	ld	r23, X
     c9a:	15 97       	sbiw	r26, 0x05	; 5
     c9c:	40 17       	cp	r20, r16
     c9e:	51 07       	cpc	r21, r17
     ca0:	62 07       	cpc	r22, r18
     ca2:	73 07       	cpc	r23, r19
     ca4:	5c f7       	brge	.-42     	; 0xc7c <enqueueByBaseline+0x18>
     ca6:	11 96       	adiw	r26, 0x01	; 1
     ca8:	fc 93       	st	X, r31
     caa:	ee 93       	st	-X, r30
     cac:	20 97       	sbiw	r28, 0x00	; 0
     cae:	21 f4       	brne	.+8      	; 0xcb8 <enqueueByBaseline+0x54>
     cb0:	fc 01       	movw	r30, r24
     cb2:	b1 83       	std	Z+1, r27	; 0x01
     cb4:	a0 83       	st	Z, r26
     cb6:	02 c0       	rjmp	.+4      	; 0xcbc <enqueueByBaseline+0x58>
     cb8:	b9 83       	std	Y+1, r27	; 0x01
     cba:	a8 83       	st	Y, r26
     cbc:	df 91       	pop	r29
     cbe:	cf 91       	pop	r28
     cc0:	1f 91       	pop	r17
     cc2:	0f 91       	pop	r16
     cc4:	08 95       	ret

00000cc6 <dequeue>:
     cc6:	dc 01       	movw	r26, r24
     cc8:	ed 91       	ld	r30, X+
     cca:	fc 91       	ld	r31, X
     ccc:	11 97       	sbiw	r26, 0x01	; 1
     cce:	30 97       	sbiw	r30, 0x00	; 0
     cd0:	59 f4       	brne	.+22     	; 0xce8 <dequeue+0x22>
     cd2:	8f ef       	ldi	r24, 0xFF	; 255
     cd4:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     cd8:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
     cdc:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	83 bf       	out	0x33, r24	; 51
     ce4:	88 95       	sleep
     ce6:	fc cf       	rjmp	.-8      	; 0xce0 <dequeue+0x1a>
     ce8:	20 81       	ld	r18, Z
     cea:	31 81       	ldd	r19, Z+1	; 0x01
     cec:	2d 93       	st	X+, r18
     cee:	3c 93       	st	X, r19
     cf0:	cf 01       	movw	r24, r30
     cf2:	08 95       	ret

00000cf4 <insert>:
     cf4:	fb 01       	movw	r30, r22
     cf6:	20 81       	ld	r18, Z
     cf8:	31 81       	ldd	r19, Z+1	; 0x01
     cfa:	fc 01       	movw	r30, r24
     cfc:	31 83       	std	Z+1, r19	; 0x01
     cfe:	20 83       	st	Z, r18
     d00:	fb 01       	movw	r30, r22
     d02:	91 83       	std	Z+1, r25	; 0x01
     d04:	80 83       	st	Z, r24
     d06:	08 95       	ret

00000d08 <push>:
     d08:	fb 01       	movw	r30, r22
     d0a:	20 81       	ld	r18, Z
     d0c:	31 81       	ldd	r19, Z+1	; 0x01
     d0e:	fc 01       	movw	r30, r24
     d10:	31 83       	std	Z+1, r19	; 0x01
     d12:	20 83       	st	Z, r18
     d14:	fb 01       	movw	r30, r22
     d16:	91 83       	std	Z+1, r25	; 0x01
     d18:	80 83       	st	Z, r24
     d1a:	08 95       	ret

00000d1c <pop>:
     d1c:	dc 01       	movw	r26, r24
     d1e:	ed 91       	ld	r30, X+
     d20:	fc 91       	ld	r31, X
     d22:	11 97       	sbiw	r26, 0x01	; 1
     d24:	20 81       	ld	r18, Z
     d26:	31 81       	ldd	r19, Z+1	; 0x01
     d28:	2d 93       	st	X+, r18
     d2a:	3c 93       	st	X, r19
     d2c:	cf 01       	movw	r24, r30
     d2e:	08 95       	ret

00000d30 <schedule>:
     d30:	cf 93       	push	r28
     d32:	df 93       	push	r29
     d34:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
     d38:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
     d3c:	c2 81       	ldd	r28, Z+2	; 0x02
     d3e:	d3 81       	ldd	r29, Z+3	; 0x03
     d40:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <msgQ>
     d44:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <msgQ+0x1>
     d48:	30 97       	sbiw	r30, 0x00	; 0
     d4a:	19 f1       	breq	.+70     	; 0xd92 <schedule+0x62>
     d4c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
     d50:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
     d54:	89 2b       	or	r24, r25
     d56:	e9 f0       	breq	.+58     	; 0xd92 <schedule+0x62>
     d58:	20 97       	sbiw	r28, 0x00	; 0
     d5a:	69 f0       	breq	.+26     	; 0xd76 <schedule+0x46>
     d5c:	86 81       	ldd	r24, Z+6	; 0x06
     d5e:	97 81       	ldd	r25, Z+7	; 0x07
     d60:	a0 85       	ldd	r26, Z+8	; 0x08
     d62:	b1 85       	ldd	r27, Z+9	; 0x09
     d64:	4e 81       	ldd	r20, Y+6	; 0x06
     d66:	5f 81       	ldd	r21, Y+7	; 0x07
     d68:	68 85       	ldd	r22, Y+8	; 0x08
     d6a:	79 85       	ldd	r23, Y+9	; 0x09
     d6c:	84 1b       	sub	r24, r20
     d6e:	95 0b       	sbc	r25, r21
     d70:	a6 0b       	sbc	r26, r22
     d72:	b7 0b       	sbc	r27, r23
     d74:	72 f4       	brpl	.+28     	; 0xd92 <schedule+0x62>
     d76:	84 e0       	ldi	r24, 0x04	; 4
     d78:	91 e0       	ldi	r25, 0x01	; 1
     d7a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <pop>
     d7e:	62 e0       	ldi	r22, 0x02	; 2
     d80:	71 e0       	ldi	r23, 0x01	; 1
     d82:	0e 94 84 06 	call	0xd08	; 0xd08 <push>
     d86:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <activeStack>
     d8a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <activeStack+0x1>
     d8e:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <dispatch>
     d92:	df 91       	pop	r29
     d94:	cf 91       	pop	r28
     d96:	08 95       	ret

00000d98 <__vector_1>:
     d98:	1f 92       	push	r1
     d9a:	0f 92       	push	r0
     d9c:	0f b6       	in	r0, 0x3f	; 63
     d9e:	0f 92       	push	r0
     da0:	11 24       	eor	r1, r1
     da2:	0f 93       	push	r16
     da4:	1f 93       	push	r17
     da6:	2f 93       	push	r18
     da8:	3f 93       	push	r19
     daa:	4f 93       	push	r20
     dac:	5f 93       	push	r21
     dae:	6f 93       	push	r22
     db0:	7f 93       	push	r23
     db2:	8f 93       	push	r24
     db4:	9f 93       	push	r25
     db6:	af 93       	push	r26
     db8:	bf 93       	push	r27
     dba:	ef 93       	push	r30
     dbc:	ff 93       	push	r31
     dbe:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
     dc2:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <__data_end+0x1>
     dc6:	ac 01       	movw	r20, r24
     dc8:	09 2e       	mov	r0, r25
     dca:	00 0c       	add	r0, r0
     dcc:	66 0b       	sbc	r22, r22
     dce:	77 0b       	sbc	r23, r23
     dd0:	9a 01       	movw	r18, r20
     dd2:	11 27       	eor	r17, r17
     dd4:	00 27       	eor	r16, r16
     dd6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     dda:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     dde:	60 e0       	ldi	r22, 0x00	; 0
     de0:	70 e0       	ldi	r23, 0x00	; 0
     de2:	40 2b       	or	r20, r16
     de4:	51 2b       	or	r21, r17
     de6:	62 2b       	or	r22, r18
     de8:	73 2b       	or	r23, r19
     dea:	40 93 36 01 	sts	0x0136, r20	; 0x800136 <timestamp>
     dee:	50 93 37 01 	sts	0x0137, r21	; 0x800137 <timestamp+0x1>
     df2:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <timestamp+0x2>
     df6:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <timestamp+0x3>
     dfa:	b0 9b       	sbis	0x16, 0	; 22
     dfc:	1a c0       	rjmp	.+52     	; 0xe32 <__vector_1+0x9a>
     dfe:	01 96       	adiw	r24, 0x01	; 1
     e00:	09 2e       	mov	r0, r25
     e02:	00 0c       	add	r0, r0
     e04:	aa 0b       	sbc	r26, r26
     e06:	bb 0b       	sbc	r27, r27
     e08:	bc 01       	movw	r22, r24
     e0a:	55 27       	eor	r21, r21
     e0c:	44 27       	eor	r20, r20
     e0e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e12:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e16:	a0 e0       	ldi	r26, 0x00	; 0
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	84 2b       	or	r24, r20
     e1c:	95 2b       	or	r25, r21
     e1e:	a6 2b       	or	r26, r22
     e20:	b7 2b       	or	r27, r23
     e22:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
     e26:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
     e2a:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
     e2e:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
     e32:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <mtable>
     e36:	f0 91 d7 01 	lds	r31, 0x01D7	; 0x8001d7 <mtable+0x1>
     e3a:	30 97       	sbiw	r30, 0x00	; 0
     e3c:	39 f0       	breq	.+14     	; 0xe4c <__vector_1+0xb4>
     e3e:	60 e0       	ldi	r22, 0x00	; 0
     e40:	70 e0       	ldi	r23, 0x00	; 0
     e42:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <otable>
     e46:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <otable+0x1>
     e4a:	09 95       	icall
     e4c:	0e 94 98 06 	call	0xd30	; 0xd30 <schedule>
     e50:	ff 91       	pop	r31
     e52:	ef 91       	pop	r30
     e54:	bf 91       	pop	r27
     e56:	af 91       	pop	r26
     e58:	9f 91       	pop	r25
     e5a:	8f 91       	pop	r24
     e5c:	7f 91       	pop	r23
     e5e:	6f 91       	pop	r22
     e60:	5f 91       	pop	r21
     e62:	4f 91       	pop	r20
     e64:	3f 91       	pop	r19
     e66:	2f 91       	pop	r18
     e68:	1f 91       	pop	r17
     e6a:	0f 91       	pop	r16
     e6c:	0f 90       	pop	r0
     e6e:	0f be       	out	0x3f, r0	; 63
     e70:	0f 90       	pop	r0
     e72:	1f 90       	pop	r1
     e74:	18 95       	reti

00000e76 <__vector_2>:
     e76:	1f 92       	push	r1
     e78:	0f 92       	push	r0
     e7a:	0f b6       	in	r0, 0x3f	; 63
     e7c:	0f 92       	push	r0
     e7e:	11 24       	eor	r1, r1
     e80:	0f 93       	push	r16
     e82:	1f 93       	push	r17
     e84:	2f 93       	push	r18
     e86:	3f 93       	push	r19
     e88:	4f 93       	push	r20
     e8a:	5f 93       	push	r21
     e8c:	6f 93       	push	r22
     e8e:	7f 93       	push	r23
     e90:	8f 93       	push	r24
     e92:	9f 93       	push	r25
     e94:	af 93       	push	r26
     e96:	bf 93       	push	r27
     e98:	ef 93       	push	r30
     e9a:	ff 93       	push	r31
     e9c:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
     ea0:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <__data_end+0x1>
     ea4:	ac 01       	movw	r20, r24
     ea6:	09 2e       	mov	r0, r25
     ea8:	00 0c       	add	r0, r0
     eaa:	66 0b       	sbc	r22, r22
     eac:	77 0b       	sbc	r23, r23
     eae:	9a 01       	movw	r18, r20
     eb0:	11 27       	eor	r17, r17
     eb2:	00 27       	eor	r16, r16
     eb4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     eb8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ebc:	60 e0       	ldi	r22, 0x00	; 0
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	40 2b       	or	r20, r16
     ec2:	51 2b       	or	r21, r17
     ec4:	62 2b       	or	r22, r18
     ec6:	73 2b       	or	r23, r19
     ec8:	40 93 36 01 	sts	0x0136, r20	; 0x800136 <timestamp>
     ecc:	50 93 37 01 	sts	0x0137, r21	; 0x800137 <timestamp+0x1>
     ed0:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <timestamp+0x2>
     ed4:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <timestamp+0x3>
     ed8:	b0 9b       	sbis	0x16, 0	; 22
     eda:	1a c0       	rjmp	.+52     	; 0xf10 <__vector_2+0x9a>
     edc:	01 96       	adiw	r24, 0x01	; 1
     ede:	09 2e       	mov	r0, r25
     ee0:	00 0c       	add	r0, r0
     ee2:	aa 0b       	sbc	r26, r26
     ee4:	bb 0b       	sbc	r27, r27
     ee6:	bc 01       	movw	r22, r24
     ee8:	55 27       	eor	r21, r21
     eea:	44 27       	eor	r20, r20
     eec:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ef0:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ef4:	a0 e0       	ldi	r26, 0x00	; 0
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	84 2b       	or	r24, r20
     efa:	95 2b       	or	r25, r21
     efc:	a6 2b       	or	r26, r22
     efe:	b7 2b       	or	r27, r23
     f00:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
     f04:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
     f08:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
     f0c:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
     f10:	e0 91 d8 01 	lds	r30, 0x01D8	; 0x8001d8 <mtable+0x2>
     f14:	f0 91 d9 01 	lds	r31, 0x01D9	; 0x8001d9 <mtable+0x3>
     f18:	30 97       	sbiw	r30, 0x00	; 0
     f1a:	39 f0       	breq	.+14     	; 0xf2a <__vector_2+0xb4>
     f1c:	61 e0       	ldi	r22, 0x01	; 1
     f1e:	70 e0       	ldi	r23, 0x00	; 0
     f20:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <otable+0x2>
     f24:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <otable+0x3>
     f28:	09 95       	icall
     f2a:	0e 94 98 06 	call	0xd30	; 0xd30 <schedule>
     f2e:	ff 91       	pop	r31
     f30:	ef 91       	pop	r30
     f32:	bf 91       	pop	r27
     f34:	af 91       	pop	r26
     f36:	9f 91       	pop	r25
     f38:	8f 91       	pop	r24
     f3a:	7f 91       	pop	r23
     f3c:	6f 91       	pop	r22
     f3e:	5f 91       	pop	r21
     f40:	4f 91       	pop	r20
     f42:	3f 91       	pop	r19
     f44:	2f 91       	pop	r18
     f46:	1f 91       	pop	r17
     f48:	0f 91       	pop	r16
     f4a:	0f 90       	pop	r0
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	0f 90       	pop	r0
     f50:	1f 90       	pop	r1
     f52:	18 95       	reti

00000f54 <__vector_3>:
     f54:	1f 92       	push	r1
     f56:	0f 92       	push	r0
     f58:	0f b6       	in	r0, 0x3f	; 63
     f5a:	0f 92       	push	r0
     f5c:	11 24       	eor	r1, r1
     f5e:	0f 93       	push	r16
     f60:	1f 93       	push	r17
     f62:	2f 93       	push	r18
     f64:	3f 93       	push	r19
     f66:	4f 93       	push	r20
     f68:	5f 93       	push	r21
     f6a:	6f 93       	push	r22
     f6c:	7f 93       	push	r23
     f6e:	8f 93       	push	r24
     f70:	9f 93       	push	r25
     f72:	af 93       	push	r26
     f74:	bf 93       	push	r27
     f76:	ef 93       	push	r30
     f78:	ff 93       	push	r31
     f7a:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
     f7e:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <__data_end+0x1>
     f82:	ac 01       	movw	r20, r24
     f84:	09 2e       	mov	r0, r25
     f86:	00 0c       	add	r0, r0
     f88:	66 0b       	sbc	r22, r22
     f8a:	77 0b       	sbc	r23, r23
     f8c:	9a 01       	movw	r18, r20
     f8e:	11 27       	eor	r17, r17
     f90:	00 27       	eor	r16, r16
     f92:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f96:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f9a:	60 e0       	ldi	r22, 0x00	; 0
     f9c:	70 e0       	ldi	r23, 0x00	; 0
     f9e:	40 2b       	or	r20, r16
     fa0:	51 2b       	or	r21, r17
     fa2:	62 2b       	or	r22, r18
     fa4:	73 2b       	or	r23, r19
     fa6:	40 93 36 01 	sts	0x0136, r20	; 0x800136 <timestamp>
     faa:	50 93 37 01 	sts	0x0137, r21	; 0x800137 <timestamp+0x1>
     fae:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <timestamp+0x2>
     fb2:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <timestamp+0x3>
     fb6:	b0 9b       	sbis	0x16, 0	; 22
     fb8:	1a c0       	rjmp	.+52     	; 0xfee <__vector_3+0x9a>
     fba:	01 96       	adiw	r24, 0x01	; 1
     fbc:	09 2e       	mov	r0, r25
     fbe:	00 0c       	add	r0, r0
     fc0:	aa 0b       	sbc	r26, r26
     fc2:	bb 0b       	sbc	r27, r27
     fc4:	bc 01       	movw	r22, r24
     fc6:	55 27       	eor	r21, r21
     fc8:	44 27       	eor	r20, r20
     fca:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     fce:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     fd2:	a0 e0       	ldi	r26, 0x00	; 0
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	84 2b       	or	r24, r20
     fd8:	95 2b       	or	r25, r21
     fda:	a6 2b       	or	r26, r22
     fdc:	b7 2b       	or	r27, r23
     fde:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
     fe2:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
     fe6:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
     fea:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
     fee:	e0 91 da 01 	lds	r30, 0x01DA	; 0x8001da <mtable+0x4>
     ff2:	f0 91 db 01 	lds	r31, 0x01DB	; 0x8001db <mtable+0x5>
     ff6:	30 97       	sbiw	r30, 0x00	; 0
     ff8:	39 f0       	breq	.+14     	; 0x1008 <__vector_3+0xb4>
     ffa:	62 e0       	ldi	r22, 0x02	; 2
     ffc:	70 e0       	ldi	r23, 0x00	; 0
     ffe:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <otable+0x4>
    1002:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <otable+0x5>
    1006:	09 95       	icall
    1008:	0e 94 98 06 	call	0xd30	; 0xd30 <schedule>
    100c:	ff 91       	pop	r31
    100e:	ef 91       	pop	r30
    1010:	bf 91       	pop	r27
    1012:	af 91       	pop	r26
    1014:	9f 91       	pop	r25
    1016:	8f 91       	pop	r24
    1018:	7f 91       	pop	r23
    101a:	6f 91       	pop	r22
    101c:	5f 91       	pop	r21
    101e:	4f 91       	pop	r20
    1020:	3f 91       	pop	r19
    1022:	2f 91       	pop	r18
    1024:	1f 91       	pop	r17
    1026:	0f 91       	pop	r16
    1028:	0f 90       	pop	r0
    102a:	0f be       	out	0x3f, r0	; 63
    102c:	0f 90       	pop	r0
    102e:	1f 90       	pop	r1
    1030:	18 95       	reti

00001032 <__vector_4>:
    1032:	1f 92       	push	r1
    1034:	0f 92       	push	r0
    1036:	0f b6       	in	r0, 0x3f	; 63
    1038:	0f 92       	push	r0
    103a:	11 24       	eor	r1, r1
    103c:	0f 93       	push	r16
    103e:	1f 93       	push	r17
    1040:	2f 93       	push	r18
    1042:	3f 93       	push	r19
    1044:	4f 93       	push	r20
    1046:	5f 93       	push	r21
    1048:	6f 93       	push	r22
    104a:	7f 93       	push	r23
    104c:	8f 93       	push	r24
    104e:	9f 93       	push	r25
    1050:	af 93       	push	r26
    1052:	bf 93       	push	r27
    1054:	ef 93       	push	r30
    1056:	ff 93       	push	r31
    1058:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
    105c:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <__data_end+0x1>
    1060:	ac 01       	movw	r20, r24
    1062:	09 2e       	mov	r0, r25
    1064:	00 0c       	add	r0, r0
    1066:	66 0b       	sbc	r22, r22
    1068:	77 0b       	sbc	r23, r23
    106a:	9a 01       	movw	r18, r20
    106c:	11 27       	eor	r17, r17
    106e:	00 27       	eor	r16, r16
    1070:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1074:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1078:	60 e0       	ldi	r22, 0x00	; 0
    107a:	70 e0       	ldi	r23, 0x00	; 0
    107c:	40 2b       	or	r20, r16
    107e:	51 2b       	or	r21, r17
    1080:	62 2b       	or	r22, r18
    1082:	73 2b       	or	r23, r19
    1084:	40 93 36 01 	sts	0x0136, r20	; 0x800136 <timestamp>
    1088:	50 93 37 01 	sts	0x0137, r21	; 0x800137 <timestamp+0x1>
    108c:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <timestamp+0x2>
    1090:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <timestamp+0x3>
    1094:	b0 9b       	sbis	0x16, 0	; 22
    1096:	1a c0       	rjmp	.+52     	; 0x10cc <__vector_4+0x9a>
    1098:	01 96       	adiw	r24, 0x01	; 1
    109a:	09 2e       	mov	r0, r25
    109c:	00 0c       	add	r0, r0
    109e:	aa 0b       	sbc	r26, r26
    10a0:	bb 0b       	sbc	r27, r27
    10a2:	bc 01       	movw	r22, r24
    10a4:	55 27       	eor	r21, r21
    10a6:	44 27       	eor	r20, r20
    10a8:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    10ac:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    10b0:	a0 e0       	ldi	r26, 0x00	; 0
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	84 2b       	or	r24, r20
    10b6:	95 2b       	or	r25, r21
    10b8:	a6 2b       	or	r26, r22
    10ba:	b7 2b       	or	r27, r23
    10bc:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    10c0:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    10c4:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    10c8:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    10cc:	e0 91 dc 01 	lds	r30, 0x01DC	; 0x8001dc <mtable+0x6>
    10d0:	f0 91 dd 01 	lds	r31, 0x01DD	; 0x8001dd <mtable+0x7>
    10d4:	30 97       	sbiw	r30, 0x00	; 0
    10d6:	39 f0       	breq	.+14     	; 0x10e6 <__vector_4+0xb4>
    10d8:	63 e0       	ldi	r22, 0x03	; 3
    10da:	70 e0       	ldi	r23, 0x00	; 0
    10dc:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <otable+0x6>
    10e0:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <otable+0x7>
    10e4:	09 95       	icall
    10e6:	0e 94 98 06 	call	0xd30	; 0xd30 <schedule>
    10ea:	ff 91       	pop	r31
    10ec:	ef 91       	pop	r30
    10ee:	bf 91       	pop	r27
    10f0:	af 91       	pop	r26
    10f2:	9f 91       	pop	r25
    10f4:	8f 91       	pop	r24
    10f6:	7f 91       	pop	r23
    10f8:	6f 91       	pop	r22
    10fa:	5f 91       	pop	r21
    10fc:	4f 91       	pop	r20
    10fe:	3f 91       	pop	r19
    1100:	2f 91       	pop	r18
    1102:	1f 91       	pop	r17
    1104:	0f 91       	pop	r16
    1106:	0f 90       	pop	r0
    1108:	0f be       	out	0x3f, r0	; 63
    110a:	0f 90       	pop	r0
    110c:	1f 90       	pop	r1
    110e:	18 95       	reti

00001110 <__vector_5>:
    1110:	1f 92       	push	r1
    1112:	0f 92       	push	r0
    1114:	0f b6       	in	r0, 0x3f	; 63
    1116:	0f 92       	push	r0
    1118:	11 24       	eor	r1, r1
    111a:	0f 93       	push	r16
    111c:	1f 93       	push	r17
    111e:	2f 93       	push	r18
    1120:	3f 93       	push	r19
    1122:	4f 93       	push	r20
    1124:	5f 93       	push	r21
    1126:	6f 93       	push	r22
    1128:	7f 93       	push	r23
    112a:	8f 93       	push	r24
    112c:	9f 93       	push	r25
    112e:	af 93       	push	r26
    1130:	bf 93       	push	r27
    1132:	ef 93       	push	r30
    1134:	ff 93       	push	r31
    1136:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
    113a:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <__data_end+0x1>
    113e:	ac 01       	movw	r20, r24
    1140:	09 2e       	mov	r0, r25
    1142:	00 0c       	add	r0, r0
    1144:	66 0b       	sbc	r22, r22
    1146:	77 0b       	sbc	r23, r23
    1148:	9a 01       	movw	r18, r20
    114a:	11 27       	eor	r17, r17
    114c:	00 27       	eor	r16, r16
    114e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1152:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1156:	60 e0       	ldi	r22, 0x00	; 0
    1158:	70 e0       	ldi	r23, 0x00	; 0
    115a:	40 2b       	or	r20, r16
    115c:	51 2b       	or	r21, r17
    115e:	62 2b       	or	r22, r18
    1160:	73 2b       	or	r23, r19
    1162:	40 93 36 01 	sts	0x0136, r20	; 0x800136 <timestamp>
    1166:	50 93 37 01 	sts	0x0137, r21	; 0x800137 <timestamp+0x1>
    116a:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <timestamp+0x2>
    116e:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <timestamp+0x3>
    1172:	b0 9b       	sbis	0x16, 0	; 22
    1174:	1a c0       	rjmp	.+52     	; 0x11aa <__vector_5+0x9a>
    1176:	01 96       	adiw	r24, 0x01	; 1
    1178:	09 2e       	mov	r0, r25
    117a:	00 0c       	add	r0, r0
    117c:	aa 0b       	sbc	r26, r26
    117e:	bb 0b       	sbc	r27, r27
    1180:	bc 01       	movw	r22, r24
    1182:	55 27       	eor	r21, r21
    1184:	44 27       	eor	r20, r20
    1186:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    118a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    118e:	a0 e0       	ldi	r26, 0x00	; 0
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	84 2b       	or	r24, r20
    1194:	95 2b       	or	r25, r21
    1196:	a6 2b       	or	r26, r22
    1198:	b7 2b       	or	r27, r23
    119a:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    119e:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    11a2:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    11a6:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    11aa:	e0 91 de 01 	lds	r30, 0x01DE	; 0x8001de <mtable+0x8>
    11ae:	f0 91 df 01 	lds	r31, 0x01DF	; 0x8001df <mtable+0x9>
    11b2:	30 97       	sbiw	r30, 0x00	; 0
    11b4:	39 f0       	breq	.+14     	; 0x11c4 <__vector_5+0xb4>
    11b6:	64 e0       	ldi	r22, 0x04	; 4
    11b8:	70 e0       	ldi	r23, 0x00	; 0
    11ba:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <otable+0x8>
    11be:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <otable+0x9>
    11c2:	09 95       	icall
    11c4:	0e 94 98 06 	call	0xd30	; 0xd30 <schedule>
    11c8:	ff 91       	pop	r31
    11ca:	ef 91       	pop	r30
    11cc:	bf 91       	pop	r27
    11ce:	af 91       	pop	r26
    11d0:	9f 91       	pop	r25
    11d2:	8f 91       	pop	r24
    11d4:	7f 91       	pop	r23
    11d6:	6f 91       	pop	r22
    11d8:	5f 91       	pop	r21
    11da:	4f 91       	pop	r20
    11dc:	3f 91       	pop	r19
    11de:	2f 91       	pop	r18
    11e0:	1f 91       	pop	r17
    11e2:	0f 91       	pop	r16
    11e4:	0f 90       	pop	r0
    11e6:	0f be       	out	0x3f, r0	; 63
    11e8:	0f 90       	pop	r0
    11ea:	1f 90       	pop	r1
    11ec:	18 95       	reti

000011ee <__vector_10>:
    11ee:	1f 92       	push	r1
    11f0:	0f 92       	push	r0
    11f2:	0f b6       	in	r0, 0x3f	; 63
    11f4:	0f 92       	push	r0
    11f6:	11 24       	eor	r1, r1
    11f8:	0f 93       	push	r16
    11fa:	1f 93       	push	r17
    11fc:	2f 93       	push	r18
    11fe:	3f 93       	push	r19
    1200:	4f 93       	push	r20
    1202:	5f 93       	push	r21
    1204:	6f 93       	push	r22
    1206:	7f 93       	push	r23
    1208:	8f 93       	push	r24
    120a:	9f 93       	push	r25
    120c:	af 93       	push	r26
    120e:	bf 93       	push	r27
    1210:	ef 93       	push	r30
    1212:	ff 93       	push	r31
    1214:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
    1218:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <__data_end+0x1>
    121c:	ac 01       	movw	r20, r24
    121e:	09 2e       	mov	r0, r25
    1220:	00 0c       	add	r0, r0
    1222:	66 0b       	sbc	r22, r22
    1224:	77 0b       	sbc	r23, r23
    1226:	9a 01       	movw	r18, r20
    1228:	11 27       	eor	r17, r17
    122a:	00 27       	eor	r16, r16
    122c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1230:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1234:	60 e0       	ldi	r22, 0x00	; 0
    1236:	70 e0       	ldi	r23, 0x00	; 0
    1238:	40 2b       	or	r20, r16
    123a:	51 2b       	or	r21, r17
    123c:	62 2b       	or	r22, r18
    123e:	73 2b       	or	r23, r19
    1240:	40 93 36 01 	sts	0x0136, r20	; 0x800136 <timestamp>
    1244:	50 93 37 01 	sts	0x0137, r21	; 0x800137 <timestamp+0x1>
    1248:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <timestamp+0x2>
    124c:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <timestamp+0x3>
    1250:	b0 9b       	sbis	0x16, 0	; 22
    1252:	1a c0       	rjmp	.+52     	; 0x1288 <__vector_10+0x9a>
    1254:	01 96       	adiw	r24, 0x01	; 1
    1256:	09 2e       	mov	r0, r25
    1258:	00 0c       	add	r0, r0
    125a:	aa 0b       	sbc	r26, r26
    125c:	bb 0b       	sbc	r27, r27
    125e:	bc 01       	movw	r22, r24
    1260:	55 27       	eor	r21, r21
    1262:	44 27       	eor	r20, r20
    1264:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1268:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    126c:	a0 e0       	ldi	r26, 0x00	; 0
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	84 2b       	or	r24, r20
    1272:	95 2b       	or	r25, r21
    1274:	a6 2b       	or	r26, r22
    1276:	b7 2b       	or	r27, r23
    1278:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    127c:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    1280:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    1284:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    1288:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <mtable+0xa>
    128c:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <mtable+0xb>
    1290:	30 97       	sbiw	r30, 0x00	; 0
    1292:	39 f0       	breq	.+14     	; 0x12a2 <__vector_10+0xb4>
    1294:	65 e0       	ldi	r22, 0x05	; 5
    1296:	70 e0       	ldi	r23, 0x00	; 0
    1298:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <otable+0xa>
    129c:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <otable+0xb>
    12a0:	09 95       	icall
    12a2:	0e 94 98 06 	call	0xd30	; 0xd30 <schedule>
    12a6:	ff 91       	pop	r31
    12a8:	ef 91       	pop	r30
    12aa:	bf 91       	pop	r27
    12ac:	af 91       	pop	r26
    12ae:	9f 91       	pop	r25
    12b0:	8f 91       	pop	r24
    12b2:	7f 91       	pop	r23
    12b4:	6f 91       	pop	r22
    12b6:	5f 91       	pop	r21
    12b8:	4f 91       	pop	r20
    12ba:	3f 91       	pop	r19
    12bc:	2f 91       	pop	r18
    12be:	1f 91       	pop	r17
    12c0:	0f 91       	pop	r16
    12c2:	0f 90       	pop	r0
    12c4:	0f be       	out	0x3f, r0	; 63
    12c6:	0f 90       	pop	r0
    12c8:	1f 90       	pop	r1
    12ca:	18 95       	reti

000012cc <__vector_11>:
    12cc:	1f 92       	push	r1
    12ce:	0f 92       	push	r0
    12d0:	0f b6       	in	r0, 0x3f	; 63
    12d2:	0f 92       	push	r0
    12d4:	11 24       	eor	r1, r1
    12d6:	0f 93       	push	r16
    12d8:	1f 93       	push	r17
    12da:	2f 93       	push	r18
    12dc:	3f 93       	push	r19
    12de:	4f 93       	push	r20
    12e0:	5f 93       	push	r21
    12e2:	6f 93       	push	r22
    12e4:	7f 93       	push	r23
    12e6:	8f 93       	push	r24
    12e8:	9f 93       	push	r25
    12ea:	af 93       	push	r26
    12ec:	bf 93       	push	r27
    12ee:	ef 93       	push	r30
    12f0:	ff 93       	push	r31
    12f2:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
    12f6:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <__data_end+0x1>
    12fa:	ac 01       	movw	r20, r24
    12fc:	09 2e       	mov	r0, r25
    12fe:	00 0c       	add	r0, r0
    1300:	66 0b       	sbc	r22, r22
    1302:	77 0b       	sbc	r23, r23
    1304:	9a 01       	movw	r18, r20
    1306:	11 27       	eor	r17, r17
    1308:	00 27       	eor	r16, r16
    130a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    130e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1312:	60 e0       	ldi	r22, 0x00	; 0
    1314:	70 e0       	ldi	r23, 0x00	; 0
    1316:	40 2b       	or	r20, r16
    1318:	51 2b       	or	r21, r17
    131a:	62 2b       	or	r22, r18
    131c:	73 2b       	or	r23, r19
    131e:	40 93 36 01 	sts	0x0136, r20	; 0x800136 <timestamp>
    1322:	50 93 37 01 	sts	0x0137, r21	; 0x800137 <timestamp+0x1>
    1326:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <timestamp+0x2>
    132a:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <timestamp+0x3>
    132e:	b0 9b       	sbis	0x16, 0	; 22
    1330:	1a c0       	rjmp	.+52     	; 0x1366 <__vector_11+0x9a>
    1332:	01 96       	adiw	r24, 0x01	; 1
    1334:	09 2e       	mov	r0, r25
    1336:	00 0c       	add	r0, r0
    1338:	aa 0b       	sbc	r26, r26
    133a:	bb 0b       	sbc	r27, r27
    133c:	bc 01       	movw	r22, r24
    133e:	55 27       	eor	r21, r21
    1340:	44 27       	eor	r20, r20
    1342:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1346:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    134a:	a0 e0       	ldi	r26, 0x00	; 0
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	84 2b       	or	r24, r20
    1350:	95 2b       	or	r25, r21
    1352:	a6 2b       	or	r26, r22
    1354:	b7 2b       	or	r27, r23
    1356:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    135a:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    135e:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    1362:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    1366:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <mtable+0xc>
    136a:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <mtable+0xd>
    136e:	30 97       	sbiw	r30, 0x00	; 0
    1370:	39 f0       	breq	.+14     	; 0x1380 <__vector_11+0xb4>
    1372:	66 e0       	ldi	r22, 0x06	; 6
    1374:	70 e0       	ldi	r23, 0x00	; 0
    1376:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <otable+0xc>
    137a:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <otable+0xd>
    137e:	09 95       	icall
    1380:	0e 94 98 06 	call	0xd30	; 0xd30 <schedule>
    1384:	ff 91       	pop	r31
    1386:	ef 91       	pop	r30
    1388:	bf 91       	pop	r27
    138a:	af 91       	pop	r26
    138c:	9f 91       	pop	r25
    138e:	8f 91       	pop	r24
    1390:	7f 91       	pop	r23
    1392:	6f 91       	pop	r22
    1394:	5f 91       	pop	r21
    1396:	4f 91       	pop	r20
    1398:	3f 91       	pop	r19
    139a:	2f 91       	pop	r18
    139c:	1f 91       	pop	r17
    139e:	0f 91       	pop	r16
    13a0:	0f 90       	pop	r0
    13a2:	0f be       	out	0x3f, r0	; 63
    13a4:	0f 90       	pop	r0
    13a6:	1f 90       	pop	r1
    13a8:	18 95       	reti

000013aa <__vector_12>:
    13aa:	1f 92       	push	r1
    13ac:	0f 92       	push	r0
    13ae:	0f b6       	in	r0, 0x3f	; 63
    13b0:	0f 92       	push	r0
    13b2:	11 24       	eor	r1, r1
    13b4:	0f 93       	push	r16
    13b6:	1f 93       	push	r17
    13b8:	2f 93       	push	r18
    13ba:	3f 93       	push	r19
    13bc:	4f 93       	push	r20
    13be:	5f 93       	push	r21
    13c0:	6f 93       	push	r22
    13c2:	7f 93       	push	r23
    13c4:	8f 93       	push	r24
    13c6:	9f 93       	push	r25
    13c8:	af 93       	push	r26
    13ca:	bf 93       	push	r27
    13cc:	ef 93       	push	r30
    13ce:	ff 93       	push	r31
    13d0:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
    13d4:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <__data_end+0x1>
    13d8:	ac 01       	movw	r20, r24
    13da:	09 2e       	mov	r0, r25
    13dc:	00 0c       	add	r0, r0
    13de:	66 0b       	sbc	r22, r22
    13e0:	77 0b       	sbc	r23, r23
    13e2:	9a 01       	movw	r18, r20
    13e4:	11 27       	eor	r17, r17
    13e6:	00 27       	eor	r16, r16
    13e8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13ec:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    13f0:	60 e0       	ldi	r22, 0x00	; 0
    13f2:	70 e0       	ldi	r23, 0x00	; 0
    13f4:	40 2b       	or	r20, r16
    13f6:	51 2b       	or	r21, r17
    13f8:	62 2b       	or	r22, r18
    13fa:	73 2b       	or	r23, r19
    13fc:	40 93 36 01 	sts	0x0136, r20	; 0x800136 <timestamp>
    1400:	50 93 37 01 	sts	0x0137, r21	; 0x800137 <timestamp+0x1>
    1404:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <timestamp+0x2>
    1408:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <timestamp+0x3>
    140c:	b0 9b       	sbis	0x16, 0	; 22
    140e:	1a c0       	rjmp	.+52     	; 0x1444 <__vector_12+0x9a>
    1410:	01 96       	adiw	r24, 0x01	; 1
    1412:	09 2e       	mov	r0, r25
    1414:	00 0c       	add	r0, r0
    1416:	aa 0b       	sbc	r26, r26
    1418:	bb 0b       	sbc	r27, r27
    141a:	bc 01       	movw	r22, r24
    141c:	55 27       	eor	r21, r21
    141e:	44 27       	eor	r20, r20
    1420:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1424:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1428:	a0 e0       	ldi	r26, 0x00	; 0
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	84 2b       	or	r24, r20
    142e:	95 2b       	or	r25, r21
    1430:	a6 2b       	or	r26, r22
    1432:	b7 2b       	or	r27, r23
    1434:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    1438:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    143c:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    1440:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    1444:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <mtable+0xe>
    1448:	f0 91 e5 01 	lds	r31, 0x01E5	; 0x8001e5 <mtable+0xf>
    144c:	30 97       	sbiw	r30, 0x00	; 0
    144e:	39 f0       	breq	.+14     	; 0x145e <__vector_12+0xb4>
    1450:	67 e0       	ldi	r22, 0x07	; 7
    1452:	70 e0       	ldi	r23, 0x00	; 0
    1454:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <otable+0xe>
    1458:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <otable+0xf>
    145c:	09 95       	icall
    145e:	0e 94 98 06 	call	0xd30	; 0xd30 <schedule>
    1462:	ff 91       	pop	r31
    1464:	ef 91       	pop	r30
    1466:	bf 91       	pop	r27
    1468:	af 91       	pop	r26
    146a:	9f 91       	pop	r25
    146c:	8f 91       	pop	r24
    146e:	7f 91       	pop	r23
    1470:	6f 91       	pop	r22
    1472:	5f 91       	pop	r21
    1474:	4f 91       	pop	r20
    1476:	3f 91       	pop	r19
    1478:	2f 91       	pop	r18
    147a:	1f 91       	pop	r17
    147c:	0f 91       	pop	r16
    147e:	0f 90       	pop	r0
    1480:	0f be       	out	0x3f, r0	; 63
    1482:	0f 90       	pop	r0
    1484:	1f 90       	pop	r1
    1486:	18 95       	reti

00001488 <__vector_13>:
    1488:	1f 92       	push	r1
    148a:	0f 92       	push	r0
    148c:	0f b6       	in	r0, 0x3f	; 63
    148e:	0f 92       	push	r0
    1490:	11 24       	eor	r1, r1
    1492:	0f 93       	push	r16
    1494:	1f 93       	push	r17
    1496:	2f 93       	push	r18
    1498:	3f 93       	push	r19
    149a:	4f 93       	push	r20
    149c:	5f 93       	push	r21
    149e:	6f 93       	push	r22
    14a0:	7f 93       	push	r23
    14a2:	8f 93       	push	r24
    14a4:	9f 93       	push	r25
    14a6:	af 93       	push	r26
    14a8:	bf 93       	push	r27
    14aa:	ef 93       	push	r30
    14ac:	ff 93       	push	r31
    14ae:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
    14b2:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <__data_end+0x1>
    14b6:	ac 01       	movw	r20, r24
    14b8:	09 2e       	mov	r0, r25
    14ba:	00 0c       	add	r0, r0
    14bc:	66 0b       	sbc	r22, r22
    14be:	77 0b       	sbc	r23, r23
    14c0:	9a 01       	movw	r18, r20
    14c2:	11 27       	eor	r17, r17
    14c4:	00 27       	eor	r16, r16
    14c6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    14ca:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    14ce:	60 e0       	ldi	r22, 0x00	; 0
    14d0:	70 e0       	ldi	r23, 0x00	; 0
    14d2:	40 2b       	or	r20, r16
    14d4:	51 2b       	or	r21, r17
    14d6:	62 2b       	or	r22, r18
    14d8:	73 2b       	or	r23, r19
    14da:	40 93 36 01 	sts	0x0136, r20	; 0x800136 <timestamp>
    14de:	50 93 37 01 	sts	0x0137, r21	; 0x800137 <timestamp+0x1>
    14e2:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <timestamp+0x2>
    14e6:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <timestamp+0x3>
    14ea:	b0 9b       	sbis	0x16, 0	; 22
    14ec:	1a c0       	rjmp	.+52     	; 0x1522 <__vector_13+0x9a>
    14ee:	01 96       	adiw	r24, 0x01	; 1
    14f0:	09 2e       	mov	r0, r25
    14f2:	00 0c       	add	r0, r0
    14f4:	aa 0b       	sbc	r26, r26
    14f6:	bb 0b       	sbc	r27, r27
    14f8:	bc 01       	movw	r22, r24
    14fa:	55 27       	eor	r21, r21
    14fc:	44 27       	eor	r20, r20
    14fe:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1502:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1506:	a0 e0       	ldi	r26, 0x00	; 0
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	84 2b       	or	r24, r20
    150c:	95 2b       	or	r25, r21
    150e:	a6 2b       	or	r26, r22
    1510:	b7 2b       	or	r27, r23
    1512:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    1516:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    151a:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    151e:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    1522:	e0 91 e6 01 	lds	r30, 0x01E6	; 0x8001e6 <mtable+0x10>
    1526:	f0 91 e7 01 	lds	r31, 0x01E7	; 0x8001e7 <mtable+0x11>
    152a:	30 97       	sbiw	r30, 0x00	; 0
    152c:	39 f0       	breq	.+14     	; 0x153c <__vector_13+0xb4>
    152e:	68 e0       	ldi	r22, 0x08	; 8
    1530:	70 e0       	ldi	r23, 0x00	; 0
    1532:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <otable+0x10>
    1536:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <otable+0x11>
    153a:	09 95       	icall
    153c:	0e 94 98 06 	call	0xd30	; 0xd30 <schedule>
    1540:	ff 91       	pop	r31
    1542:	ef 91       	pop	r30
    1544:	bf 91       	pop	r27
    1546:	af 91       	pop	r26
    1548:	9f 91       	pop	r25
    154a:	8f 91       	pop	r24
    154c:	7f 91       	pop	r23
    154e:	6f 91       	pop	r22
    1550:	5f 91       	pop	r21
    1552:	4f 91       	pop	r20
    1554:	3f 91       	pop	r19
    1556:	2f 91       	pop	r18
    1558:	1f 91       	pop	r17
    155a:	0f 91       	pop	r16
    155c:	0f 90       	pop	r0
    155e:	0f be       	out	0x3f, r0	; 63
    1560:	0f 90       	pop	r0
    1562:	1f 90       	pop	r1
    1564:	18 95       	reti

00001566 <__vector_14>:
    1566:	1f 92       	push	r1
    1568:	0f 92       	push	r0
    156a:	0f b6       	in	r0, 0x3f	; 63
    156c:	0f 92       	push	r0
    156e:	11 24       	eor	r1, r1
    1570:	0f 93       	push	r16
    1572:	1f 93       	push	r17
    1574:	2f 93       	push	r18
    1576:	3f 93       	push	r19
    1578:	4f 93       	push	r20
    157a:	5f 93       	push	r21
    157c:	6f 93       	push	r22
    157e:	7f 93       	push	r23
    1580:	8f 93       	push	r24
    1582:	9f 93       	push	r25
    1584:	af 93       	push	r26
    1586:	bf 93       	push	r27
    1588:	ef 93       	push	r30
    158a:	ff 93       	push	r31
    158c:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
    1590:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <__data_end+0x1>
    1594:	ac 01       	movw	r20, r24
    1596:	09 2e       	mov	r0, r25
    1598:	00 0c       	add	r0, r0
    159a:	66 0b       	sbc	r22, r22
    159c:	77 0b       	sbc	r23, r23
    159e:	9a 01       	movw	r18, r20
    15a0:	11 27       	eor	r17, r17
    15a2:	00 27       	eor	r16, r16
    15a4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    15a8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    15ac:	60 e0       	ldi	r22, 0x00	; 0
    15ae:	70 e0       	ldi	r23, 0x00	; 0
    15b0:	40 2b       	or	r20, r16
    15b2:	51 2b       	or	r21, r17
    15b4:	62 2b       	or	r22, r18
    15b6:	73 2b       	or	r23, r19
    15b8:	40 93 36 01 	sts	0x0136, r20	; 0x800136 <timestamp>
    15bc:	50 93 37 01 	sts	0x0137, r21	; 0x800137 <timestamp+0x1>
    15c0:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <timestamp+0x2>
    15c4:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <timestamp+0x3>
    15c8:	b0 9b       	sbis	0x16, 0	; 22
    15ca:	1a c0       	rjmp	.+52     	; 0x1600 <__vector_14+0x9a>
    15cc:	01 96       	adiw	r24, 0x01	; 1
    15ce:	09 2e       	mov	r0, r25
    15d0:	00 0c       	add	r0, r0
    15d2:	aa 0b       	sbc	r26, r26
    15d4:	bb 0b       	sbc	r27, r27
    15d6:	bc 01       	movw	r22, r24
    15d8:	55 27       	eor	r21, r21
    15da:	44 27       	eor	r20, r20
    15dc:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    15e0:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    15e4:	a0 e0       	ldi	r26, 0x00	; 0
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	84 2b       	or	r24, r20
    15ea:	95 2b       	or	r25, r21
    15ec:	a6 2b       	or	r26, r22
    15ee:	b7 2b       	or	r27, r23
    15f0:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    15f4:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    15f8:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    15fc:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    1600:	e0 91 e8 01 	lds	r30, 0x01E8	; 0x8001e8 <mtable+0x12>
    1604:	f0 91 e9 01 	lds	r31, 0x01E9	; 0x8001e9 <mtable+0x13>
    1608:	30 97       	sbiw	r30, 0x00	; 0
    160a:	39 f0       	breq	.+14     	; 0x161a <__vector_14+0xb4>
    160c:	69 e0       	ldi	r22, 0x09	; 9
    160e:	70 e0       	ldi	r23, 0x00	; 0
    1610:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <otable+0x12>
    1614:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <otable+0x13>
    1618:	09 95       	icall
    161a:	0e 94 98 06 	call	0xd30	; 0xd30 <schedule>
    161e:	ff 91       	pop	r31
    1620:	ef 91       	pop	r30
    1622:	bf 91       	pop	r27
    1624:	af 91       	pop	r26
    1626:	9f 91       	pop	r25
    1628:	8f 91       	pop	r24
    162a:	7f 91       	pop	r23
    162c:	6f 91       	pop	r22
    162e:	5f 91       	pop	r21
    1630:	4f 91       	pop	r20
    1632:	3f 91       	pop	r19
    1634:	2f 91       	pop	r18
    1636:	1f 91       	pop	r17
    1638:	0f 91       	pop	r16
    163a:	0f 90       	pop	r0
    163c:	0f be       	out	0x3f, r0	; 63
    163e:	0f 90       	pop	r0
    1640:	1f 90       	pop	r1
    1642:	18 95       	reti

00001644 <__vector_15>:
    1644:	1f 92       	push	r1
    1646:	0f 92       	push	r0
    1648:	0f b6       	in	r0, 0x3f	; 63
    164a:	0f 92       	push	r0
    164c:	11 24       	eor	r1, r1
    164e:	0f 93       	push	r16
    1650:	1f 93       	push	r17
    1652:	2f 93       	push	r18
    1654:	3f 93       	push	r19
    1656:	4f 93       	push	r20
    1658:	5f 93       	push	r21
    165a:	6f 93       	push	r22
    165c:	7f 93       	push	r23
    165e:	8f 93       	push	r24
    1660:	9f 93       	push	r25
    1662:	af 93       	push	r26
    1664:	bf 93       	push	r27
    1666:	ef 93       	push	r30
    1668:	ff 93       	push	r31
    166a:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
    166e:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <__data_end+0x1>
    1672:	ac 01       	movw	r20, r24
    1674:	09 2e       	mov	r0, r25
    1676:	00 0c       	add	r0, r0
    1678:	66 0b       	sbc	r22, r22
    167a:	77 0b       	sbc	r23, r23
    167c:	9a 01       	movw	r18, r20
    167e:	11 27       	eor	r17, r17
    1680:	00 27       	eor	r16, r16
    1682:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1686:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    168a:	60 e0       	ldi	r22, 0x00	; 0
    168c:	70 e0       	ldi	r23, 0x00	; 0
    168e:	40 2b       	or	r20, r16
    1690:	51 2b       	or	r21, r17
    1692:	62 2b       	or	r22, r18
    1694:	73 2b       	or	r23, r19
    1696:	40 93 36 01 	sts	0x0136, r20	; 0x800136 <timestamp>
    169a:	50 93 37 01 	sts	0x0137, r21	; 0x800137 <timestamp+0x1>
    169e:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <timestamp+0x2>
    16a2:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <timestamp+0x3>
    16a6:	b0 9b       	sbis	0x16, 0	; 22
    16a8:	1a c0       	rjmp	.+52     	; 0x16de <__vector_15+0x9a>
    16aa:	01 96       	adiw	r24, 0x01	; 1
    16ac:	09 2e       	mov	r0, r25
    16ae:	00 0c       	add	r0, r0
    16b0:	aa 0b       	sbc	r26, r26
    16b2:	bb 0b       	sbc	r27, r27
    16b4:	bc 01       	movw	r22, r24
    16b6:	55 27       	eor	r21, r21
    16b8:	44 27       	eor	r20, r20
    16ba:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    16be:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    16c2:	a0 e0       	ldi	r26, 0x00	; 0
    16c4:	b0 e0       	ldi	r27, 0x00	; 0
    16c6:	84 2b       	or	r24, r20
    16c8:	95 2b       	or	r25, r21
    16ca:	a6 2b       	or	r26, r22
    16cc:	b7 2b       	or	r27, r23
    16ce:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    16d2:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    16d6:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    16da:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    16de:	e0 91 ea 01 	lds	r30, 0x01EA	; 0x8001ea <mtable+0x14>
    16e2:	f0 91 eb 01 	lds	r31, 0x01EB	; 0x8001eb <mtable+0x15>
    16e6:	30 97       	sbiw	r30, 0x00	; 0
    16e8:	39 f0       	breq	.+14     	; 0x16f8 <__vector_15+0xb4>
    16ea:	6a e0       	ldi	r22, 0x0A	; 10
    16ec:	70 e0       	ldi	r23, 0x00	; 0
    16ee:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <otable+0x14>
    16f2:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <otable+0x15>
    16f6:	09 95       	icall
    16f8:	0e 94 98 06 	call	0xd30	; 0xd30 <schedule>
    16fc:	ff 91       	pop	r31
    16fe:	ef 91       	pop	r30
    1700:	bf 91       	pop	r27
    1702:	af 91       	pop	r26
    1704:	9f 91       	pop	r25
    1706:	8f 91       	pop	r24
    1708:	7f 91       	pop	r23
    170a:	6f 91       	pop	r22
    170c:	5f 91       	pop	r21
    170e:	4f 91       	pop	r20
    1710:	3f 91       	pop	r19
    1712:	2f 91       	pop	r18
    1714:	1f 91       	pop	r17
    1716:	0f 91       	pop	r16
    1718:	0f 90       	pop	r0
    171a:	0f be       	out	0x3f, r0	; 63
    171c:	0f 90       	pop	r0
    171e:	1f 90       	pop	r1
    1720:	18 95       	reti

00001722 <__vector_16>:
    1722:	1f 92       	push	r1
    1724:	0f 92       	push	r0
    1726:	0f b6       	in	r0, 0x3f	; 63
    1728:	0f 92       	push	r0
    172a:	11 24       	eor	r1, r1
    172c:	0f 93       	push	r16
    172e:	1f 93       	push	r17
    1730:	2f 93       	push	r18
    1732:	3f 93       	push	r19
    1734:	4f 93       	push	r20
    1736:	5f 93       	push	r21
    1738:	6f 93       	push	r22
    173a:	7f 93       	push	r23
    173c:	8f 93       	push	r24
    173e:	9f 93       	push	r25
    1740:	af 93       	push	r26
    1742:	bf 93       	push	r27
    1744:	ef 93       	push	r30
    1746:	ff 93       	push	r31
    1748:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
    174c:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <__data_end+0x1>
    1750:	ac 01       	movw	r20, r24
    1752:	09 2e       	mov	r0, r25
    1754:	00 0c       	add	r0, r0
    1756:	66 0b       	sbc	r22, r22
    1758:	77 0b       	sbc	r23, r23
    175a:	9a 01       	movw	r18, r20
    175c:	11 27       	eor	r17, r17
    175e:	00 27       	eor	r16, r16
    1760:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1764:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1768:	60 e0       	ldi	r22, 0x00	; 0
    176a:	70 e0       	ldi	r23, 0x00	; 0
    176c:	40 2b       	or	r20, r16
    176e:	51 2b       	or	r21, r17
    1770:	62 2b       	or	r22, r18
    1772:	73 2b       	or	r23, r19
    1774:	40 93 36 01 	sts	0x0136, r20	; 0x800136 <timestamp>
    1778:	50 93 37 01 	sts	0x0137, r21	; 0x800137 <timestamp+0x1>
    177c:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <timestamp+0x2>
    1780:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <timestamp+0x3>
    1784:	b0 9b       	sbis	0x16, 0	; 22
    1786:	1a c0       	rjmp	.+52     	; 0x17bc <__vector_16+0x9a>
    1788:	01 96       	adiw	r24, 0x01	; 1
    178a:	09 2e       	mov	r0, r25
    178c:	00 0c       	add	r0, r0
    178e:	aa 0b       	sbc	r26, r26
    1790:	bb 0b       	sbc	r27, r27
    1792:	bc 01       	movw	r22, r24
    1794:	55 27       	eor	r21, r21
    1796:	44 27       	eor	r20, r20
    1798:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    179c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    17a0:	a0 e0       	ldi	r26, 0x00	; 0
    17a2:	b0 e0       	ldi	r27, 0x00	; 0
    17a4:	84 2b       	or	r24, r20
    17a6:	95 2b       	or	r25, r21
    17a8:	a6 2b       	or	r26, r22
    17aa:	b7 2b       	or	r27, r23
    17ac:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    17b0:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    17b4:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    17b8:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    17bc:	e0 91 ec 01 	lds	r30, 0x01EC	; 0x8001ec <mtable+0x16>
    17c0:	f0 91 ed 01 	lds	r31, 0x01ED	; 0x8001ed <mtable+0x17>
    17c4:	30 97       	sbiw	r30, 0x00	; 0
    17c6:	39 f0       	breq	.+14     	; 0x17d6 <__vector_16+0xb4>
    17c8:	6b e0       	ldi	r22, 0x0B	; 11
    17ca:	70 e0       	ldi	r23, 0x00	; 0
    17cc:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <otable+0x16>
    17d0:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <otable+0x17>
    17d4:	09 95       	icall
    17d6:	0e 94 98 06 	call	0xd30	; 0xd30 <schedule>
    17da:	ff 91       	pop	r31
    17dc:	ef 91       	pop	r30
    17de:	bf 91       	pop	r27
    17e0:	af 91       	pop	r26
    17e2:	9f 91       	pop	r25
    17e4:	8f 91       	pop	r24
    17e6:	7f 91       	pop	r23
    17e8:	6f 91       	pop	r22
    17ea:	5f 91       	pop	r21
    17ec:	4f 91       	pop	r20
    17ee:	3f 91       	pop	r19
    17f0:	2f 91       	pop	r18
    17f2:	1f 91       	pop	r17
    17f4:	0f 91       	pop	r16
    17f6:	0f 90       	pop	r0
    17f8:	0f be       	out	0x3f, r0	; 63
    17fa:	0f 90       	pop	r0
    17fc:	1f 90       	pop	r1
    17fe:	18 95       	reti

00001800 <__vector_17>:
    1800:	1f 92       	push	r1
    1802:	0f 92       	push	r0
    1804:	0f b6       	in	r0, 0x3f	; 63
    1806:	0f 92       	push	r0
    1808:	11 24       	eor	r1, r1
    180a:	0f 93       	push	r16
    180c:	1f 93       	push	r17
    180e:	2f 93       	push	r18
    1810:	3f 93       	push	r19
    1812:	4f 93       	push	r20
    1814:	5f 93       	push	r21
    1816:	6f 93       	push	r22
    1818:	7f 93       	push	r23
    181a:	8f 93       	push	r24
    181c:	9f 93       	push	r25
    181e:	af 93       	push	r26
    1820:	bf 93       	push	r27
    1822:	ef 93       	push	r30
    1824:	ff 93       	push	r31
    1826:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
    182a:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <__data_end+0x1>
    182e:	ac 01       	movw	r20, r24
    1830:	09 2e       	mov	r0, r25
    1832:	00 0c       	add	r0, r0
    1834:	66 0b       	sbc	r22, r22
    1836:	77 0b       	sbc	r23, r23
    1838:	9a 01       	movw	r18, r20
    183a:	11 27       	eor	r17, r17
    183c:	00 27       	eor	r16, r16
    183e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1842:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1846:	60 e0       	ldi	r22, 0x00	; 0
    1848:	70 e0       	ldi	r23, 0x00	; 0
    184a:	40 2b       	or	r20, r16
    184c:	51 2b       	or	r21, r17
    184e:	62 2b       	or	r22, r18
    1850:	73 2b       	or	r23, r19
    1852:	40 93 36 01 	sts	0x0136, r20	; 0x800136 <timestamp>
    1856:	50 93 37 01 	sts	0x0137, r21	; 0x800137 <timestamp+0x1>
    185a:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <timestamp+0x2>
    185e:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <timestamp+0x3>
    1862:	b0 9b       	sbis	0x16, 0	; 22
    1864:	1a c0       	rjmp	.+52     	; 0x189a <__vector_17+0x9a>
    1866:	01 96       	adiw	r24, 0x01	; 1
    1868:	09 2e       	mov	r0, r25
    186a:	00 0c       	add	r0, r0
    186c:	aa 0b       	sbc	r26, r26
    186e:	bb 0b       	sbc	r27, r27
    1870:	bc 01       	movw	r22, r24
    1872:	55 27       	eor	r21, r21
    1874:	44 27       	eor	r20, r20
    1876:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    187a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    187e:	a0 e0       	ldi	r26, 0x00	; 0
    1880:	b0 e0       	ldi	r27, 0x00	; 0
    1882:	84 2b       	or	r24, r20
    1884:	95 2b       	or	r25, r21
    1886:	a6 2b       	or	r26, r22
    1888:	b7 2b       	or	r27, r23
    188a:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    188e:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    1892:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    1896:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    189a:	e0 91 ee 01 	lds	r30, 0x01EE	; 0x8001ee <mtable+0x18>
    189e:	f0 91 ef 01 	lds	r31, 0x01EF	; 0x8001ef <mtable+0x19>
    18a2:	30 97       	sbiw	r30, 0x00	; 0
    18a4:	39 f0       	breq	.+14     	; 0x18b4 <__vector_17+0xb4>
    18a6:	6c e0       	ldi	r22, 0x0C	; 12
    18a8:	70 e0       	ldi	r23, 0x00	; 0
    18aa:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <otable+0x18>
    18ae:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <otable+0x19>
    18b2:	09 95       	icall
    18b4:	0e 94 98 06 	call	0xd30	; 0xd30 <schedule>
    18b8:	ff 91       	pop	r31
    18ba:	ef 91       	pop	r30
    18bc:	bf 91       	pop	r27
    18be:	af 91       	pop	r26
    18c0:	9f 91       	pop	r25
    18c2:	8f 91       	pop	r24
    18c4:	7f 91       	pop	r23
    18c6:	6f 91       	pop	r22
    18c8:	5f 91       	pop	r21
    18ca:	4f 91       	pop	r20
    18cc:	3f 91       	pop	r19
    18ce:	2f 91       	pop	r18
    18d0:	1f 91       	pop	r17
    18d2:	0f 91       	pop	r16
    18d4:	0f 90       	pop	r0
    18d6:	0f be       	out	0x3f, r0	; 63
    18d8:	0f 90       	pop	r0
    18da:	1f 90       	pop	r1
    18dc:	18 95       	reti

000018de <__vector_18>:
    18de:	1f 92       	push	r1
    18e0:	0f 92       	push	r0
    18e2:	0f b6       	in	r0, 0x3f	; 63
    18e4:	0f 92       	push	r0
    18e6:	11 24       	eor	r1, r1
    18e8:	0f 93       	push	r16
    18ea:	1f 93       	push	r17
    18ec:	2f 93       	push	r18
    18ee:	3f 93       	push	r19
    18f0:	4f 93       	push	r20
    18f2:	5f 93       	push	r21
    18f4:	6f 93       	push	r22
    18f6:	7f 93       	push	r23
    18f8:	8f 93       	push	r24
    18fa:	9f 93       	push	r25
    18fc:	af 93       	push	r26
    18fe:	bf 93       	push	r27
    1900:	ef 93       	push	r30
    1902:	ff 93       	push	r31
    1904:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
    1908:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <__data_end+0x1>
    190c:	ac 01       	movw	r20, r24
    190e:	09 2e       	mov	r0, r25
    1910:	00 0c       	add	r0, r0
    1912:	66 0b       	sbc	r22, r22
    1914:	77 0b       	sbc	r23, r23
    1916:	9a 01       	movw	r18, r20
    1918:	11 27       	eor	r17, r17
    191a:	00 27       	eor	r16, r16
    191c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1920:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1924:	60 e0       	ldi	r22, 0x00	; 0
    1926:	70 e0       	ldi	r23, 0x00	; 0
    1928:	40 2b       	or	r20, r16
    192a:	51 2b       	or	r21, r17
    192c:	62 2b       	or	r22, r18
    192e:	73 2b       	or	r23, r19
    1930:	40 93 36 01 	sts	0x0136, r20	; 0x800136 <timestamp>
    1934:	50 93 37 01 	sts	0x0137, r21	; 0x800137 <timestamp+0x1>
    1938:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <timestamp+0x2>
    193c:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <timestamp+0x3>
    1940:	b0 9b       	sbis	0x16, 0	; 22
    1942:	1a c0       	rjmp	.+52     	; 0x1978 <__vector_18+0x9a>
    1944:	01 96       	adiw	r24, 0x01	; 1
    1946:	09 2e       	mov	r0, r25
    1948:	00 0c       	add	r0, r0
    194a:	aa 0b       	sbc	r26, r26
    194c:	bb 0b       	sbc	r27, r27
    194e:	bc 01       	movw	r22, r24
    1950:	55 27       	eor	r21, r21
    1952:	44 27       	eor	r20, r20
    1954:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1958:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    195c:	a0 e0       	ldi	r26, 0x00	; 0
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	84 2b       	or	r24, r20
    1962:	95 2b       	or	r25, r21
    1964:	a6 2b       	or	r26, r22
    1966:	b7 2b       	or	r27, r23
    1968:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    196c:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    1970:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    1974:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    1978:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <mtable+0x1a>
    197c:	f0 91 f1 01 	lds	r31, 0x01F1	; 0x8001f1 <mtable+0x1b>
    1980:	30 97       	sbiw	r30, 0x00	; 0
    1982:	39 f0       	breq	.+14     	; 0x1992 <__vector_18+0xb4>
    1984:	6d e0       	ldi	r22, 0x0D	; 13
    1986:	70 e0       	ldi	r23, 0x00	; 0
    1988:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <otable+0x1a>
    198c:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <otable+0x1b>
    1990:	09 95       	icall
    1992:	0e 94 98 06 	call	0xd30	; 0xd30 <schedule>
    1996:	ff 91       	pop	r31
    1998:	ef 91       	pop	r30
    199a:	bf 91       	pop	r27
    199c:	af 91       	pop	r26
    199e:	9f 91       	pop	r25
    19a0:	8f 91       	pop	r24
    19a2:	7f 91       	pop	r23
    19a4:	6f 91       	pop	r22
    19a6:	5f 91       	pop	r21
    19a8:	4f 91       	pop	r20
    19aa:	3f 91       	pop	r19
    19ac:	2f 91       	pop	r18
    19ae:	1f 91       	pop	r17
    19b0:	0f 91       	pop	r16
    19b2:	0f 90       	pop	r0
    19b4:	0f be       	out	0x3f, r0	; 63
    19b6:	0f 90       	pop	r0
    19b8:	1f 90       	pop	r1
    19ba:	18 95       	reti

000019bc <__vector_19>:
    19bc:	1f 92       	push	r1
    19be:	0f 92       	push	r0
    19c0:	0f b6       	in	r0, 0x3f	; 63
    19c2:	0f 92       	push	r0
    19c4:	11 24       	eor	r1, r1
    19c6:	0f 93       	push	r16
    19c8:	1f 93       	push	r17
    19ca:	2f 93       	push	r18
    19cc:	3f 93       	push	r19
    19ce:	4f 93       	push	r20
    19d0:	5f 93       	push	r21
    19d2:	6f 93       	push	r22
    19d4:	7f 93       	push	r23
    19d6:	8f 93       	push	r24
    19d8:	9f 93       	push	r25
    19da:	af 93       	push	r26
    19dc:	bf 93       	push	r27
    19de:	ef 93       	push	r30
    19e0:	ff 93       	push	r31
    19e2:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
    19e6:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <__data_end+0x1>
    19ea:	ac 01       	movw	r20, r24
    19ec:	09 2e       	mov	r0, r25
    19ee:	00 0c       	add	r0, r0
    19f0:	66 0b       	sbc	r22, r22
    19f2:	77 0b       	sbc	r23, r23
    19f4:	9a 01       	movw	r18, r20
    19f6:	11 27       	eor	r17, r17
    19f8:	00 27       	eor	r16, r16
    19fa:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    19fe:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a02:	60 e0       	ldi	r22, 0x00	; 0
    1a04:	70 e0       	ldi	r23, 0x00	; 0
    1a06:	40 2b       	or	r20, r16
    1a08:	51 2b       	or	r21, r17
    1a0a:	62 2b       	or	r22, r18
    1a0c:	73 2b       	or	r23, r19
    1a0e:	40 93 36 01 	sts	0x0136, r20	; 0x800136 <timestamp>
    1a12:	50 93 37 01 	sts	0x0137, r21	; 0x800137 <timestamp+0x1>
    1a16:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <timestamp+0x2>
    1a1a:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <timestamp+0x3>
    1a1e:	b0 9b       	sbis	0x16, 0	; 22
    1a20:	1a c0       	rjmp	.+52     	; 0x1a56 <__vector_19+0x9a>
    1a22:	01 96       	adiw	r24, 0x01	; 1
    1a24:	09 2e       	mov	r0, r25
    1a26:	00 0c       	add	r0, r0
    1a28:	aa 0b       	sbc	r26, r26
    1a2a:	bb 0b       	sbc	r27, r27
    1a2c:	bc 01       	movw	r22, r24
    1a2e:	55 27       	eor	r21, r21
    1a30:	44 27       	eor	r20, r20
    1a32:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a36:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a3a:	a0 e0       	ldi	r26, 0x00	; 0
    1a3c:	b0 e0       	ldi	r27, 0x00	; 0
    1a3e:	84 2b       	or	r24, r20
    1a40:	95 2b       	or	r25, r21
    1a42:	a6 2b       	or	r26, r22
    1a44:	b7 2b       	or	r27, r23
    1a46:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    1a4a:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    1a4e:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    1a52:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    1a56:	e0 91 f2 01 	lds	r30, 0x01F2	; 0x8001f2 <mtable+0x1c>
    1a5a:	f0 91 f3 01 	lds	r31, 0x01F3	; 0x8001f3 <mtable+0x1d>
    1a5e:	30 97       	sbiw	r30, 0x00	; 0
    1a60:	39 f0       	breq	.+14     	; 0x1a70 <__vector_19+0xb4>
    1a62:	6e e0       	ldi	r22, 0x0E	; 14
    1a64:	70 e0       	ldi	r23, 0x00	; 0
    1a66:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <otable+0x1c>
    1a6a:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <otable+0x1d>
    1a6e:	09 95       	icall
    1a70:	0e 94 98 06 	call	0xd30	; 0xd30 <schedule>
    1a74:	ff 91       	pop	r31
    1a76:	ef 91       	pop	r30
    1a78:	bf 91       	pop	r27
    1a7a:	af 91       	pop	r26
    1a7c:	9f 91       	pop	r25
    1a7e:	8f 91       	pop	r24
    1a80:	7f 91       	pop	r23
    1a82:	6f 91       	pop	r22
    1a84:	5f 91       	pop	r21
    1a86:	4f 91       	pop	r20
    1a88:	3f 91       	pop	r19
    1a8a:	2f 91       	pop	r18
    1a8c:	1f 91       	pop	r17
    1a8e:	0f 91       	pop	r16
    1a90:	0f 90       	pop	r0
    1a92:	0f be       	out	0x3f, r0	; 63
    1a94:	0f 90       	pop	r0
    1a96:	1f 90       	pop	r1
    1a98:	18 95       	reti

00001a9a <__vector_20>:
    1a9a:	1f 92       	push	r1
    1a9c:	0f 92       	push	r0
    1a9e:	0f b6       	in	r0, 0x3f	; 63
    1aa0:	0f 92       	push	r0
    1aa2:	11 24       	eor	r1, r1
    1aa4:	0f 93       	push	r16
    1aa6:	1f 93       	push	r17
    1aa8:	2f 93       	push	r18
    1aaa:	3f 93       	push	r19
    1aac:	4f 93       	push	r20
    1aae:	5f 93       	push	r21
    1ab0:	6f 93       	push	r22
    1ab2:	7f 93       	push	r23
    1ab4:	8f 93       	push	r24
    1ab6:	9f 93       	push	r25
    1ab8:	af 93       	push	r26
    1aba:	bf 93       	push	r27
    1abc:	ef 93       	push	r30
    1abe:	ff 93       	push	r31
    1ac0:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
    1ac4:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <__data_end+0x1>
    1ac8:	ac 01       	movw	r20, r24
    1aca:	09 2e       	mov	r0, r25
    1acc:	00 0c       	add	r0, r0
    1ace:	66 0b       	sbc	r22, r22
    1ad0:	77 0b       	sbc	r23, r23
    1ad2:	9a 01       	movw	r18, r20
    1ad4:	11 27       	eor	r17, r17
    1ad6:	00 27       	eor	r16, r16
    1ad8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1adc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ae0:	60 e0       	ldi	r22, 0x00	; 0
    1ae2:	70 e0       	ldi	r23, 0x00	; 0
    1ae4:	40 2b       	or	r20, r16
    1ae6:	51 2b       	or	r21, r17
    1ae8:	62 2b       	or	r22, r18
    1aea:	73 2b       	or	r23, r19
    1aec:	40 93 36 01 	sts	0x0136, r20	; 0x800136 <timestamp>
    1af0:	50 93 37 01 	sts	0x0137, r21	; 0x800137 <timestamp+0x1>
    1af4:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <timestamp+0x2>
    1af8:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <timestamp+0x3>
    1afc:	b0 9b       	sbis	0x16, 0	; 22
    1afe:	1a c0       	rjmp	.+52     	; 0x1b34 <__vector_20+0x9a>
    1b00:	01 96       	adiw	r24, 0x01	; 1
    1b02:	09 2e       	mov	r0, r25
    1b04:	00 0c       	add	r0, r0
    1b06:	aa 0b       	sbc	r26, r26
    1b08:	bb 0b       	sbc	r27, r27
    1b0a:	bc 01       	movw	r22, r24
    1b0c:	55 27       	eor	r21, r21
    1b0e:	44 27       	eor	r20, r20
    1b10:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b14:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b18:	a0 e0       	ldi	r26, 0x00	; 0
    1b1a:	b0 e0       	ldi	r27, 0x00	; 0
    1b1c:	84 2b       	or	r24, r20
    1b1e:	95 2b       	or	r25, r21
    1b20:	a6 2b       	or	r26, r22
    1b22:	b7 2b       	or	r27, r23
    1b24:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    1b28:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    1b2c:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    1b30:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    1b34:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <mtable+0x1e>
    1b38:	f0 91 f5 01 	lds	r31, 0x01F5	; 0x8001f5 <mtable+0x1f>
    1b3c:	30 97       	sbiw	r30, 0x00	; 0
    1b3e:	39 f0       	breq	.+14     	; 0x1b4e <__vector_20+0xb4>
    1b40:	6f e0       	ldi	r22, 0x0F	; 15
    1b42:	70 e0       	ldi	r23, 0x00	; 0
    1b44:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <otable+0x1e>
    1b48:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <otable+0x1f>
    1b4c:	09 95       	icall
    1b4e:	0e 94 98 06 	call	0xd30	; 0xd30 <schedule>
    1b52:	ff 91       	pop	r31
    1b54:	ef 91       	pop	r30
    1b56:	bf 91       	pop	r27
    1b58:	af 91       	pop	r26
    1b5a:	9f 91       	pop	r25
    1b5c:	8f 91       	pop	r24
    1b5e:	7f 91       	pop	r23
    1b60:	6f 91       	pop	r22
    1b62:	5f 91       	pop	r21
    1b64:	4f 91       	pop	r20
    1b66:	3f 91       	pop	r19
    1b68:	2f 91       	pop	r18
    1b6a:	1f 91       	pop	r17
    1b6c:	0f 91       	pop	r16
    1b6e:	0f 90       	pop	r0
    1b70:	0f be       	out	0x3f, r0	; 63
    1b72:	0f 90       	pop	r0
    1b74:	1f 90       	pop	r1
    1b76:	18 95       	reti

00001b78 <__vector_21>:
    1b78:	1f 92       	push	r1
    1b7a:	0f 92       	push	r0
    1b7c:	0f b6       	in	r0, 0x3f	; 63
    1b7e:	0f 92       	push	r0
    1b80:	11 24       	eor	r1, r1
    1b82:	0f 93       	push	r16
    1b84:	1f 93       	push	r17
    1b86:	2f 93       	push	r18
    1b88:	3f 93       	push	r19
    1b8a:	4f 93       	push	r20
    1b8c:	5f 93       	push	r21
    1b8e:	6f 93       	push	r22
    1b90:	7f 93       	push	r23
    1b92:	8f 93       	push	r24
    1b94:	9f 93       	push	r25
    1b96:	af 93       	push	r26
    1b98:	bf 93       	push	r27
    1b9a:	ef 93       	push	r30
    1b9c:	ff 93       	push	r31
    1b9e:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
    1ba2:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <__data_end+0x1>
    1ba6:	ac 01       	movw	r20, r24
    1ba8:	09 2e       	mov	r0, r25
    1baa:	00 0c       	add	r0, r0
    1bac:	66 0b       	sbc	r22, r22
    1bae:	77 0b       	sbc	r23, r23
    1bb0:	9a 01       	movw	r18, r20
    1bb2:	11 27       	eor	r17, r17
    1bb4:	00 27       	eor	r16, r16
    1bb6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1bba:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1bbe:	60 e0       	ldi	r22, 0x00	; 0
    1bc0:	70 e0       	ldi	r23, 0x00	; 0
    1bc2:	40 2b       	or	r20, r16
    1bc4:	51 2b       	or	r21, r17
    1bc6:	62 2b       	or	r22, r18
    1bc8:	73 2b       	or	r23, r19
    1bca:	40 93 36 01 	sts	0x0136, r20	; 0x800136 <timestamp>
    1bce:	50 93 37 01 	sts	0x0137, r21	; 0x800137 <timestamp+0x1>
    1bd2:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <timestamp+0x2>
    1bd6:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <timestamp+0x3>
    1bda:	b0 9b       	sbis	0x16, 0	; 22
    1bdc:	1a c0       	rjmp	.+52     	; 0x1c12 <__vector_21+0x9a>
    1bde:	01 96       	adiw	r24, 0x01	; 1
    1be0:	09 2e       	mov	r0, r25
    1be2:	00 0c       	add	r0, r0
    1be4:	aa 0b       	sbc	r26, r26
    1be6:	bb 0b       	sbc	r27, r27
    1be8:	bc 01       	movw	r22, r24
    1bea:	55 27       	eor	r21, r21
    1bec:	44 27       	eor	r20, r20
    1bee:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1bf2:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1bf6:	a0 e0       	ldi	r26, 0x00	; 0
    1bf8:	b0 e0       	ldi	r27, 0x00	; 0
    1bfa:	84 2b       	or	r24, r20
    1bfc:	95 2b       	or	r25, r21
    1bfe:	a6 2b       	or	r26, r22
    1c00:	b7 2b       	or	r27, r23
    1c02:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    1c06:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    1c0a:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    1c0e:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    1c12:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <mtable+0x20>
    1c16:	f0 91 f7 01 	lds	r31, 0x01F7	; 0x8001f7 <mtable+0x21>
    1c1a:	30 97       	sbiw	r30, 0x00	; 0
    1c1c:	39 f0       	breq	.+14     	; 0x1c2c <__vector_21+0xb4>
    1c1e:	60 e1       	ldi	r22, 0x10	; 16
    1c20:	70 e0       	ldi	r23, 0x00	; 0
    1c22:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <otable+0x20>
    1c26:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <otable+0x21>
    1c2a:	09 95       	icall
    1c2c:	0e 94 98 06 	call	0xd30	; 0xd30 <schedule>
    1c30:	ff 91       	pop	r31
    1c32:	ef 91       	pop	r30
    1c34:	bf 91       	pop	r27
    1c36:	af 91       	pop	r26
    1c38:	9f 91       	pop	r25
    1c3a:	8f 91       	pop	r24
    1c3c:	7f 91       	pop	r23
    1c3e:	6f 91       	pop	r22
    1c40:	5f 91       	pop	r21
    1c42:	4f 91       	pop	r20
    1c44:	3f 91       	pop	r19
    1c46:	2f 91       	pop	r18
    1c48:	1f 91       	pop	r17
    1c4a:	0f 91       	pop	r16
    1c4c:	0f 90       	pop	r0
    1c4e:	0f be       	out	0x3f, r0	; 63
    1c50:	0f 90       	pop	r0
    1c52:	1f 90       	pop	r1
    1c54:	18 95       	reti

00001c56 <__vector_22>:
    1c56:	1f 92       	push	r1
    1c58:	0f 92       	push	r0
    1c5a:	0f b6       	in	r0, 0x3f	; 63
    1c5c:	0f 92       	push	r0
    1c5e:	11 24       	eor	r1, r1
    1c60:	0f 93       	push	r16
    1c62:	1f 93       	push	r17
    1c64:	2f 93       	push	r18
    1c66:	3f 93       	push	r19
    1c68:	4f 93       	push	r20
    1c6a:	5f 93       	push	r21
    1c6c:	6f 93       	push	r22
    1c6e:	7f 93       	push	r23
    1c70:	8f 93       	push	r24
    1c72:	9f 93       	push	r25
    1c74:	af 93       	push	r26
    1c76:	bf 93       	push	r27
    1c78:	ef 93       	push	r30
    1c7a:	ff 93       	push	r31
    1c7c:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
    1c80:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <__data_end+0x1>
    1c84:	ac 01       	movw	r20, r24
    1c86:	09 2e       	mov	r0, r25
    1c88:	00 0c       	add	r0, r0
    1c8a:	66 0b       	sbc	r22, r22
    1c8c:	77 0b       	sbc	r23, r23
    1c8e:	9a 01       	movw	r18, r20
    1c90:	11 27       	eor	r17, r17
    1c92:	00 27       	eor	r16, r16
    1c94:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c98:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c9c:	60 e0       	ldi	r22, 0x00	; 0
    1c9e:	70 e0       	ldi	r23, 0x00	; 0
    1ca0:	40 2b       	or	r20, r16
    1ca2:	51 2b       	or	r21, r17
    1ca4:	62 2b       	or	r22, r18
    1ca6:	73 2b       	or	r23, r19
    1ca8:	40 93 36 01 	sts	0x0136, r20	; 0x800136 <timestamp>
    1cac:	50 93 37 01 	sts	0x0137, r21	; 0x800137 <timestamp+0x1>
    1cb0:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <timestamp+0x2>
    1cb4:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <timestamp+0x3>
    1cb8:	b0 9b       	sbis	0x16, 0	; 22
    1cba:	1a c0       	rjmp	.+52     	; 0x1cf0 <__vector_22+0x9a>
    1cbc:	01 96       	adiw	r24, 0x01	; 1
    1cbe:	09 2e       	mov	r0, r25
    1cc0:	00 0c       	add	r0, r0
    1cc2:	aa 0b       	sbc	r26, r26
    1cc4:	bb 0b       	sbc	r27, r27
    1cc6:	bc 01       	movw	r22, r24
    1cc8:	55 27       	eor	r21, r21
    1cca:	44 27       	eor	r20, r20
    1ccc:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1cd0:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1cd4:	a0 e0       	ldi	r26, 0x00	; 0
    1cd6:	b0 e0       	ldi	r27, 0x00	; 0
    1cd8:	84 2b       	or	r24, r20
    1cda:	95 2b       	or	r25, r21
    1cdc:	a6 2b       	or	r26, r22
    1cde:	b7 2b       	or	r27, r23
    1ce0:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    1ce4:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    1ce8:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    1cec:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    1cf0:	e0 91 f8 01 	lds	r30, 0x01F8	; 0x8001f8 <mtable+0x22>
    1cf4:	f0 91 f9 01 	lds	r31, 0x01F9	; 0x8001f9 <mtable+0x23>
    1cf8:	30 97       	sbiw	r30, 0x00	; 0
    1cfa:	39 f0       	breq	.+14     	; 0x1d0a <__vector_22+0xb4>
    1cfc:	61 e1       	ldi	r22, 0x11	; 17
    1cfe:	70 e0       	ldi	r23, 0x00	; 0
    1d00:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <otable+0x22>
    1d04:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <otable+0x23>
    1d08:	09 95       	icall
    1d0a:	0e 94 98 06 	call	0xd30	; 0xd30 <schedule>
    1d0e:	ff 91       	pop	r31
    1d10:	ef 91       	pop	r30
    1d12:	bf 91       	pop	r27
    1d14:	af 91       	pop	r26
    1d16:	9f 91       	pop	r25
    1d18:	8f 91       	pop	r24
    1d1a:	7f 91       	pop	r23
    1d1c:	6f 91       	pop	r22
    1d1e:	5f 91       	pop	r21
    1d20:	4f 91       	pop	r20
    1d22:	3f 91       	pop	r19
    1d24:	2f 91       	pop	r18
    1d26:	1f 91       	pop	r17
    1d28:	0f 91       	pop	r16
    1d2a:	0f 90       	pop	r0
    1d2c:	0f be       	out	0x3f, r0	; 63
    1d2e:	0f 90       	pop	r0
    1d30:	1f 90       	pop	r1
    1d32:	18 95       	reti

00001d34 <idle>:
    1d34:	0e 94 98 06 	call	0xd30	; 0xd30 <schedule>
    1d38:	78 94       	sei
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	83 bf       	out	0x33, r24	; 51
    1d3e:	88 95       	sleep
    1d40:	fc cf       	rjmp	.-8      	; 0x1d3a <idle+0x6>

00001d42 <__vector_9>:
    1d42:	1f 92       	push	r1
    1d44:	0f 92       	push	r0
    1d46:	0f b6       	in	r0, 0x3f	; 63
    1d48:	0f 92       	push	r0
    1d4a:	11 24       	eor	r1, r1
    1d4c:	2f 93       	push	r18
    1d4e:	3f 93       	push	r19
    1d50:	4f 93       	push	r20
    1d52:	5f 93       	push	r21
    1d54:	6f 93       	push	r22
    1d56:	7f 93       	push	r23
    1d58:	8f 93       	push	r24
    1d5a:	9f 93       	push	r25
    1d5c:	ef 93       	push	r30
    1d5e:	ff 93       	push	r31
    1d60:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
    1d64:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <__data_end+0x1>
    1d68:	01 96       	adiw	r24, 0x01	; 1
    1d6a:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <__data_end+0x1>
    1d6e:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__data_end>
    1d72:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <timerQ>
    1d76:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <timerQ+0x1>
    1d7a:	30 97       	sbiw	r30, 0x00	; 0
    1d7c:	01 f1       	breq	.+64     	; 0x1dbe <__vector_9+0x7c>
    1d7e:	42 81       	ldd	r20, Z+2	; 0x02
    1d80:	53 81       	ldd	r21, Z+3	; 0x03
    1d82:	64 81       	ldd	r22, Z+4	; 0x04
    1d84:	75 81       	ldd	r23, Z+5	; 0x05
    1d86:	86 17       	cp	r24, r22
    1d88:	97 07       	cpc	r25, r23
    1d8a:	c9 f4       	brne	.+50     	; 0x1dbe <__vector_9+0x7c>
    1d8c:	ca 01       	movw	r24, r20
    1d8e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d92:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d96:	42 1b       	sub	r20, r18
    1d98:	53 0b       	sbc	r21, r19
    1d9a:	41 30       	cpi	r20, 0x01	; 1
    1d9c:	51 05       	cpc	r21, r1
    1d9e:	29 f4       	brne	.+10     	; 0x1daa <__vector_9+0x68>
    1da0:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1da4:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1da8:	01 96       	adiw	r24, 0x01	; 1
    1daa:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1dae:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1db2:	ef e6       	ldi	r30, 0x6F	; 111
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	80 81       	ld	r24, Z
    1db8:	82 60       	ori	r24, 0x02	; 2
    1dba:	80 83       	st	Z, r24
    1dbc:	05 c0       	rjmp	.+10     	; 0x1dc8 <__vector_9+0x86>
    1dbe:	ef e6       	ldi	r30, 0x6F	; 111
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	8d 7f       	andi	r24, 0xFD	; 253
    1dc6:	80 83       	st	Z, r24
    1dc8:	ff 91       	pop	r31
    1dca:	ef 91       	pop	r30
    1dcc:	9f 91       	pop	r25
    1dce:	8f 91       	pop	r24
    1dd0:	7f 91       	pop	r23
    1dd2:	6f 91       	pop	r22
    1dd4:	5f 91       	pop	r21
    1dd6:	4f 91       	pop	r20
    1dd8:	3f 91       	pop	r19
    1dda:	2f 91       	pop	r18
    1ddc:	0f 90       	pop	r0
    1dde:	0f be       	out	0x3f, r0	; 63
    1de0:	0f 90       	pop	r0
    1de2:	1f 90       	pop	r1
    1de4:	18 95       	reti

00001de6 <__vector_7>:
    1de6:	1f 92       	push	r1
    1de8:	0f 92       	push	r0
    1dea:	0f b6       	in	r0, 0x3f	; 63
    1dec:	0f 92       	push	r0
    1dee:	11 24       	eor	r1, r1
    1df0:	cf 92       	push	r12
    1df2:	df 92       	push	r13
    1df4:	ef 92       	push	r14
    1df6:	ff 92       	push	r15
    1df8:	2f 93       	push	r18
    1dfa:	3f 93       	push	r19
    1dfc:	4f 93       	push	r20
    1dfe:	5f 93       	push	r21
    1e00:	6f 93       	push	r22
    1e02:	7f 93       	push	r23
    1e04:	8f 93       	push	r24
    1e06:	9f 93       	push	r25
    1e08:	af 93       	push	r26
    1e0a:	bf 93       	push	r27
    1e0c:	ef 93       	push	r30
    1e0e:	ff 93       	push	r31
    1e10:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
    1e14:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <__data_end+0x1>
    1e18:	6c 01       	movw	r12, r24
    1e1a:	09 2e       	mov	r0, r25
    1e1c:	00 0c       	add	r0, r0
    1e1e:	ee 08       	sbc	r14, r14
    1e20:	ff 08       	sbc	r15, r15
    1e22:	76 01       	movw	r14, r12
    1e24:	dd 24       	eor	r13, r13
    1e26:	cc 24       	eor	r12, r12
    1e28:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1e2c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e30:	60 e0       	ldi	r22, 0x00	; 0
    1e32:	70 e0       	ldi	r23, 0x00	; 0
    1e34:	c4 2a       	or	r12, r20
    1e36:	d5 2a       	or	r13, r21
    1e38:	e6 2a       	or	r14, r22
    1e3a:	f7 2a       	or	r15, r23
    1e3c:	b0 9b       	sbis	0x16, 0	; 22
    1e3e:	1e c0       	rjmp	.+60     	; 0x1e7c <__vector_7+0x96>
    1e40:	6c 01       	movw	r12, r24
    1e42:	2f ef       	ldi	r18, 0xFF	; 255
    1e44:	c2 1a       	sub	r12, r18
    1e46:	d2 0a       	sbc	r13, r18
    1e48:	0d 2c       	mov	r0, r13
    1e4a:	00 0c       	add	r0, r0
    1e4c:	ee 08       	sbc	r14, r14
    1e4e:	ff 08       	sbc	r15, r15
    1e50:	d6 01       	movw	r26, r12
    1e52:	99 27       	eor	r25, r25
    1e54:	88 27       	eor	r24, r24
    1e56:	c0 90 84 00 	lds	r12, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1e5a:	d0 90 85 00 	lds	r13, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e5e:	e1 2c       	mov	r14, r1
    1e60:	f1 2c       	mov	r15, r1
    1e62:	c8 2a       	or	r12, r24
    1e64:	d9 2a       	or	r13, r25
    1e66:	ea 2a       	or	r14, r26
    1e68:	fb 2a       	or	r15, r27
    1e6a:	08 c0       	rjmp	.+16     	; 0x1e7c <__vector_7+0x96>
    1e6c:	8a e3       	ldi	r24, 0x3A	; 58
    1e6e:	91 e0       	ldi	r25, 0x01	; 1
    1e70:	0e 94 63 06 	call	0xcc6	; 0xcc6 <dequeue>
    1e74:	6c e3       	ldi	r22, 0x3C	; 60
    1e76:	71 e0       	ldi	r23, 0x01	; 1
    1e78:	0e 94 01 06 	call	0xc02	; 0xc02 <enqueueByDeadline>
    1e7c:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <timerQ>
    1e80:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <timerQ+0x1>
    1e84:	30 97       	sbiw	r30, 0x00	; 0
    1e86:	69 f0       	breq	.+26     	; 0x1ea2 <__vector_7+0xbc>
    1e88:	82 81       	ldd	r24, Z+2	; 0x02
    1e8a:	93 81       	ldd	r25, Z+3	; 0x03
    1e8c:	a4 81       	ldd	r26, Z+4	; 0x04
    1e8e:	b5 81       	ldd	r27, Z+5	; 0x05
    1e90:	8c 19       	sub	r24, r12
    1e92:	9d 09       	sbc	r25, r13
    1e94:	ae 09       	sbc	r26, r14
    1e96:	bf 09       	sbc	r27, r15
    1e98:	18 16       	cp	r1, r24
    1e9a:	19 06       	cpc	r1, r25
    1e9c:	1a 06       	cpc	r1, r26
    1e9e:	1b 06       	cpc	r1, r27
    1ea0:	2c f7       	brge	.-54     	; 0x1e6c <__vector_7+0x86>
    1ea2:	30 97       	sbiw	r30, 0x00	; 0
    1ea4:	21 f1       	breq	.+72     	; 0x1eee <__vector_7+0x108>
    1ea6:	82 81       	ldd	r24, Z+2	; 0x02
    1ea8:	93 81       	ldd	r25, Z+3	; 0x03
    1eaa:	a4 81       	ldd	r26, Z+4	; 0x04
    1eac:	b5 81       	ldd	r27, Z+5	; 0x05
    1eae:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <__data_end>
    1eb2:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <__data_end+0x1>
    1eb6:	2a 17       	cp	r18, r26
    1eb8:	3b 07       	cpc	r19, r27
    1eba:	c9 f4       	brne	.+50     	; 0x1eee <__vector_7+0x108>
    1ebc:	9c 01       	movw	r18, r24
    1ebe:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ec2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ec6:	84 1b       	sub	r24, r20
    1ec8:	95 0b       	sbc	r25, r21
    1eca:	01 97       	sbiw	r24, 0x01	; 1
    1ecc:	31 f4       	brne	.+12     	; 0x1eda <__vector_7+0xf4>
    1ece:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ed2:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ed6:	2f 5f       	subi	r18, 0xFF	; 255
    1ed8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eda:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1ede:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1ee2:	ef e6       	ldi	r30, 0x6F	; 111
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	80 81       	ld	r24, Z
    1ee8:	82 60       	ori	r24, 0x02	; 2
    1eea:	80 83       	st	Z, r24
    1eec:	05 c0       	rjmp	.+10     	; 0x1ef8 <__vector_7+0x112>
    1eee:	ef e6       	ldi	r30, 0x6F	; 111
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	8d 7f       	andi	r24, 0xFD	; 253
    1ef6:	80 83       	st	Z, r24
    1ef8:	0e 94 98 06 	call	0xd30	; 0xd30 <schedule>
    1efc:	ff 91       	pop	r31
    1efe:	ef 91       	pop	r30
    1f00:	bf 91       	pop	r27
    1f02:	af 91       	pop	r26
    1f04:	9f 91       	pop	r25
    1f06:	8f 91       	pop	r24
    1f08:	7f 91       	pop	r23
    1f0a:	6f 91       	pop	r22
    1f0c:	5f 91       	pop	r21
    1f0e:	4f 91       	pop	r20
    1f10:	3f 91       	pop	r19
    1f12:	2f 91       	pop	r18
    1f14:	ff 90       	pop	r15
    1f16:	ef 90       	pop	r14
    1f18:	df 90       	pop	r13
    1f1a:	cf 90       	pop	r12
    1f1c:	0f 90       	pop	r0
    1f1e:	0f be       	out	0x3f, r0	; 63
    1f20:	0f 90       	pop	r0
    1f22:	1f 90       	pop	r1
    1f24:	18 95       	reti

00001f26 <async>:
    1f26:	3f 92       	push	r3
    1f28:	4f 92       	push	r4
    1f2a:	5f 92       	push	r5
    1f2c:	6f 92       	push	r6
    1f2e:	7f 92       	push	r7
    1f30:	8f 92       	push	r8
    1f32:	9f 92       	push	r9
    1f34:	af 92       	push	r10
    1f36:	bf 92       	push	r11
    1f38:	cf 92       	push	r12
    1f3a:	df 92       	push	r13
    1f3c:	ef 92       	push	r14
    1f3e:	ff 92       	push	r15
    1f40:	0f 93       	push	r16
    1f42:	1f 93       	push	r17
    1f44:	cf 93       	push	r28
    1f46:	df 93       	push	r29
    1f48:	2b 01       	movw	r4, r22
    1f4a:	3c 01       	movw	r6, r24
    1f4c:	49 01       	movw	r8, r18
    1f4e:	5a 01       	movw	r10, r20
    1f50:	8f b7       	in	r24, 0x3f	; 63
    1f52:	80 78       	andi	r24, 0x80	; 128
    1f54:	38 2e       	mov	r3, r24
    1f56:	f8 94       	cli
    1f58:	86 e0       	ldi	r24, 0x06	; 6
    1f5a:	91 e0       	ldi	r25, 0x01	; 1
    1f5c:	0e 94 63 06 	call	0xcc6	; 0xcc6 <dequeue>
    1f60:	ec 01       	movw	r28, r24
    1f62:	1b 87       	std	Y+11, r17	; 0x0b
    1f64:	0a 87       	std	Y+10, r16	; 0x0a
    1f66:	fd 86       	std	Y+13, r15	; 0x0d
    1f68:	ec 86       	std	Y+12, r14	; 0x0c
    1f6a:	df 86       	std	Y+15, r13	; 0x0f
    1f6c:	ce 86       	std	Y+14, r12	; 0x0e
    1f6e:	33 20       	and	r3, r3
    1f70:	61 f0       	breq	.+24     	; 0x1f8a <async+0x64>
    1f72:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1f76:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1f7a:	02 80       	ldd	r0, Z+2	; 0x02
    1f7c:	f3 81       	ldd	r31, Z+3	; 0x03
    1f7e:	e0 2d       	mov	r30, r0
    1f80:	82 81       	ldd	r24, Z+2	; 0x02
    1f82:	93 81       	ldd	r25, Z+3	; 0x03
    1f84:	a4 81       	ldd	r26, Z+4	; 0x04
    1f86:	b5 81       	ldd	r27, Z+5	; 0x05
    1f88:	08 c0       	rjmp	.+16     	; 0x1f9a <async+0x74>
    1f8a:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <timestamp>
    1f8e:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <timestamp+0x1>
    1f92:	a0 91 38 01 	lds	r26, 0x0138	; 0x800138 <timestamp+0x2>
    1f96:	b0 91 39 01 	lds	r27, 0x0139	; 0x800139 <timestamp+0x3>
    1f9a:	48 0e       	add	r4, r24
    1f9c:	59 1e       	adc	r5, r25
    1f9e:	6a 1e       	adc	r6, r26
    1fa0:	7b 1e       	adc	r7, r27
    1fa2:	4a 82       	std	Y+2, r4	; 0x02
    1fa4:	5b 82       	std	Y+3, r5	; 0x03
    1fa6:	6c 82       	std	Y+4, r6	; 0x04
    1fa8:	7d 82       	std	Y+5, r7	; 0x05
    1faa:	18 14       	cp	r1, r8
    1fac:	19 04       	cpc	r1, r9
    1fae:	1a 04       	cpc	r1, r10
    1fb0:	1b 04       	cpc	r1, r11
    1fb2:	44 f0       	brlt	.+16     	; 0x1fc4 <async+0x9e>
    1fb4:	0f 2e       	mov	r0, r31
    1fb6:	88 24       	eor	r8, r8
    1fb8:	8a 94       	dec	r8
    1fba:	98 2c       	mov	r9, r8
    1fbc:	a8 2c       	mov	r10, r8
    1fbe:	ff e7       	ldi	r31, 0x7F	; 127
    1fc0:	bf 2e       	mov	r11, r31
    1fc2:	f0 2d       	mov	r31, r0
    1fc4:	84 0c       	add	r8, r4
    1fc6:	95 1c       	adc	r9, r5
    1fc8:	a6 1c       	adc	r10, r6
    1fca:	b7 1c       	adc	r11, r7
    1fcc:	8e 82       	std	Y+6, r8	; 0x06
    1fce:	9f 82       	std	Y+7, r9	; 0x07
    1fd0:	a8 86       	std	Y+8, r10	; 0x08
    1fd2:	b9 86       	std	Y+9, r11	; 0x09
    1fd4:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <__data_end>
    1fd8:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <__data_end+0x1>
    1fdc:	c9 01       	movw	r24, r18
    1fde:	03 2e       	mov	r0, r19
    1fe0:	00 0c       	add	r0, r0
    1fe2:	aa 0b       	sbc	r26, r26
    1fe4:	bb 0b       	sbc	r27, r27
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	99 27       	eor	r25, r25
    1fea:	88 27       	eor	r24, r24
    1fec:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ff0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ff4:	60 e0       	ldi	r22, 0x00	; 0
    1ff6:	70 e0       	ldi	r23, 0x00	; 0
    1ff8:	84 2b       	or	r24, r20
    1ffa:	95 2b       	or	r25, r21
    1ffc:	a6 2b       	or	r26, r22
    1ffe:	b7 2b       	or	r27, r23
    2000:	b0 9b       	sbis	0x16, 0	; 22
    2002:	13 c0       	rjmp	.+38     	; 0x202a <async+0x104>
    2004:	c9 01       	movw	r24, r18
    2006:	01 96       	adiw	r24, 0x01	; 1
    2008:	09 2e       	mov	r0, r25
    200a:	00 0c       	add	r0, r0
    200c:	aa 0b       	sbc	r26, r26
    200e:	bb 0b       	sbc	r27, r27
    2010:	dc 01       	movw	r26, r24
    2012:	99 27       	eor	r25, r25
    2014:	88 27       	eor	r24, r24
    2016:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    201a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    201e:	60 e0       	ldi	r22, 0x00	; 0
    2020:	70 e0       	ldi	r23, 0x00	; 0
    2022:	84 2b       	or	r24, r20
    2024:	95 2b       	or	r25, r21
    2026:	a6 2b       	or	r26, r22
    2028:	b7 2b       	or	r27, r23
    202a:	48 1a       	sub	r4, r24
    202c:	59 0a       	sbc	r5, r25
    202e:	6a 0a       	sbc	r6, r26
    2030:	7b 0a       	sbc	r7, r27
    2032:	14 14       	cp	r1, r4
    2034:	15 04       	cpc	r1, r5
    2036:	16 04       	cpc	r1, r6
    2038:	17 04       	cpc	r1, r7
    203a:	ac f5       	brge	.+106    	; 0x20a6 <async+0x180>
    203c:	6a e3       	ldi	r22, 0x3A	; 58
    203e:	71 e0       	ldi	r23, 0x01	; 1
    2040:	ce 01       	movw	r24, r28
    2042:	0e 94 32 06 	call	0xc64	; 0xc64 <enqueueByBaseline>
    2046:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <timerQ>
    204a:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <timerQ+0x1>
    204e:	30 97       	sbiw	r30, 0x00	; 0
    2050:	21 f1       	breq	.+72     	; 0x209a <async+0x174>
    2052:	82 81       	ldd	r24, Z+2	; 0x02
    2054:	93 81       	ldd	r25, Z+3	; 0x03
    2056:	a4 81       	ldd	r26, Z+4	; 0x04
    2058:	b5 81       	ldd	r27, Z+5	; 0x05
    205a:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <__data_end>
    205e:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <__data_end+0x1>
    2062:	2a 17       	cp	r18, r26
    2064:	3b 07       	cpc	r19, r27
    2066:	c9 f4       	brne	.+50     	; 0x209a <async+0x174>
    2068:	9c 01       	movw	r18, r24
    206a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    206e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    2072:	84 1b       	sub	r24, r20
    2074:	95 0b       	sbc	r25, r21
    2076:	01 97       	sbiw	r24, 0x01	; 1
    2078:	31 f4       	brne	.+12     	; 0x2086 <async+0x160>
    207a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    207e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    2082:	2f 5f       	subi	r18, 0xFF	; 255
    2084:	3f 4f       	sbci	r19, 0xFF	; 255
    2086:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    208a:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    208e:	ef e6       	ldi	r30, 0x6F	; 111
    2090:	f0 e0       	ldi	r31, 0x00	; 0
    2092:	80 81       	ld	r24, Z
    2094:	82 60       	ori	r24, 0x02	; 2
    2096:	80 83       	st	Z, r24
    2098:	39 c0       	rjmp	.+114    	; 0x210c <async+0x1e6>
    209a:	ef e6       	ldi	r30, 0x6F	; 111
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	80 81       	ld	r24, Z
    20a0:	8d 7f       	andi	r24, 0xFD	; 253
    20a2:	80 83       	st	Z, r24
    20a4:	33 c0       	rjmp	.+102    	; 0x210c <async+0x1e6>
    20a6:	6c e3       	ldi	r22, 0x3C	; 60
    20a8:	71 e0       	ldi	r23, 0x01	; 1
    20aa:	ce 01       	movw	r24, r28
    20ac:	0e 94 01 06 	call	0xc02	; 0xc02 <enqueueByDeadline>
    20b0:	33 20       	and	r3, r3
    20b2:	61 f1       	breq	.+88     	; 0x210c <async+0x1e6>
    20b4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
    20b8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
    20bc:	89 2b       	or	r24, r25
    20be:	31 f1       	breq	.+76     	; 0x210c <async+0x1e6>
    20c0:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <msgQ>
    20c4:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <msgQ+0x1>
    20c8:	86 81       	ldd	r24, Z+6	; 0x06
    20ca:	97 81       	ldd	r25, Z+7	; 0x07
    20cc:	a0 85       	ldd	r26, Z+8	; 0x08
    20ce:	b1 85       	ldd	r27, Z+9	; 0x09
    20d0:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
    20d4:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
    20d8:	02 80       	ldd	r0, Z+2	; 0x02
    20da:	f3 81       	ldd	r31, Z+3	; 0x03
    20dc:	e0 2d       	mov	r30, r0
    20de:	46 81       	ldd	r20, Z+6	; 0x06
    20e0:	57 81       	ldd	r21, Z+7	; 0x07
    20e2:	60 85       	ldd	r22, Z+8	; 0x08
    20e4:	71 85       	ldd	r23, Z+9	; 0x09
    20e6:	84 1b       	sub	r24, r20
    20e8:	95 0b       	sbc	r25, r21
    20ea:	a6 0b       	sbc	r26, r22
    20ec:	b7 0b       	sbc	r27, r23
    20ee:	72 f4       	brpl	.+28     	; 0x210c <async+0x1e6>
    20f0:	84 e0       	ldi	r24, 0x04	; 4
    20f2:	91 e0       	ldi	r25, 0x01	; 1
    20f4:	0e 94 8e 06 	call	0xd1c	; 0xd1c <pop>
    20f8:	62 e0       	ldi	r22, 0x02	; 2
    20fa:	71 e0       	ldi	r23, 0x01	; 1
    20fc:	0e 94 84 06 	call	0xd08	; 0xd08 <push>
    2100:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <activeStack>
    2104:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <activeStack+0x1>
    2108:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <dispatch>
    210c:	33 20       	and	r3, r3
    210e:	09 f0       	breq	.+2      	; 0x2112 <async+0x1ec>
    2110:	78 94       	sei
    2112:	ce 01       	movw	r24, r28
    2114:	df 91       	pop	r29
    2116:	cf 91       	pop	r28
    2118:	1f 91       	pop	r17
    211a:	0f 91       	pop	r16
    211c:	ff 90       	pop	r15
    211e:	ef 90       	pop	r14
    2120:	df 90       	pop	r13
    2122:	cf 90       	pop	r12
    2124:	bf 90       	pop	r11
    2126:	af 90       	pop	r10
    2128:	9f 90       	pop	r9
    212a:	8f 90       	pop	r8
    212c:	7f 90       	pop	r7
    212e:	6f 90       	pop	r6
    2130:	5f 90       	pop	r5
    2132:	4f 90       	pop	r4
    2134:	3f 90       	pop	r3
    2136:	08 95       	ret

00002138 <sync>:
    2138:	cf 92       	push	r12
    213a:	df 92       	push	r13
    213c:	ef 92       	push	r14
    213e:	ff 92       	push	r15
    2140:	0f 93       	push	r16
    2142:	1f 93       	push	r17
    2144:	cf 93       	push	r28
    2146:	df 93       	push	r29
    2148:	ec 01       	movw	r28, r24
    214a:	7b 01       	movw	r14, r22
    214c:	6a 01       	movw	r12, r20
    214e:	1f b7       	in	r17, 0x3f	; 63
    2150:	10 78       	andi	r17, 0x80	; 128
    2152:	f8 94       	cli
    2154:	a8 81       	ld	r26, Y
    2156:	b9 81       	ldd	r27, Y+1	; 0x01
    2158:	10 97       	sbiw	r26, 0x00	; 0
    215a:	19 f4       	brne	.+6      	; 0x2162 <sync+0x2a>
    215c:	35 c0       	rjmp	.+106    	; 0x21c8 <sync+0x90>
    215e:	a0 81       	ld	r26, Z
    2160:	b1 81       	ldd	r27, Z+1	; 0x01
    2162:	14 96       	adiw	r26, 0x04	; 4
    2164:	ed 91       	ld	r30, X+
    2166:	fc 91       	ld	r31, X
    2168:	15 97       	sbiw	r26, 0x05	; 5
    216a:	30 97       	sbiw	r30, 0x00	; 0
    216c:	c1 f7       	brne	.-16     	; 0x215e <sync+0x26>
    216e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2172:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2176:	a2 17       	cp	r26, r18
    2178:	b3 07       	cpc	r27, r19
    217a:	11 f0       	breq	.+4      	; 0x2180 <sync+0x48>
    217c:	11 11       	cpse	r17, r1
    217e:	07 c0       	rjmp	.+14     	; 0x218e <sync+0x56>
    2180:	11 23       	and	r17, r17
    2182:	09 f4       	brne	.+2      	; 0x2186 <sync+0x4e>
    2184:	4a c0       	rjmp	.+148    	; 0x221a <sync+0xe2>
    2186:	78 94       	sei
    2188:	8f ef       	ldi	r24, 0xFF	; 255
    218a:	9f ef       	ldi	r25, 0xFF	; 255
    218c:	4e c0       	rjmp	.+156    	; 0x222a <sync+0xf2>
    218e:	8a 81       	ldd	r24, Y+2	; 0x02
    2190:	9b 81       	ldd	r25, Y+3	; 0x03
    2192:	00 97       	sbiw	r24, 0x00	; 0
    2194:	19 f0       	breq	.+6      	; 0x219c <sync+0x64>
    2196:	fc 01       	movw	r30, r24
    2198:	15 82       	std	Z+5, r1	; 0x05
    219a:	14 82       	std	Z+4, r1	; 0x04
    219c:	3b 83       	std	Y+3, r19	; 0x03
    219e:	2a 83       	std	Y+2, r18	; 0x02
    21a0:	f9 01       	movw	r30, r18
    21a2:	d5 83       	std	Z+5, r29	; 0x05
    21a4:	c4 83       	std	Z+4, r28	; 0x04
    21a6:	cd 01       	movw	r24, r26
    21a8:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <dispatch>
    21ac:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    21b0:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    21b4:	82 81       	ldd	r24, Z+2	; 0x02
    21b6:	93 81       	ldd	r25, Z+3	; 0x03
    21b8:	89 2b       	or	r24, r25
    21ba:	31 f4       	brne	.+12     	; 0x21c8 <sync+0x90>
    21bc:	11 23       	and	r17, r17
    21be:	81 f1       	breq	.+96     	; 0x2220 <sync+0xe8>
    21c0:	78 94       	sei
    21c2:	80 e0       	ldi	r24, 0x00	; 0
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	31 c0       	rjmp	.+98     	; 0x222a <sync+0xf2>
    21c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    21cc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    21d0:	99 83       	std	Y+1, r25	; 0x01
    21d2:	88 83       	st	Y, r24
    21d4:	11 23       	and	r17, r17
    21d6:	29 f0       	breq	.+10     	; 0x21e2 <sync+0xaa>
    21d8:	8a 81       	ldd	r24, Y+2	; 0x02
    21da:	9b 81       	ldd	r25, Y+3	; 0x03
    21dc:	01 97       	sbiw	r24, 0x01	; 1
    21de:	09 f0       	breq	.+2      	; 0x21e2 <sync+0xaa>
    21e0:	78 94       	sei
    21e2:	b6 01       	movw	r22, r12
    21e4:	ce 01       	movw	r24, r28
    21e6:	f7 01       	movw	r30, r14
    21e8:	09 95       	icall
    21ea:	f8 2e       	mov	r15, r24
    21ec:	09 2f       	mov	r16, r25
    21ee:	8f b7       	in	r24, 0x3f	; 63
    21f0:	f8 94       	cli
    21f2:	19 82       	std	Y+1, r1	; 0x01
    21f4:	18 82       	st	Y, r1
    21f6:	8a 81       	ldd	r24, Y+2	; 0x02
    21f8:	9b 81       	ldd	r25, Y+3	; 0x03
    21fa:	82 30       	cpi	r24, 0x02	; 2
    21fc:	91 05       	cpc	r25, r1
    21fe:	38 f0       	brcs	.+14     	; 0x220e <sync+0xd6>
    2200:	1b 82       	std	Y+3, r1	; 0x03
    2202:	1a 82       	std	Y+2, r1	; 0x02
    2204:	fc 01       	movw	r30, r24
    2206:	15 82       	std	Z+5, r1	; 0x05
    2208:	14 82       	std	Z+4, r1	; 0x04
    220a:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <dispatch>
    220e:	11 23       	and	r17, r17
    2210:	51 f0       	breq	.+20     	; 0x2226 <sync+0xee>
    2212:	78 94       	sei
    2214:	8f 2d       	mov	r24, r15
    2216:	90 2f       	mov	r25, r16
    2218:	08 c0       	rjmp	.+16     	; 0x222a <sync+0xf2>
    221a:	8f ef       	ldi	r24, 0xFF	; 255
    221c:	9f ef       	ldi	r25, 0xFF	; 255
    221e:	05 c0       	rjmp	.+10     	; 0x222a <sync+0xf2>
    2220:	80 e0       	ldi	r24, 0x00	; 0
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	02 c0       	rjmp	.+4      	; 0x222a <sync+0xf2>
    2226:	8f 2d       	mov	r24, r15
    2228:	90 2f       	mov	r25, r16
    222a:	df 91       	pop	r29
    222c:	cf 91       	pop	r28
    222e:	1f 91       	pop	r17
    2230:	0f 91       	pop	r16
    2232:	ff 90       	pop	r15
    2234:	ef 90       	pop	r14
    2236:	df 90       	pop	r13
    2238:	cf 90       	pop	r12
    223a:	08 95       	ret

0000223c <run>:
    223c:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2240:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2244:	8c e3       	ldi	r24, 0x3C	; 60
    2246:	91 e0       	ldi	r25, 0x01	; 1
    2248:	0e 94 63 06 	call	0xcc6	; 0xcc6 <dequeue>
    224c:	ec 01       	movw	r28, r24
    224e:	f8 01       	movw	r30, r16
    2250:	93 83       	std	Z+3, r25	; 0x03
    2252:	82 83       	std	Z+2, r24	; 0x02
    2254:	78 94       	sei
    2256:	6c 85       	ldd	r22, Y+12	; 0x0c
    2258:	7d 85       	ldd	r23, Y+13	; 0x0d
    225a:	4e 85       	ldd	r20, Y+14	; 0x0e
    225c:	5f 85       	ldd	r21, Y+15	; 0x0f
    225e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2260:	9b 85       	ldd	r25, Y+11	; 0x0b
    2262:	0e 94 9c 10 	call	0x2138	; 0x2138 <sync>
    2266:	8f b7       	in	r24, 0x3f	; 63
    2268:	f8 94       	cli
    226a:	66 e0       	ldi	r22, 0x06	; 6
    226c:	71 e0       	ldi	r23, 0x01	; 1
    226e:	ce 01       	movw	r24, r28
    2270:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <insert>
    2274:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
    2278:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
    227c:	01 90       	ld	r0, Z+
    227e:	f0 81       	ld	r31, Z
    2280:	e0 2d       	mov	r30, r0
    2282:	c2 81       	ldd	r28, Z+2	; 0x02
    2284:	d3 81       	ldd	r29, Z+3	; 0x03
    2286:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <msgQ>
    228a:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <msgQ+0x1>
    228e:	30 97       	sbiw	r30, 0x00	; 0
    2290:	a1 f0       	breq	.+40     	; 0x22ba <run+0x7e>
    2292:	20 97       	sbiw	r28, 0x00	; 0
    2294:	99 f2       	breq	.-90     	; 0x223c <run>
    2296:	86 81       	ldd	r24, Z+6	; 0x06
    2298:	97 81       	ldd	r25, Z+7	; 0x07
    229a:	a0 85       	ldd	r26, Z+8	; 0x08
    229c:	b1 85       	ldd	r27, Z+9	; 0x09
    229e:	4e 81       	ldd	r20, Y+6	; 0x06
    22a0:	5f 81       	ldd	r21, Y+7	; 0x07
    22a2:	68 85       	ldd	r22, Y+8	; 0x08
    22a4:	79 85       	ldd	r23, Y+9	; 0x09
    22a6:	84 1b       	sub	r24, r20
    22a8:	95 0b       	sbc	r25, r21
    22aa:	a6 0b       	sbc	r26, r22
    22ac:	b7 0b       	sbc	r27, r23
    22ae:	18 16       	cp	r1, r24
    22b0:	19 06       	cpc	r1, r25
    22b2:	1a 06       	cpc	r1, r26
    22b4:	1b 06       	cpc	r1, r27
    22b6:	0c f0       	brlt	.+2      	; 0x22ba <run+0x7e>
    22b8:	c1 cf       	rjmp	.-126    	; 0x223c <run>
    22ba:	82 e0       	ldi	r24, 0x02	; 2
    22bc:	91 e0       	ldi	r25, 0x01	; 1
    22be:	0e 94 8e 06 	call	0xd1c	; 0xd1c <pop>
    22c2:	64 e0       	ldi	r22, 0x04	; 4
    22c4:	71 e0       	ldi	r23, 0x01	; 1
    22c6:	0e 94 84 06 	call	0xd08	; 0xd08 <push>
    22ca:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <activeStack>
    22ce:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <activeStack+0x1>
    22d2:	02 c0       	rjmp	.+4      	; 0x22d8 <run+0x9c>
    22d4:	a0 81       	ld	r26, Z
    22d6:	b1 81       	ldd	r27, Z+1	; 0x01
    22d8:	14 96       	adiw	r26, 0x04	; 4
    22da:	ed 91       	ld	r30, X+
    22dc:	fc 91       	ld	r31, X
    22de:	15 97       	sbiw	r26, 0x05	; 5
    22e0:	30 97       	sbiw	r30, 0x00	; 0
    22e2:	c1 f7       	brne	.-16     	; 0x22d4 <run+0x98>
    22e4:	cd 01       	movw	r24, r26
    22e6:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <dispatch>
    22ea:	a8 cf       	rjmp	.-176    	; 0x223c <run>

000022ec <install>:
    thread0.msg = NULL;
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    22ec:	fc 01       	movw	r30, r24
    if (i >= 0 && i < N_VECTORS) {
    22ee:	42 31       	cpi	r20, 0x12	; 18
    22f0:	b8 f4       	brcc	.+46     	; 0x2320 <install+0x34>
        char status;
        DISABLE(status);
    22f2:	9f b7       	in	r25, 0x3f	; 63
    22f4:	90 78       	andi	r25, 0x80	; 128
    22f6:	f8 94       	cli
        otable[i] = obj;
    22f8:	50 e0       	ldi	r21, 0x00	; 0
    22fa:	44 0f       	add	r20, r20
    22fc:	55 1f       	adc	r21, r21
    22fe:	da 01       	movw	r26, r20
    2300:	a2 5c       	subi	r26, 0xC2	; 194
    2302:	be 4f       	sbci	r27, 0xFE	; 254
    2304:	ed 93       	st	X+, r30
    2306:	fc 93       	st	X, r31
        mtable[i] = m;
    2308:	da 01       	movw	r26, r20
    230a:	aa 52       	subi	r26, 0x2A	; 42
    230c:	be 4f       	sbci	r27, 0xFE	; 254
    230e:	6d 93       	st	X+, r22
    2310:	7c 93       	st	X, r23
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    2312:	21 e0       	ldi	r18, 0x01	; 1
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	33 83       	std	Z+3, r19	; 0x03
    2318:	22 83       	std	Z+2, r18	; 0x02
        ENABLE(status);
    231a:	99 23       	and	r25, r25
    231c:	09 f0       	breq	.+2      	; 0x2320 <install+0x34>
    231e:	78 94       	sei
    2320:	08 95       	ret

00002322 <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    2322:	8c 01       	movw	r16, r24
    2324:	7b 01       	movw	r14, r22
    2326:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    2328:	8f b7       	in	r24, 0x3f	; 63
    232a:	f8 94       	cli
    initialize();
    232c:	0e 94 42 05 	call	0xa84	; 0xa84 <initialize>
    ENABLE(1);
    2330:	78 94       	sei
    if (m != NULL)
    2332:	e1 14       	cp	r14, r1
    2334:	f1 04       	cpc	r15, r1
    2336:	41 f0       	breq	.+16     	; 0x2348 <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	a9 01       	movw	r20, r18
    233e:	60 e0       	ldi	r22, 0x00	; 0
    2340:	70 e0       	ldi	r23, 0x00	; 0
    2342:	cb 01       	movw	r24, r22
    2344:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <async>
    DISABLE(status);
    2348:	8f b7       	in	r24, 0x3f	; 63
    234a:	f8 94       	cli
    idle();
    234c:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <idle>

00002350 <__divmodhi4>:
    2350:	97 fb       	bst	r25, 7
    2352:	07 2e       	mov	r0, r23
    2354:	16 f4       	brtc	.+4      	; 0x235a <__divmodhi4+0xa>
    2356:	00 94       	com	r0
    2358:	07 d0       	rcall	.+14     	; 0x2368 <__divmodhi4_neg1>
    235a:	77 fd       	sbrc	r23, 7
    235c:	09 d0       	rcall	.+18     	; 0x2370 <__divmodhi4_neg2>
    235e:	0e 94 c3 11 	call	0x2386	; 0x2386 <__udivmodhi4>
    2362:	07 fc       	sbrc	r0, 7
    2364:	05 d0       	rcall	.+10     	; 0x2370 <__divmodhi4_neg2>
    2366:	3e f4       	brtc	.+14     	; 0x2376 <__divmodhi4_exit>

00002368 <__divmodhi4_neg1>:
    2368:	90 95       	com	r25
    236a:	81 95       	neg	r24
    236c:	9f 4f       	sbci	r25, 0xFF	; 255
    236e:	08 95       	ret

00002370 <__divmodhi4_neg2>:
    2370:	70 95       	com	r23
    2372:	61 95       	neg	r22
    2374:	7f 4f       	sbci	r23, 0xFF	; 255

00002376 <__divmodhi4_exit>:
    2376:	08 95       	ret

00002378 <__usmulhisi3>:
    2378:	0e 94 d7 11 	call	0x23ae	; 0x23ae <__umulhisi3>

0000237c <__usmulhisi3_tail>:
    237c:	b7 ff       	sbrs	r27, 7
    237e:	08 95       	ret
    2380:	82 1b       	sub	r24, r18
    2382:	93 0b       	sbc	r25, r19
    2384:	08 95       	ret

00002386 <__udivmodhi4>:
    2386:	aa 1b       	sub	r26, r26
    2388:	bb 1b       	sub	r27, r27
    238a:	51 e1       	ldi	r21, 0x11	; 17
    238c:	07 c0       	rjmp	.+14     	; 0x239c <__udivmodhi4_ep>

0000238e <__udivmodhi4_loop>:
    238e:	aa 1f       	adc	r26, r26
    2390:	bb 1f       	adc	r27, r27
    2392:	a6 17       	cp	r26, r22
    2394:	b7 07       	cpc	r27, r23
    2396:	10 f0       	brcs	.+4      	; 0x239c <__udivmodhi4_ep>
    2398:	a6 1b       	sub	r26, r22
    239a:	b7 0b       	sbc	r27, r23

0000239c <__udivmodhi4_ep>:
    239c:	88 1f       	adc	r24, r24
    239e:	99 1f       	adc	r25, r25
    23a0:	5a 95       	dec	r21
    23a2:	a9 f7       	brne	.-22     	; 0x238e <__udivmodhi4_loop>
    23a4:	80 95       	com	r24
    23a6:	90 95       	com	r25
    23a8:	bc 01       	movw	r22, r24
    23aa:	cd 01       	movw	r24, r26
    23ac:	08 95       	ret

000023ae <__umulhisi3>:
    23ae:	a2 9f       	mul	r26, r18
    23b0:	b0 01       	movw	r22, r0
    23b2:	b3 9f       	mul	r27, r19
    23b4:	c0 01       	movw	r24, r0
    23b6:	a3 9f       	mul	r26, r19
    23b8:	70 0d       	add	r23, r0
    23ba:	81 1d       	adc	r24, r1
    23bc:	11 24       	eor	r1, r1
    23be:	91 1d       	adc	r25, r1
    23c0:	b2 9f       	mul	r27, r18
    23c2:	70 0d       	add	r23, r0
    23c4:	81 1d       	adc	r24, r1
    23c6:	11 24       	eor	r1, r1
    23c8:	91 1d       	adc	r25, r1
    23ca:	08 95       	ret

000023cc <setjmp>:
    23cc:	dc 01       	movw	r26, r24
    23ce:	2d 92       	st	X+, r2
    23d0:	3d 92       	st	X+, r3
    23d2:	4d 92       	st	X+, r4
    23d4:	5d 92       	st	X+, r5
    23d6:	6d 92       	st	X+, r6
    23d8:	7d 92       	st	X+, r7
    23da:	8d 92       	st	X+, r8
    23dc:	9d 92       	st	X+, r9
    23de:	ad 92       	st	X+, r10
    23e0:	bd 92       	st	X+, r11
    23e2:	cd 92       	st	X+, r12
    23e4:	dd 92       	st	X+, r13
    23e6:	ed 92       	st	X+, r14
    23e8:	fd 92       	st	X+, r15
    23ea:	0d 93       	st	X+, r16
    23ec:	1d 93       	st	X+, r17
    23ee:	cd 93       	st	X+, r28
    23f0:	dd 93       	st	X+, r29
    23f2:	ff 91       	pop	r31
    23f4:	ef 91       	pop	r30
    23f6:	8d b7       	in	r24, 0x3d	; 61
    23f8:	8d 93       	st	X+, r24
    23fa:	8e b7       	in	r24, 0x3e	; 62
    23fc:	8d 93       	st	X+, r24
    23fe:	8f b7       	in	r24, 0x3f	; 63
    2400:	8d 93       	st	X+, r24
    2402:	ed 93       	st	X+, r30
    2404:	fd 93       	st	X+, r31
    2406:	88 27       	eor	r24, r24
    2408:	99 27       	eor	r25, r25
    240a:	09 94       	ijmp

0000240c <longjmp>:
    240c:	dc 01       	movw	r26, r24
    240e:	cb 01       	movw	r24, r22
    2410:	81 30       	cpi	r24, 0x01	; 1
    2412:	91 05       	cpc	r25, r1
    2414:	81 1d       	adc	r24, r1
    2416:	2d 90       	ld	r2, X+
    2418:	3d 90       	ld	r3, X+
    241a:	4d 90       	ld	r4, X+
    241c:	5d 90       	ld	r5, X+
    241e:	6d 90       	ld	r6, X+
    2420:	7d 90       	ld	r7, X+
    2422:	8d 90       	ld	r8, X+
    2424:	9d 90       	ld	r9, X+
    2426:	ad 90       	ld	r10, X+
    2428:	bd 90       	ld	r11, X+
    242a:	cd 90       	ld	r12, X+
    242c:	dd 90       	ld	r13, X+
    242e:	ed 90       	ld	r14, X+
    2430:	fd 90       	ld	r15, X+
    2432:	0d 91       	ld	r16, X+
    2434:	1d 91       	ld	r17, X+
    2436:	cd 91       	ld	r28, X+
    2438:	dd 91       	ld	r29, X+
    243a:	ed 91       	ld	r30, X+
    243c:	fd 91       	ld	r31, X+
    243e:	0d 90       	ld	r0, X+
    2440:	f8 94       	cli
    2442:	fe bf       	out	0x3e, r31	; 62
    2444:	0f be       	out	0x3f, r0	; 63
    2446:	ed bf       	out	0x3d, r30	; 61
    2448:	ed 91       	ld	r30, X+
    244a:	fd 91       	ld	r31, X+
    244c:	09 94       	ijmp

0000244e <_exit>:
    244e:	f8 94       	cli

00002450 <__stop_program>:
    2450:	ff cf       	rjmp	.-2      	; 0x2450 <__stop_program>
